
WINC1500_SERIAL_BRIDGE_SAM_IoT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000053d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005a8  20000070  00005448  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000618  000059f0  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00041dee  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060da  00000000  00000000  00061edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d7dc  00000000  00000000  00067fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000aa8  00000000  00000000  00075795  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f70  00000000  00000000  0007623d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f47d  00000000  00000000  000771ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014aaa  00000000  00000000  0009662a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093557  00000000  00000000  000ab0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002590  00000000  00000000  0013e62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 26 00 20 45 2e 00 00 41 2e 00 00 41 2e 00 00     .&. E...A...A...
	...
      2c:	41 2e 00 00 00 00 00 00 00 00 00 00 41 2e 00 00     A...........A...
      3c:	41 2e 00 00 41 2e 00 00 41 2e 00 00 41 2e 00 00     A...A...A...A...
      4c:	41 2e 00 00 a1 15 00 00 41 2e 00 00 41 2e 00 00     A.......A...A...
      5c:	41 2e 00 00 41 2e 00 00 81 1a 00 00 91 1a 00 00     A...A...........
      6c:	a1 1a 00 00 b1 1a 00 00 c1 1a 00 00 d1 1a 00 00     ................
      7c:	41 2e 00 00 41 2e 00 00 41 2e 00 00 41 2e 00 00     A...A...A...A...
      8c:	41 2e 00 00 41 2e 00 00 00 00 00 00 00 00 00 00     A...A...........
      9c:	41 2e 00 00 41 2e 00 00 41 2e 00 00 41 2e 00 00     A...A...A...A...
      ac:	41 2e 00 00 00 00 00 00                             A.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	000053d8 	.word	0x000053d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	000053d8 	.word	0x000053d8
     10c:	000053d8 	.word	0x000053d8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00002bd1 	.word	0x00002bd1
     140:	00003751 	.word	0x00003751
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     180:	b570      	push	{r4, r5, r6, lr}
     182:	b082      	sub	sp, #8
	gpfIsr = NULL;
     184:	2300      	movs	r3, #0
     186:	4a15      	ldr	r2, [pc, #84]	; (1dc <nm_bsp_init+0x5c>)
     188:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     18a:	ac01      	add	r4, sp, #4
     18c:	2501      	movs	r5, #1
     18e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     190:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     194:	0021      	movs	r1, r4
     196:	202a      	movs	r0, #42	; 0x2a
     198:	4e11      	ldr	r6, [pc, #68]	; (1e0 <nm_bsp_init+0x60>)
     19a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	202b      	movs	r0, #43	; 0x2b
     1a0:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1a2:	0021      	movs	r1, r4
     1a4:	2013      	movs	r0, #19
     1a6:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1a8:	4b0e      	ldr	r3, [pc, #56]	; (1e4 <nm_bsp_init+0x64>)
     1aa:	2280      	movs	r2, #128	; 0x80
     1ac:	0112      	lsls	r2, r2, #4
     1ae:	615a      	str	r2, [r3, #20]
     1b0:	2280      	movs	r2, #128	; 0x80
     1b2:	00d2      	lsls	r2, r2, #3
     1b4:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     1b6:	4b0c      	ldr	r3, [pc, #48]	; (1e8 <nm_bsp_init+0x68>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	421d      	tst	r5, r3
     1bc:	d003      	beq.n	1c6 <nm_bsp_init+0x46>
     1be:	4b0a      	ldr	r3, [pc, #40]	; (1e8 <nm_bsp_init+0x68>)
     1c0:	681b      	ldr	r3, [r3, #0]
     1c2:	079b      	lsls	r3, r3, #30
     1c4:	d401      	bmi.n	1ca <nm_bsp_init+0x4a>
	    delay_init();
     1c6:	4b09      	ldr	r3, [pc, #36]	; (1ec <nm_bsp_init+0x6c>)
     1c8:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     1ca:	2201      	movs	r2, #1
     1cc:	4b08      	ldr	r3, [pc, #32]	; (1f0 <nm_bsp_init+0x70>)
     1ce:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1d4:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     1d6:	2000      	movs	r0, #0
     1d8:	b002      	add	sp, #8
     1da:	bd70      	pop	{r4, r5, r6, pc}
     1dc:	2000008c 	.word	0x2000008c
     1e0:	00001679 	.word	0x00001679
     1e4:	41004480 	.word	0x41004480
     1e8:	e000e010 	.word	0xe000e010
     1ec:	00000115 	.word	0x00000115
     1f0:	2000000a 	.word	0x2000000a

000001f4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     1f4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     1f6:	1e44      	subs	r4, r0, #1
     1f8:	2800      	cmp	r0, #0
     1fa:	d004      	beq.n	206 <nm_bsp_sleep+0x12>
		delay_ms(1);
     1fc:	4d02      	ldr	r5, [pc, #8]	; (208 <nm_bsp_sleep+0x14>)
     1fe:	2001      	movs	r0, #1
     200:	47a8      	blx	r5
	while (u32TimeMsec--) {
     202:	3c01      	subs	r4, #1
     204:	d2fb      	bcs.n	1fe <nm_bsp_sleep+0xa>
	}
}
     206:	bd70      	pop	{r4, r5, r6, pc}
     208:	00000155 	.word	0x00000155

0000020c <nm_bsp_reset>:
{
     20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     20e:	4c07      	ldr	r4, [pc, #28]	; (22c <nm_bsp_reset+0x20>)
     210:	2780      	movs	r7, #128	; 0x80
     212:	013f      	lsls	r7, r7, #4
     214:	6167      	str	r7, [r4, #20]
     216:	2580      	movs	r5, #128	; 0x80
     218:	00ed      	lsls	r5, r5, #3
     21a:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     21c:	2001      	movs	r0, #1
     21e:	4e04      	ldr	r6, [pc, #16]	; (230 <nm_bsp_reset+0x24>)
     220:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     222:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     224:	200a      	movs	r0, #10
     226:	47b0      	blx	r6
     228:	61a5      	str	r5, [r4, #24]
}
     22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     22c:	41004480 	.word	0x41004480
     230:	000001f5 	.word	0x000001f5

00000234 <spi_rw>:

	return M2M_SUCCESS;
}

sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     234:	b5f0      	push	{r4, r5, r6, r7, lr}
     236:	46de      	mov	lr, fp
     238:	4657      	mov	r7, sl
     23a:	464e      	mov	r6, r9
     23c:	4645      	mov	r5, r8
     23e:	b5e0      	push	{r5, r6, r7, lr}
     240:	b083      	sub	sp, #12
     242:	0007      	movs	r7, r0
     244:	000e      	movs	r6, r1
     246:	0014      	movs	r4, r2
	uint8 u8Dummy = 0;
     248:	2200      	movs	r2, #0
     24a:	466b      	mov	r3, sp
     24c:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     24e:	2900      	cmp	r1, #0
     250:	d00c      	beq.n	26c <spi_rw+0x38>
     252:	2c00      	cmp	r4, #0
     254:	d068      	beq.n	328 <spi_rw+0xf4>
		return M2M_ERR_BUS_FAIL;
     256:	2006      	movs	r0, #6
     258:	4240      	negs	r0, r0
	if (!pu8Mosi) {
     25a:	2f00      	cmp	r7, #0
     25c:	d15a      	bne.n	314 <spi_rw+0xe0>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     25e:	2300      	movs	r3, #0
     260:	469b      	mov	fp, r3
		u8SkipMosi = 1;
     262:	3301      	adds	r3, #1
     264:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     266:	466b      	mov	r3, sp
     268:	1ddf      	adds	r7, r3, #7
     26a:	e009      	b.n	280 <spi_rw+0x4c>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     26c:	2800      	cmp	r0, #0
     26e:	d058      	beq.n	322 <spi_rw+0xee>
     270:	2c00      	cmp	r4, #0
     272:	d05c      	beq.n	32e <spi_rw+0xfa>
		u8SkipMiso = 1;
     274:	2301      	movs	r3, #1
     276:	469b      	mov	fp, r3
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     278:	2300      	movs	r3, #0
     27a:	4698      	mov	r8, r3
		pu8Miso = &u8Dummy;
     27c:	466b      	mov	r3, sp
     27e:	1dde      	adds	r6, r3, #7
	spi_select_slave(&master, &slave_inst, true);
     280:	2201      	movs	r2, #1
     282:	492c      	ldr	r1, [pc, #176]	; (334 <spi_rw+0x100>)
     284:	482c      	ldr	r0, [pc, #176]	; (338 <spi_rw+0x104>)
     286:	4b2d      	ldr	r3, [pc, #180]	; (33c <spi_rw+0x108>)
     288:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     28a:	4b2b      	ldr	r3, [pc, #172]	; (338 <spi_rw+0x104>)
     28c:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     28e:	2501      	movs	r5, #1
		while (!spi_is_ready_to_read(&master))
     290:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     292:	4699      	mov	r9, r3
			pu8Miso++;
     294:	465a      	mov	r2, fp
     296:	4253      	negs	r3, r2
     298:	415a      	adcs	r2, r3
     29a:	4693      	mov	fp, r2
		txd_data = *pu8Mosi;
     29c:	7838      	ldrb	r0, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     29e:	4653      	mov	r3, sl
     2a0:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     2a2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     2a4:	422a      	tst	r2, r5
     2a6:	d0fc      	beq.n	2a2 <spi_rw+0x6e>
     2a8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     2aa:	422a      	tst	r2, r5
     2ac:	d0fc      	beq.n	2a8 <spi_rw+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     2ae:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     2b0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     2b2:	420a      	tst	r2, r1
     2b4:	d0fc      	beq.n	2b0 <spi_rw+0x7c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     2b6:	464a      	mov	r2, r9
     2b8:	7992      	ldrb	r2, [r2, #6]
     2ba:	4694      	mov	ip, r2
     2bc:	e006      	b.n	2cc <spi_rw+0x98>
     2be:	4660      	mov	r0, ip
     2c0:	2801      	cmp	r0, #1
     2c2:	d00d      	beq.n	2e0 <spi_rw+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     2c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
     2c6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     2c8:	2a00      	cmp	r2, #0
     2ca:	d00d      	beq.n	2e8 <spi_rw+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     2cc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     2ce:	420a      	tst	r2, r1
     2d0:	d0fc      	beq.n	2cc <spi_rw+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     2d2:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     2d4:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     2d6:	4208      	tst	r0, r1
     2d8:	d0f1      	beq.n	2be <spi_rw+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     2da:	8359      	strh	r1, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     2dc:	321e      	adds	r2, #30
     2de:	e7ee      	b.n	2be <spi_rw+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     2e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
     2e2:	05c0      	lsls	r0, r0, #23
     2e4:	0dc0      	lsrs	r0, r0, #23
     2e6:	e7ef      	b.n	2c8 <spi_rw+0x94>
		*pu8Miso = rxd_data;
     2e8:	7030      	strb	r0, [r6, #0]
		u16Sz--;
     2ea:	3c01      	subs	r4, #1
     2ec:	b2a4      	uxth	r4, r4
			pu8Miso++;
     2ee:	445e      	add	r6, fp
			pu8Mosi++;
     2f0:	4643      	mov	r3, r8
     2f2:	425a      	negs	r2, r3
     2f4:	4153      	adcs	r3, r2
     2f6:	18ff      	adds	r7, r7, r3
	while (u16Sz) {
     2f8:	2c00      	cmp	r4, #0
     2fa:	d1cf      	bne.n	29c <spi_rw+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
     2fc:	4b0e      	ldr	r3, [pc, #56]	; (338 <spi_rw+0x104>)
     2fe:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     300:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     302:	7e0b      	ldrb	r3, [r1, #24]
     304:	4213      	tst	r3, r2
     306:	d0fc      	beq.n	302 <spi_rw+0xce>
	spi_select_slave(&master, &slave_inst, false);
     308:	2200      	movs	r2, #0
     30a:	490a      	ldr	r1, [pc, #40]	; (334 <spi_rw+0x100>)
     30c:	480a      	ldr	r0, [pc, #40]	; (338 <spi_rw+0x104>)
     30e:	4b0b      	ldr	r3, [pc, #44]	; (33c <spi_rw+0x108>)
     310:	4798      	blx	r3
	return M2M_SUCCESS;
     312:	2000      	movs	r0, #0
	else
#endif //CONF_WINC_SPI_DMA
	{
		return spi_rw_pio(pu8Mosi, pu8Miso, u16Sz);
	}
}
     314:	b003      	add	sp, #12
     316:	bc3c      	pop	{r2, r3, r4, r5}
     318:	4690      	mov	r8, r2
     31a:	4699      	mov	r9, r3
     31c:	46a2      	mov	sl, r4
     31e:	46ab      	mov	fp, r5
     320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     322:	200f      	movs	r0, #15
     324:	4240      	negs	r0, r0
     326:	e7f5      	b.n	314 <spi_rw+0xe0>
     328:	200f      	movs	r0, #15
     32a:	4240      	negs	r0, r0
     32c:	e7f2      	b.n	314 <spi_rw+0xe0>
     32e:	200f      	movs	r0, #15
     330:	4240      	negs	r0, r0
		return spi_rw_pio(pu8Mosi, pu8Miso, u16Sz);
     332:	e7ef      	b.n	314 <spi_rw+0xe0>
     334:	20000568 	.word	0x20000568
     338:	2000056c 	.word	0x2000056c
     33c:	00001cb9 	.word	0x00001cb9

00000340 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     340:	b530      	push	{r4, r5, lr}
     342:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
     344:	4c30      	ldr	r4, [pc, #192]	; (408 <nm_bus_init+0xc8>)
     346:	230e      	movs	r3, #14
     348:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     34a:	2300      	movs	r3, #0
     34c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     34e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     350:	a901      	add	r1, sp, #4
     352:	2201      	movs	r2, #1
     354:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     356:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     358:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     35a:	200e      	movs	r0, #14
     35c:	4b2b      	ldr	r3, [pc, #172]	; (40c <nm_bus_init+0xcc>)
     35e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     360:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     362:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     364:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     366:	2900      	cmp	r1, #0
     368:	d104      	bne.n	374 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     36a:	0953      	lsrs	r3, r2, #5
     36c:	01db      	lsls	r3, r3, #7
     36e:	4928      	ldr	r1, [pc, #160]	; (410 <nm_bus_init+0xd0>)
     370:	468c      	mov	ip, r1
     372:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     374:	211f      	movs	r1, #31
     376:	4011      	ands	r1, r2
     378:	2201      	movs	r2, #1
     37a:	0010      	movs	r0, r2
     37c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     37e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     380:	ac02      	add	r4, sp, #8
     382:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     384:	2300      	movs	r3, #0
     386:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     388:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     38a:	21c0      	movs	r1, #192	; 0xc0
     38c:	0389      	lsls	r1, r1, #14
     38e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     390:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     392:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     394:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     396:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     398:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     39a:	3223      	adds	r2, #35	; 0x23
     39c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     39e:	3a18      	subs	r2, #24
     3a0:	2100      	movs	r1, #0
     3a2:	a808      	add	r0, sp, #32
     3a4:	4b1b      	ldr	r3, [pc, #108]	; (414 <nm_bus_init+0xd4>)
     3a6:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     3a8:	4b1b      	ldr	r3, [pc, #108]	; (418 <nm_bus_init+0xd8>)
     3aa:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     3ac:	4b1b      	ldr	r3, [pc, #108]	; (41c <nm_bus_init+0xdc>)
     3ae:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     3b0:	2301      	movs	r3, #1
     3b2:	425b      	negs	r3, r3
     3b4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     3b6:	4b1a      	ldr	r3, [pc, #104]	; (420 <nm_bus_init+0xe0>)
     3b8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     3ba:	4b1a      	ldr	r3, [pc, #104]	; (424 <nm_bus_init+0xe4>)
     3bc:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     3be:	0022      	movs	r2, r4
     3c0:	4919      	ldr	r1, [pc, #100]	; (428 <nm_bus_init+0xe8>)
     3c2:	481a      	ldr	r0, [pc, #104]	; (42c <nm_bus_init+0xec>)
     3c4:	4b1a      	ldr	r3, [pc, #104]	; (430 <nm_bus_init+0xf0>)
     3c6:	4798      	blx	r3
     3c8:	2800      	cmp	r0, #0
     3ca:	d11a      	bne.n	402 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
     3cc:	4d17      	ldr	r5, [pc, #92]	; (42c <nm_bus_init+0xec>)
     3ce:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     3d0:	0020      	movs	r0, r4
     3d2:	4b18      	ldr	r3, [pc, #96]	; (434 <nm_bus_init+0xf4>)
     3d4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3d6:	231f      	movs	r3, #31
     3d8:	4018      	ands	r0, r3
     3da:	3b1e      	subs	r3, #30
     3dc:	4083      	lsls	r3, r0
     3de:	4a16      	ldr	r2, [pc, #88]	; (438 <nm_bus_init+0xf8>)
     3e0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     3e2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     3e4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     3e6:	2b00      	cmp	r3, #0
     3e8:	d1fc      	bne.n	3e4 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     3ea:	6823      	ldr	r3, [r4, #0]
     3ec:	2202      	movs	r2, #2
     3ee:	4313      	orrs	r3, r2
     3f0:	6023      	str	r3, [r4, #0]
		dma_cfg_rx.source_address       = (uint32_t)(&master.hw->SPI.DATA.reg);
		dma_cfg_rx.src_increment_enable = false;
	}
#endif

	nm_bsp_reset();
     3f2:	4b12      	ldr	r3, [pc, #72]	; (43c <nm_bus_init+0xfc>)
     3f4:	4798      	blx	r3
	nm_bsp_sleep(1);
     3f6:	2001      	movs	r0, #1
     3f8:	4b11      	ldr	r3, [pc, #68]	; (440 <nm_bus_init+0x100>)
     3fa:	4798      	blx	r3
#endif
	return result;
     3fc:	2000      	movs	r0, #0
}
     3fe:	b011      	add	sp, #68	; 0x44
     400:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     402:	2006      	movs	r0, #6
     404:	4240      	negs	r0, r0
     406:	e7fa      	b.n	3fe <nm_bus_init+0xbe>
     408:	20000568 	.word	0x20000568
     40c:	00001679 	.word	0x00001679
     410:	41004400 	.word	0x41004400
     414:	0000392b 	.word	0x0000392b
     418:	000c0003 	.word	0x000c0003
     41c:	000d0003 	.word	0x000d0003
     420:	000f0003 	.word	0x000f0003
     424:	00b71b00 	.word	0x00b71b00
     428:	42001800 	.word	0x42001800
     42c:	2000056c 	.word	0x2000056c
     430:	00001ae1 	.word	0x00001ae1
     434:	00001a51 	.word	0x00001a51
     438:	e000e100 	.word	0xe000e100
     43c:	0000020d 	.word	0x0000020d
     440:	000001f5 	.word	0x000001f5

00000444 <nm_bus_ioctl>:
*					Arbitrary parameter depending on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     444:	b510      	push	{r4, lr}
	sint8 s8Ret = 0;
	switch(u8Cmd)
     446:	2803      	cmp	r0, #3
     448:	d106      	bne.n	458 <nm_bus_ioctl+0x14>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     44a:	890a      	ldrh	r2, [r1, #8]
     44c:	684b      	ldr	r3, [r1, #4]
     44e:	6808      	ldr	r0, [r1, #0]
     450:	0019      	movs	r1, r3
     452:	4b09      	ldr	r3, [pc, #36]	; (478 <nm_bus_ioctl+0x34>)
     454:	4798      	blx	r3
			M2M_ERR("invalid ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     456:	bd10      	pop	{r4, pc}
			M2M_ERR("invalid ioclt cmd\n");
     458:	22b8      	movs	r2, #184	; 0xb8
     45a:	0052      	lsls	r2, r2, #1
     45c:	4907      	ldr	r1, [pc, #28]	; (47c <nm_bus_ioctl+0x38>)
     45e:	4808      	ldr	r0, [pc, #32]	; (480 <nm_bus_ioctl+0x3c>)
     460:	4b08      	ldr	r3, [pc, #32]	; (484 <nm_bus_ioctl+0x40>)
     462:	4798      	blx	r3
     464:	4808      	ldr	r0, [pc, #32]	; (488 <nm_bus_ioctl+0x44>)
     466:	4b09      	ldr	r3, [pc, #36]	; (48c <nm_bus_ioctl+0x48>)
     468:	4798      	blx	r3
     46a:	200d      	movs	r0, #13
     46c:	4b08      	ldr	r3, [pc, #32]	; (490 <nm_bus_ioctl+0x4c>)
     46e:	4798      	blx	r3
			s8Ret = -1;
     470:	2001      	movs	r0, #1
     472:	4240      	negs	r0, r0
			break;
     474:	e7ef      	b.n	456 <nm_bus_ioctl+0x12>
     476:	46c0      	nop			; (mov r8, r8)
     478:	00000235 	.word	0x00000235
     47c:	00004a74 	.word	0x00004a74
     480:	00004a84 	.word	0x00004a84
     484:	00003a8d 	.word	0x00003a8d
     488:	00004a98 	.word	0x00004a98
     48c:	00003ba9 	.word	0x00003ba9
     490:	00003ac1 	.word	0x00003ac1

00000494 <m2m_wifi_download_mode>:
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}

sint8 m2m_wifi_download_mode()
{
     494:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
     496:	4b06      	ldr	r3, [pc, #24]	; (4b0 <m2m_wifi_download_mode+0x1c>)
     498:	4798      	blx	r3
     49a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
     49c:	d001      	beq.n	4a2 <m2m_wifi_download_mode+0xe>
	enable_interrupts();
    gu8WifiState = WIFI_STATE_INIT;

_EXIT0:
	return ret;
}
     49e:	0020      	movs	r0, r4
     4a0:	bd10      	pop	{r4, pc}
	enable_interrupts();
     4a2:	4b04      	ldr	r3, [pc, #16]	; (4b4 <m2m_wifi_download_mode+0x20>)
     4a4:	4798      	blx	r3
    gu8WifiState = WIFI_STATE_INIT;
     4a6:	2201      	movs	r2, #1
     4a8:	4b03      	ldr	r3, [pc, #12]	; (4b8 <m2m_wifi_download_mode+0x24>)
     4aa:	701a      	strb	r2, [r3, #0]
     4ac:	e7f7      	b.n	49e <m2m_wifi_download_mode+0xa>
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	00000889 	.word	0x00000889
     4b4:	000004bd 	.word	0x000004bd
     4b8:	20000090 	.word	0x20000090

000004bc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
     4bc:	b500      	push	{lr}
     4be:	b083      	sub	sp, #12
	uint32 reg = 0;
     4c0:	2300      	movs	r3, #0
     4c2:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
     4c4:	a901      	add	r1, sp, #4
     4c6:	4811      	ldr	r0, [pc, #68]	; (50c <enable_interrupts+0x50>)
     4c8:	4b11      	ldr	r3, [pc, #68]	; (510 <enable_interrupts+0x54>)
     4ca:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     4cc:	2800      	cmp	r0, #0
     4ce:	d001      	beq.n	4d4 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
     4d0:	b003      	add	sp, #12
     4d2:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
     4d4:	2180      	movs	r1, #128	; 0x80
     4d6:	0049      	lsls	r1, r1, #1
     4d8:	9b01      	ldr	r3, [sp, #4]
     4da:	4319      	orrs	r1, r3
     4dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
     4de:	480b      	ldr	r0, [pc, #44]	; (50c <enable_interrupts+0x50>)
     4e0:	4b0c      	ldr	r3, [pc, #48]	; (514 <enable_interrupts+0x58>)
     4e2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     4e4:	2800      	cmp	r0, #0
     4e6:	d1f3      	bne.n	4d0 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
     4e8:	a901      	add	r1, sp, #4
     4ea:	20d0      	movs	r0, #208	; 0xd0
     4ec:	0140      	lsls	r0, r0, #5
     4ee:	4b08      	ldr	r3, [pc, #32]	; (510 <enable_interrupts+0x54>)
     4f0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     4f2:	2800      	cmp	r0, #0
     4f4:	d1ec      	bne.n	4d0 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
     4f6:	2180      	movs	r1, #128	; 0x80
     4f8:	0249      	lsls	r1, r1, #9
     4fa:	9b01      	ldr	r3, [sp, #4]
     4fc:	4319      	orrs	r1, r3
     4fe:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
     500:	20d0      	movs	r0, #208	; 0xd0
     502:	0140      	lsls	r0, r0, #5
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <enable_interrupts+0x58>)
     506:	4798      	blx	r3
     508:	e7e2      	b.n	4d0 <enable_interrupts+0x14>
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	00001408 	.word	0x00001408
     510:	000007a1 	.word	0x000007a1
     514:	000007ad 	.word	0x000007ad

00000518 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
     518:	b510      	push	{r4, lr}
     51a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
     51c:	4b28      	ldr	r3, [pc, #160]	; (5c0 <nmi_get_chipid+0xa8>)
     51e:	681c      	ldr	r4, [r3, #0]
     520:	2c00      	cmp	r4, #0
     522:	d004      	beq.n	52e <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
     524:	4b26      	ldr	r3, [pc, #152]	; (5c0 <nmi_get_chipid+0xa8>)
     526:	681c      	ldr	r4, [r3, #0]
}
     528:	0020      	movs	r0, r4
     52a:	b002      	add	sp, #8
     52c:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
     52e:	0019      	movs	r1, r3
     530:	2080      	movs	r0, #128	; 0x80
     532:	0140      	lsls	r0, r0, #5
     534:	4b23      	ldr	r3, [pc, #140]	; (5c4 <nmi_get_chipid+0xac>)
     536:	4798      	blx	r3
     538:	2800      	cmp	r0, #0
     53a:	d003      	beq.n	544 <nmi_get_chipid+0x2c>
			chipid = 0;
     53c:	2200      	movs	r2, #0
     53e:	4b20      	ldr	r3, [pc, #128]	; (5c0 <nmi_get_chipid+0xa8>)
     540:	601a      	str	r2, [r3, #0]
			return 0;
     542:	e7f1      	b.n	528 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
     544:	a901      	add	r1, sp, #4
     546:	4820      	ldr	r0, [pc, #128]	; (5c8 <nmi_get_chipid+0xb0>)
     548:	4b1e      	ldr	r3, [pc, #120]	; (5c4 <nmi_get_chipid+0xac>)
     54a:	4798      	blx	r3
     54c:	2800      	cmp	r0, #0
     54e:	d003      	beq.n	558 <nmi_get_chipid+0x40>
			chipid = 0;
     550:	2200      	movs	r2, #0
     552:	4b1b      	ldr	r3, [pc, #108]	; (5c0 <nmi_get_chipid+0xa8>)
     554:	601a      	str	r2, [r3, #0]
			return 0;
     556:	e7e7      	b.n	528 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
     558:	4b19      	ldr	r3, [pc, #100]	; (5c0 <nmi_get_chipid+0xa8>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	4a1b      	ldr	r2, [pc, #108]	; (5cc <nmi_get_chipid+0xb4>)
     55e:	4293      	cmp	r3, r2
     560:	d00e      	beq.n	580 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
     562:	4a1b      	ldr	r2, [pc, #108]	; (5d0 <nmi_get_chipid+0xb8>)
     564:	4293      	cmp	r3, r2
     566:	d012      	beq.n	58e <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
     568:	4a1a      	ldr	r2, [pc, #104]	; (5d4 <nmi_get_chipid+0xbc>)
     56a:	4293      	cmp	r3, r2
     56c:	d01c      	beq.n	5a8 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
     56e:	4914      	ldr	r1, [pc, #80]	; (5c0 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
     570:	4a19      	ldr	r2, [pc, #100]	; (5d8 <nmi_get_chipid+0xc0>)
     572:	680b      	ldr	r3, [r1, #0]
     574:	401a      	ands	r2, r3
		chipid |= 0x050000;
     576:	23a0      	movs	r3, #160	; 0xa0
     578:	02db      	lsls	r3, r3, #11
     57a:	4313      	orrs	r3, r2
     57c:	600b      	str	r3, [r1, #0]
     57e:	e7d1      	b.n	524 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
     580:	9b01      	ldr	r3, [sp, #4]
     582:	2b01      	cmp	r3, #1
     584:	d0f3      	beq.n	56e <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
     586:	4a15      	ldr	r2, [pc, #84]	; (5dc <nmi_get_chipid+0xc4>)
     588:	4b0d      	ldr	r3, [pc, #52]	; (5c0 <nmi_get_chipid+0xa8>)
     58a:	601a      	str	r2, [r3, #0]
     58c:	e7ef      	b.n	56e <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
     58e:	9b01      	ldr	r3, [sp, #4]
     590:	2b03      	cmp	r3, #3
     592:	d0ec      	beq.n	56e <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
     594:	2b04      	cmp	r3, #4
     596:	d003      	beq.n	5a0 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
     598:	4a11      	ldr	r2, [pc, #68]	; (5e0 <nmi_get_chipid+0xc8>)
     59a:	4b09      	ldr	r3, [pc, #36]	; (5c0 <nmi_get_chipid+0xa8>)
     59c:	601a      	str	r2, [r3, #0]
     59e:	e7e6      	b.n	56e <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
     5a0:	4a10      	ldr	r2, [pc, #64]	; (5e4 <nmi_get_chipid+0xcc>)
     5a2:	4b07      	ldr	r3, [pc, #28]	; (5c0 <nmi_get_chipid+0xa8>)
     5a4:	601a      	str	r2, [r3, #0]
     5a6:	e7e2      	b.n	56e <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
     5a8:	4905      	ldr	r1, [pc, #20]	; (5c0 <nmi_get_chipid+0xa8>)
     5aa:	20ec      	movs	r0, #236	; 0xec
     5ac:	0380      	lsls	r0, r0, #14
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <nmi_get_chipid+0xac>)
     5b0:	4798      	blx	r3
     5b2:	2800      	cmp	r0, #0
     5b4:	d0db      	beq.n	56e <nmi_get_chipid+0x56>
			chipid = 0;
     5b6:	2200      	movs	r2, #0
     5b8:	4b01      	ldr	r3, [pc, #4]	; (5c0 <nmi_get_chipid+0xa8>)
     5ba:	601a      	str	r2, [r3, #0]
			return 0;
     5bc:	e7b4      	b.n	528 <nmi_get_chipid+0x10>
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	20000094 	.word	0x20000094
     5c4:	000007a1 	.word	0x000007a1
     5c8:	000013f4 	.word	0x000013f4
     5cc:	001002a0 	.word	0x001002a0
     5d0:	001002b0 	.word	0x001002b0
     5d4:	001000f0 	.word	0x001000f0
     5d8:	fff0ffff 	.word	0xfff0ffff
     5dc:	001002a1 	.word	0x001002a1
     5e0:	001002b2 	.word	0x001002b2
     5e4:	001002b1 	.word	0x001002b1

000005e8 <chip_wake>:

ERR1:
	return ret;
}
sint8 chip_wake(void)
{
     5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ea:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
     5ec:	2300      	movs	r3, #0
     5ee:	9301      	str	r3, [sp, #4]
     5f0:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
     5f2:	a901      	add	r1, sp, #4
     5f4:	200b      	movs	r0, #11
     5f6:	4b28      	ldr	r3, [pc, #160]	; (698 <chip_wake+0xb0>)
     5f8:	4798      	blx	r3
     5fa:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
     5fc:	d130      	bne.n	660 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
     5fe:	9901      	ldr	r1, [sp, #4]
     600:	07cb      	lsls	r3, r1, #31
     602:	d406      	bmi.n	612 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
     604:	2301      	movs	r3, #1
     606:	4319      	orrs	r1, r3
     608:	200b      	movs	r0, #11
     60a:	4b24      	ldr	r3, [pc, #144]	; (69c <chip_wake+0xb4>)
     60c:	4798      	blx	r3
     60e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
     610:	d126      	bne.n	660 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
     612:	a901      	add	r1, sp, #4
     614:	2001      	movs	r0, #1
     616:	4b20      	ldr	r3, [pc, #128]	; (698 <chip_wake+0xb0>)
     618:	4798      	blx	r3
     61a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
     61c:	d120      	bne.n	660 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
     61e:	9901      	ldr	r1, [sp, #4]
     620:	078b      	lsls	r3, r1, #30
     622:	d520      	bpl.n	666 <chip_wake+0x7e>
{
     624:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
     626:	4f1c      	ldr	r7, [pc, #112]	; (698 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
     628:	4e1d      	ldr	r6, [pc, #116]	; (6a0 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
     62a:	4669      	mov	r1, sp
     62c:	200f      	movs	r0, #15
     62e:	47b8      	blx	r7
     630:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
     632:	d120      	bne.n	676 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
     634:	9b00      	ldr	r3, [sp, #0]
     636:	075b      	lsls	r3, r3, #29
     638:	d42b      	bmi.n	692 <chip_wake+0xaa>
		nm_bsp_sleep(2);
     63a:	2002      	movs	r0, #2
     63c:	47b0      	blx	r6
     63e:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
     640:	2d00      	cmp	r5, #0
     642:	d1f2      	bne.n	62a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wake up the chip\n");
     644:	225c      	movs	r2, #92	; 0x5c
     646:	32ff      	adds	r2, #255	; 0xff
     648:	4916      	ldr	r1, [pc, #88]	; (6a4 <chip_wake+0xbc>)
     64a:	4817      	ldr	r0, [pc, #92]	; (6a8 <chip_wake+0xc0>)
     64c:	4b17      	ldr	r3, [pc, #92]	; (6ac <chip_wake+0xc4>)
     64e:	4798      	blx	r3
     650:	4817      	ldr	r0, [pc, #92]	; (6b0 <chip_wake+0xc8>)
     652:	4b18      	ldr	r3, [pc, #96]	; (6b4 <chip_wake+0xcc>)
     654:	4798      	blx	r3
     656:	200d      	movs	r0, #13
     658:	4b17      	ldr	r3, [pc, #92]	; (6b8 <chip_wake+0xd0>)
     65a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
     65c:	2404      	movs	r4, #4
     65e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
     660:	0020      	movs	r0, r4
     662:	b003      	add	sp, #12
     664:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
     666:	2302      	movs	r3, #2
     668:	4319      	orrs	r1, r3
     66a:	2001      	movs	r0, #1
     66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <chip_wake+0xb4>)
     66e:	4798      	blx	r3
     670:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
     672:	d0d7      	beq.n	624 <chip_wake+0x3c>
     674:	e7f4      	b.n	660 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
     676:	2252      	movs	r2, #82	; 0x52
     678:	32ff      	adds	r2, #255	; 0xff
     67a:	490a      	ldr	r1, [pc, #40]	; (6a4 <chip_wake+0xbc>)
     67c:	480a      	ldr	r0, [pc, #40]	; (6a8 <chip_wake+0xc0>)
     67e:	4d0b      	ldr	r5, [pc, #44]	; (6ac <chip_wake+0xc4>)
     680:	47a8      	blx	r5
     682:	9a00      	ldr	r2, [sp, #0]
     684:	0021      	movs	r1, r4
     686:	480d      	ldr	r0, [pc, #52]	; (6bc <chip_wake+0xd4>)
     688:	47a8      	blx	r5
     68a:	200d      	movs	r0, #13
     68c:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <chip_wake+0xd0>)
     68e:	4798      	blx	r3
			goto _WAKE_EXIT;
     690:	e7e6      	b.n	660 <chip_wake+0x78>
	nm_bus_reset();
     692:	4b0b      	ldr	r3, [pc, #44]	; (6c0 <chip_wake+0xd8>)
     694:	4798      	blx	r3
     696:	e7e3      	b.n	660 <chip_wake+0x78>
     698:	000007a1 	.word	0x000007a1
     69c:	000007ad 	.word	0x000007ad
     6a0:	000001f5 	.word	0x000001f5
     6a4:	00004aac 	.word	0x00004aac
     6a8:	00004a84 	.word	0x00004a84
     6ac:	00003a8d 	.word	0x00003a8d
     6b0:	00004ad0 	.word	0x00004ad0
     6b4:	00003ba9 	.word	0x00003ba9
     6b8:	00003ac1 	.word	0x00003ac1
     6bc:	00004ab8 	.word	0x00004ab8
     6c0:	00000789 	.word	0x00000789

000006c4 <cpu_halt>:
sint8 cpu_halt(void)
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	b082      	sub	sp, #8
	sint8 ret;
	uint32 reg = 0;
     6c8:	2300      	movs	r3, #0
     6ca:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(0x1118, &reg);
     6cc:	4e15      	ldr	r6, [pc, #84]	; (724 <cpu_halt+0x60>)
     6ce:	a901      	add	r1, sp, #4
     6d0:	0030      	movs	r0, r6
     6d2:	4d15      	ldr	r5, [pc, #84]	; (728 <cpu_halt+0x64>)
     6d4:	47a8      	blx	r5
     6d6:	0004      	movs	r4, r0
	reg |= (1 << 0);
     6d8:	2101      	movs	r1, #1
     6da:	9b01      	ldr	r3, [sp, #4]
     6dc:	4319      	orrs	r1, r3
     6de:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(0x1118, reg);
     6e0:	0030      	movs	r0, r6
     6e2:	4b12      	ldr	r3, [pc, #72]	; (72c <cpu_halt+0x68>)
     6e4:	4798      	blx	r3
     6e6:	1904      	adds	r4, r0, r4
     6e8:	b2e4      	uxtb	r4, r4
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
     6ea:	a901      	add	r1, sp, #4
     6ec:	20a0      	movs	r0, #160	; 0xa0
     6ee:	0140      	lsls	r0, r0, #5
     6f0:	47a8      	blx	r5
     6f2:	1824      	adds	r4, r4, r0
     6f4:	b2e4      	uxtb	r4, r4
	if ((reg & (1ul << 10)) == (1ul << 10)) {
     6f6:	9901      	ldr	r1, [sp, #4]
     6f8:	054b      	lsls	r3, r1, #21
     6fa:	d402      	bmi.n	702 <cpu_halt+0x3e>
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
     6fc:	b260      	sxtb	r0, r4
		reg &= ~(1ul << 10);
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
		ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	}
	return ret;
}
     6fe:	b002      	add	sp, #8
     700:	bd70      	pop	{r4, r5, r6, pc}
		reg &= ~(1ul << 10);
     702:	4b0b      	ldr	r3, [pc, #44]	; (730 <cpu_halt+0x6c>)
     704:	4019      	ands	r1, r3
     706:	9101      	str	r1, [sp, #4]
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
     708:	26a0      	movs	r6, #160	; 0xa0
     70a:	0176      	lsls	r6, r6, #5
     70c:	0030      	movs	r0, r6
     70e:	4b07      	ldr	r3, [pc, #28]	; (72c <cpu_halt+0x68>)
     710:	4798      	blx	r3
     712:	0005      	movs	r5, r0
		ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
     714:	a901      	add	r1, sp, #4
     716:	0030      	movs	r0, r6
     718:	4b03      	ldr	r3, [pc, #12]	; (728 <cpu_halt+0x64>)
     71a:	4798      	blx	r3
     71c:	1828      	adds	r0, r5, r0
     71e:	1820      	adds	r0, r4, r0
     720:	b240      	sxtb	r0, r0
     722:	e7ec      	b.n	6fe <cpu_halt+0x3a>
     724:	00001118 	.word	0x00001118
     728:	000007a1 	.word	0x000007a1
     72c:	000007ad 	.word	0x000007ad
     730:	fffffbff 	.word	0xfffffbff

00000734 <chip_reset>:
	if(ret != M2M_SUCCESS) goto ERR1;	
ERR1:
	return ret;
}
sint8 chip_reset(void)
{
     734:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
     736:	2100      	movs	r1, #0
     738:	20a0      	movs	r0, #160	; 0xa0
     73a:	0140      	lsls	r0, r0, #5
     73c:	4b03      	ldr	r3, [pc, #12]	; (74c <chip_reset+0x18>)
     73e:	4798      	blx	r3
     740:	0004      	movs	r4, r0
	nm_bsp_sleep(50);
     742:	2032      	movs	r0, #50	; 0x32
     744:	4b02      	ldr	r3, [pc, #8]	; (750 <chip_reset+0x1c>)
     746:	4798      	blx	r3
	return ret;
}
     748:	0020      	movs	r0, r4
     74a:	bd10      	pop	{r4, pc}
     74c:	000007ad 	.word	0x000007ad
     750:	000001f5 	.word	0x000001f5

00000754 <chip_reset_and_cpu_halt>:
{
     754:	b510      	push	{r4, lr}
	ret = chip_wake();
     756:	4b06      	ldr	r3, [pc, #24]	; (770 <chip_reset_and_cpu_halt+0x1c>)
     758:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto ERR1;
     75a:	2800      	cmp	r0, #0
     75c:	d000      	beq.n	760 <chip_reset_and_cpu_halt+0xc>
}
     75e:	bd10      	pop	{r4, pc}
	ret = chip_reset();
     760:	4b04      	ldr	r3, [pc, #16]	; (774 <chip_reset_and_cpu_halt+0x20>)
     762:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto ERR1;
     764:	2800      	cmp	r0, #0
     766:	d1fa      	bne.n	75e <chip_reset_and_cpu_halt+0xa>
	ret = cpu_halt();
     768:	4b03      	ldr	r3, [pc, #12]	; (778 <chip_reset_and_cpu_halt+0x24>)
     76a:	4798      	blx	r3
     76c:	e7f7      	b.n	75e <chip_reset_and_cpu_halt+0xa>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000005e9 	.word	0x000005e9
     774:	00000735 	.word	0x00000735
     778:	000006c5 	.word	0x000006c5

0000077c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
     77c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
     77e:	4b01      	ldr	r3, [pc, #4]	; (784 <nm_bus_iface_init+0x8>)
     780:	4798      	blx	r3
	return ret;
}
     782:	bd10      	pop	{r4, pc}
     784:	00000341 	.word	0x00000341

00000788 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
     788:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
     78a:	4b01      	ldr	r3, [pc, #4]	; (790 <nm_bus_reset+0x8>)
     78c:	4798      	blx	r3
#else
#error "Please define bus usage"
#endif

	return ret;
}
     78e:	bd10      	pop	{r4, pc}
     790:	00000f65 	.word	0x00000f65

00000794 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
     794:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
     796:	4b01      	ldr	r3, [pc, #4]	; (79c <nm_read_reg+0x8>)
     798:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
     79a:	bd10      	pop	{r4, pc}
     79c:	00000f8d 	.word	0x00000f8d

000007a0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
     7a0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
     7a2:	4b01      	ldr	r3, [pc, #4]	; (7a8 <nm_read_reg_with_ret+0x8>)
     7a4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
     7a6:	bd10      	pop	{r4, pc}
     7a8:	00000fa1 	.word	0x00000fa1

000007ac <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
     7ac:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
     7ae:	4b01      	ldr	r3, [pc, #4]	; (7b4 <nm_write_reg+0x8>)
     7b0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
     7b2:	bd10      	pop	{r4, pc}
     7b4:	00000fb9 	.word	0x00000fb9

000007b8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
     7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ba:	46d6      	mov	lr, sl
     7bc:	464f      	mov	r7, r9
     7be:	4646      	mov	r6, r8
     7c0:	b5c0      	push	{r6, r7, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	4680      	mov	r8, r0
     7c6:	4689      	mov	r9, r1
     7c8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
     7ca:	4b13      	ldr	r3, [pc, #76]	; (818 <nm_read_block+0x60>)
     7cc:	881f      	ldrh	r7, [r3, #0]
     7ce:	3f08      	subs	r7, #8
     7d0:	b2bb      	uxth	r3, r7
     7d2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
     7d4:	001e      	movs	r6, r3
     7d6:	0004      	movs	r4, r0
     7d8:	429a      	cmp	r2, r3
     7da:	d91a      	bls.n	812 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     7dc:	4b0f      	ldr	r3, [pc, #60]	; (81c <nm_read_block+0x64>)
     7de:	469a      	mov	sl, r3
     7e0:	1a37      	subs	r7, r6, r0
     7e2:	4643      	mov	r3, r8
     7e4:	1ae1      	subs	r1, r4, r3
     7e6:	4449      	add	r1, r9
     7e8:	9a01      	ldr	r2, [sp, #4]
     7ea:	0020      	movs	r0, r4
     7ec:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
     7ee:	2800      	cmp	r0, #0
     7f0:	d109      	bne.n	806 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
     7f2:	1bad      	subs	r5, r5, r6
     7f4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
     7f6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
     7f8:	42b5      	cmp	r5, r6
     7fa:	d8f2      	bhi.n	7e2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     7fc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
     7fe:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     800:	0020      	movs	r0, r4
     802:	4b06      	ldr	r3, [pc, #24]	; (81c <nm_read_block+0x64>)
     804:	4798      	blx	r3
		}
	}

	return s8Ret;
}
     806:	b002      	add	sp, #8
     808:	bc1c      	pop	{r2, r3, r4}
     80a:	4690      	mov	r8, r2
     80c:	4699      	mov	r9, r3
     80e:	46a2      	mov	sl, r4
     810:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
     812:	2100      	movs	r1, #0
     814:	e7f2      	b.n	7fc <nm_read_block+0x44>
     816:	46c0      	nop			; (mov r8, r8)
     818:	20000008 	.word	0x20000008
     81c:	000010f9 	.word	0x000010f9

00000820 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
     820:	b5f0      	push	{r4, r5, r6, r7, lr}
     822:	46d6      	mov	lr, sl
     824:	464f      	mov	r7, r9
     826:	4646      	mov	r6, r8
     828:	b5c0      	push	{r6, r7, lr}
     82a:	b082      	sub	sp, #8
     82c:	4680      	mov	r8, r0
     82e:	4689      	mov	r9, r1
     830:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
     832:	4b13      	ldr	r3, [pc, #76]	; (880 <nm_write_block+0x60>)
     834:	881f      	ldrh	r7, [r3, #0]
     836:	3f08      	subs	r7, #8
     838:	b2bb      	uxth	r3, r7
     83a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
     83c:	001e      	movs	r6, r3
     83e:	0004      	movs	r4, r0
     840:	429a      	cmp	r2, r3
     842:	d91a      	bls.n	87a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     844:	4b0f      	ldr	r3, [pc, #60]	; (884 <nm_write_block+0x64>)
     846:	469a      	mov	sl, r3
     848:	1a37      	subs	r7, r6, r0
     84a:	4643      	mov	r3, r8
     84c:	1ae1      	subs	r1, r4, r3
     84e:	4449      	add	r1, r9
     850:	9a01      	ldr	r2, [sp, #4]
     852:	0020      	movs	r0, r4
     854:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
     856:	2800      	cmp	r0, #0
     858:	d109      	bne.n	86e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
     85a:	1bad      	subs	r5, r5, r6
     85c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
     85e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
     860:	42b5      	cmp	r5, r6
     862:	d8f2      	bhi.n	84a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     864:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
     866:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     868:	0020      	movs	r0, r4
     86a:	4b06      	ldr	r3, [pc, #24]	; (884 <nm_write_block+0x64>)
     86c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
     86e:	b002      	add	sp, #8
     870:	bc1c      	pop	{r2, r3, r4}
     872:	4690      	mov	r8, r2
     874:	4699      	mov	r9, r3
     876:	46a2      	mov	sl, r4
     878:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
     87a:	2100      	movs	r1, #0
     87c:	e7f2      	b.n	864 <nm_write_block+0x44>
     87e:	46c0      	nop			; (mov r8, r8)
     880:	20000008 	.word	0x20000008
     884:	00001255 	.word	0x00001255

00000888 <nm_drv_init_download_mode>:
*	@author	Viswanathan Murugesan
*	@date	10 Oct 2014
*	@version	1.0
*/
sint8 nm_drv_init_download_mode(void)
{
     888:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;

	ret = nm_bus_iface_init(NULL);
     88a:	2000      	movs	r0, #0
     88c:	4b14      	ldr	r3, [pc, #80]	; (8e0 <nm_drv_init_download_mode+0x58>)
     88e:	4798      	blx	r3
     890:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
     892:	d119      	bne.n	8c8 <nm_drv_init_download_mode+0x40>
	}

	/**
		TODO:reset the chip and halt the cpu in case of no wait efuse is set (add the no wait effuse check)
	*/
	if(!ISNMC3000(GET_CHIPID()))
     894:	4b13      	ldr	r3, [pc, #76]	; (8e4 <nm_drv_init_download_mode+0x5c>)
     896:	4798      	blx	r3
     898:	0d00      	lsrs	r0, r0, #20
     89a:	2803      	cmp	r0, #3
     89c:	d001      	beq.n	8a2 <nm_drv_init_download_mode+0x1a>
	{
		/*Execute that function only for 1500A/B, no room in 3000, but it may be needed in 3400 no wait*/
		chip_reset_and_cpu_halt();
     89e:	4b12      	ldr	r3, [pc, #72]	; (8e8 <nm_drv_init_download_mode+0x60>)
     8a0:	4798      	blx	r3
	}

#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
     8a2:	4b12      	ldr	r3, [pc, #72]	; (8ec <nm_drv_init_download_mode+0x64>)
     8a4:	4798      	blx	r3
#endif

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
     8a6:	4812      	ldr	r0, [pc, #72]	; (8f0 <nm_drv_init_download_mode+0x68>)
     8a8:	4d12      	ldr	r5, [pc, #72]	; (8f4 <nm_drv_init_download_mode+0x6c>)
     8aa:	47a8      	blx	r5
     8ac:	4b0d      	ldr	r3, [pc, #52]	; (8e4 <nm_drv_init_download_mode+0x5c>)
     8ae:	4798      	blx	r3
     8b0:	0001      	movs	r1, r0
     8b2:	4811      	ldr	r0, [pc, #68]	; (8f8 <nm_drv_init_download_mode+0x70>)
     8b4:	47a8      	blx	r5
     8b6:	200d      	movs	r0, #13
     8b8:	4b10      	ldr	r3, [pc, #64]	; (8fc <nm_drv_init_download_mode+0x74>)
     8ba:	4798      	blx	r3

	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
		nm_write_reg(0x20300,0);
     8bc:	2100      	movs	r1, #0
     8be:	4810      	ldr	r0, [pc, #64]	; (900 <nm_drv_init_download_mode+0x78>)
     8c0:	4b10      	ldr	r3, [pc, #64]	; (904 <nm_drv_init_download_mode+0x7c>)
     8c2:	4798      	blx	r3

ERR1:
	return ret;
}
     8c4:	0020      	movs	r0, r4
     8c6:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi start]: fail init bus\n");
     8c8:	22eb      	movs	r2, #235	; 0xeb
     8ca:	490f      	ldr	r1, [pc, #60]	; (908 <nm_drv_init_download_mode+0x80>)
     8cc:	480f      	ldr	r0, [pc, #60]	; (90c <nm_drv_init_download_mode+0x84>)
     8ce:	4b09      	ldr	r3, [pc, #36]	; (8f4 <nm_drv_init_download_mode+0x6c>)
     8d0:	4798      	blx	r3
     8d2:	480f      	ldr	r0, [pc, #60]	; (910 <nm_drv_init_download_mode+0x88>)
     8d4:	4b0f      	ldr	r3, [pc, #60]	; (914 <nm_drv_init_download_mode+0x8c>)
     8d6:	4798      	blx	r3
     8d8:	200d      	movs	r0, #13
     8da:	4b08      	ldr	r3, [pc, #32]	; (8fc <nm_drv_init_download_mode+0x74>)
     8dc:	4798      	blx	r3
		goto ERR1;
     8de:	e7f1      	b.n	8c4 <nm_drv_init_download_mode+0x3c>
     8e0:	0000077d 	.word	0x0000077d
     8e4:	00000519 	.word	0x00000519
     8e8:	00000755 	.word	0x00000755
     8ec:	00000fd1 	.word	0x00000fd1
     8f0:	00004b24 	.word	0x00004b24
     8f4:	00003a8d 	.word	0x00003a8d
     8f8:	00004b30 	.word	0x00004b30
     8fc:	00003ac1 	.word	0x00003ac1
     900:	00020300 	.word	0x00020300
     904:	000007ad 	.word	0x000007ad
     908:	00004aec 	.word	0x00004aec
     90c:	00004a84 	.word	0x00004a84
     910:	00004b08 	.word	0x00004b08
     914:	00003ba9 	.word	0x00003ba9

00000918 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
     918:	b500      	push	{lr}
     91a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
     91c:	ab01      	add	r3, sp, #4
     91e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
     920:	2200      	movs	r2, #0
     922:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
     924:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
     926:	0019      	movs	r1, r3
     928:	2003      	movs	r0, #3
     92a:	4b02      	ldr	r3, [pc, #8]	; (934 <nmi_spi_write+0x1c>)
     92c:	4798      	blx	r3
}
     92e:	b005      	add	sp, #20
     930:	bd00      	pop	{pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	00000445 	.word	0x00000445

00000938 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
     938:	b570      	push	{r4, r5, r6, lr}
     93a:	b084      	sub	sp, #16
     93c:	ac08      	add	r4, sp, #32
     93e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
     940:	ac01      	add	r4, sp, #4
     942:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
     944:	303f      	adds	r0, #63	; 0x3f
     946:	b2c4      	uxtb	r4, r0
     948:	2c0e      	cmp	r4, #14
     94a:	d900      	bls.n	94e <spi_cmd+0x16>
     94c:	e084      	b.n	a58 <spi_cmd+0x120>
     94e:	00a0      	lsls	r0, r4, #2
     950:	4c4f      	ldr	r4, [pc, #316]	; (a90 <spi_cmd+0x158>)
     952:	5820      	ldr	r0, [r4, r0]
     954:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
     956:	ab01      	add	r3, sp, #4
     958:	0c0a      	lsrs	r2, r1, #16
     95a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
     95c:	0a0a      	lsrs	r2, r1, #8
     95e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
     960:	70d9      	strb	r1, [r3, #3]
		len = 5;
     962:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
     964:	4b4b      	ldr	r3, [pc, #300]	; (a94 <spi_cmd+0x15c>)
     966:	781b      	ldrb	r3, [r3, #0]
     968:	2b00      	cmp	r3, #0
     96a:	d077      	beq.n	a5c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
     96c:	3901      	subs	r1, #1
     96e:	b2c9      	uxtb	r1, r1
     970:	e083      	b.n	a7a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
     972:	0a0b      	lsrs	r3, r1, #8
     974:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
     976:	2d00      	cmp	r5, #0
     978:	d107      	bne.n	98a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
     97a:	aa01      	add	r2, sp, #4
     97c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
     97e:	ab01      	add	r3, sp, #4
     980:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
     982:	2200      	movs	r2, #0
     984:	70da      	strb	r2, [r3, #3]
		len = 5;
     986:	2105      	movs	r1, #5
		break;
     988:	e7ec      	b.n	964 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
     98a:	2280      	movs	r2, #128	; 0x80
     98c:	4252      	negs	r2, r2
     98e:	4313      	orrs	r3, r2
     990:	aa01      	add	r2, sp, #4
     992:	7053      	strb	r3, [r2, #1]
     994:	e7f3      	b.n	97e <spi_cmd+0x46>
		bc[1] = 0x00;
     996:	ab01      	add	r3, sp, #4
     998:	2200      	movs	r2, #0
     99a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
     99c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
     99e:	70da      	strb	r2, [r3, #3]
		len = 5;
     9a0:	2105      	movs	r1, #5
		break;
     9a2:	e7df      	b.n	964 <spi_cmd+0x2c>
		bc[1] = 0x00;
     9a4:	ab01      	add	r3, sp, #4
     9a6:	2200      	movs	r2, #0
     9a8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
     9aa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
     9ac:	70da      	strb	r2, [r3, #3]
		len = 5;
     9ae:	2105      	movs	r1, #5
		break;
     9b0:	e7d8      	b.n	964 <spi_cmd+0x2c>
		bc[1] = 0xff;
     9b2:	ab01      	add	r3, sp, #4
     9b4:	22ff      	movs	r2, #255	; 0xff
     9b6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
     9b8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
     9ba:	70da      	strb	r2, [r3, #3]
		len = 5;
     9bc:	2105      	movs	r1, #5
		break;
     9be:	e7d1      	b.n	964 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
     9c0:	aa01      	add	r2, sp, #4
     9c2:	0c08      	lsrs	r0, r1, #16
     9c4:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
     9c6:	0a08      	lsrs	r0, r1, #8
     9c8:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
     9ca:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
     9cc:	0a19      	lsrs	r1, r3, #8
     9ce:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
     9d0:	7153      	strb	r3, [r2, #5]
		len = 7;
     9d2:	2107      	movs	r1, #7
		break;
     9d4:	e7c6      	b.n	964 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
     9d6:	aa01      	add	r2, sp, #4
     9d8:	0c08      	lsrs	r0, r1, #16
     9da:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
     9dc:	0a08      	lsrs	r0, r1, #8
     9de:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
     9e0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
     9e2:	0c19      	lsrs	r1, r3, #16
     9e4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
     9e6:	0a19      	lsrs	r1, r3, #8
     9e8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
     9ea:	7193      	strb	r3, [r2, #6]
		len = 8;
     9ec:	2108      	movs	r1, #8
		break;
     9ee:	e7b9      	b.n	964 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
     9f0:	0a0b      	lsrs	r3, r1, #8
     9f2:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
     9f4:	2d00      	cmp	r5, #0
     9f6:	d10c      	bne.n	a12 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
     9f8:	a801      	add	r0, sp, #4
     9fa:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
     9fc:	ab01      	add	r3, sp, #4
     9fe:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
     a00:	0e11      	lsrs	r1, r2, #24
     a02:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
     a04:	0c11      	lsrs	r1, r2, #16
     a06:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
     a08:	0a11      	lsrs	r1, r2, #8
     a0a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
     a0c:	719a      	strb	r2, [r3, #6]
		len = 8;
     a0e:	2108      	movs	r1, #8
		break;
     a10:	e7a8      	b.n	964 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
     a12:	2080      	movs	r0, #128	; 0x80
     a14:	4240      	negs	r0, r0
     a16:	4303      	orrs	r3, r0
     a18:	a801      	add	r0, sp, #4
     a1a:	7043      	strb	r3, [r0, #1]
     a1c:	e7ee      	b.n	9fc <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
     a1e:	ab01      	add	r3, sp, #4
     a20:	0c08      	lsrs	r0, r1, #16
     a22:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
     a24:	0a08      	lsrs	r0, r1, #8
     a26:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
     a28:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
     a2a:	0e11      	lsrs	r1, r2, #24
     a2c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
     a2e:	0c11      	lsrs	r1, r2, #16
     a30:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
     a32:	0a11      	lsrs	r1, r2, #8
     a34:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
     a36:	71da      	strb	r2, [r3, #7]
		len = 9;
     a38:	2109      	movs	r1, #9
		break;
     a3a:	e793      	b.n	964 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
     a3c:	2290      	movs	r2, #144	; 0x90
     a3e:	0052      	lsls	r2, r2, #1
     a40:	4915      	ldr	r1, [pc, #84]	; (a98 <spi_cmd+0x160>)
     a42:	4816      	ldr	r0, [pc, #88]	; (a9c <spi_cmd+0x164>)
     a44:	4b16      	ldr	r3, [pc, #88]	; (aa0 <spi_cmd+0x168>)
     a46:	4798      	blx	r3
     a48:	4816      	ldr	r0, [pc, #88]	; (aa4 <spi_cmd+0x16c>)
     a4a:	4b17      	ldr	r3, [pc, #92]	; (aa8 <spi_cmd+0x170>)
     a4c:	4798      	blx	r3
     a4e:	200d      	movs	r0, #13
     a50:	4b16      	ldr	r3, [pc, #88]	; (aac <spi_cmd+0x174>)
     a52:	4798      	blx	r3
			result = N_FAIL;
     a54:	2300      	movs	r3, #0
     a56:	e017      	b.n	a88 <spi_cmd+0x150>
	switch (cmd) {
     a58:	2300      	movs	r3, #0
     a5a:	e015      	b.n	a88 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
     a5c:	1e4e      	subs	r6, r1, #1
     a5e:	aa01      	add	r2, sp, #4
     a60:	1995      	adds	r5, r2, r6
     a62:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
     a64:	4c12      	ldr	r4, [pc, #72]	; (ab0 <spi_cmd+0x178>)
     a66:	005b      	lsls	r3, r3, #1
     a68:	7810      	ldrb	r0, [r2, #0]
     a6a:	4043      	eors	r3, r0
     a6c:	5ce3      	ldrb	r3, [r4, r3]
     a6e:	3201      	adds	r2, #1
	while (len--)
     a70:	42aa      	cmp	r2, r5
     a72:	d1f8      	bne.n	a66 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
     a74:	005b      	lsls	r3, r3, #1
     a76:	aa01      	add	r2, sp, #4
     a78:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
     a7a:	b289      	uxth	r1, r1
     a7c:	a801      	add	r0, sp, #4
     a7e:	4b0d      	ldr	r3, [pc, #52]	; (ab4 <spi_cmd+0x17c>)
     a80:	4798      	blx	r3
     a82:	2301      	movs	r3, #1
     a84:	2800      	cmp	r0, #0
     a86:	d1d9      	bne.n	a3c <spi_cmd+0x104>
		}
	}

	return result;
}
     a88:	0018      	movs	r0, r3
     a8a:	b004      	add	sp, #16
     a8c:	bd70      	pop	{r4, r5, r6, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	00004b40 	.word	0x00004b40
     a94:	20000098 	.word	0x20000098
     a98:	00004b80 	.word	0x00004b80
     a9c:	00004a84 	.word	0x00004a84
     aa0:	00003a8d 	.word	0x00003a8d
     aa4:	00005010 	.word	0x00005010
     aa8:	00003ba9 	.word	0x00003ba9
     aac:	00003ac1 	.word	0x00003ac1
     ab0:	00004c0c 	.word	0x00004c0c
     ab4:	00000919 	.word	0x00000919

00000ab8 <nmi_spi_read>:
{
     ab8:	b500      	push	{lr}
     aba:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
     abc:	ab01      	add	r3, sp, #4
     abe:	2200      	movs	r2, #0
     ac0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
     ac2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
     ac4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
     ac6:	0019      	movs	r1, r3
     ac8:	2003      	movs	r0, #3
     aca:	4b02      	ldr	r3, [pc, #8]	; (ad4 <nmi_spi_read+0x1c>)
     acc:	4798      	blx	r3
}
     ace:	b005      	add	sp, #20
     ad0:	bd00      	pop	{pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	00000445 	.word	0x00000445

00000ad8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ada:	46c6      	mov	lr, r8
     adc:	b500      	push	{lr}
     ade:	b082      	sub	sp, #8
     ae0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
     ae2:	28cf      	cmp	r0, #207	; 0xcf
     ae4:	d02b      	beq.n	b3e <spi_cmd_rsp+0x66>
     ae6:	0003      	movs	r3, r0
     ae8:	333b      	adds	r3, #59	; 0x3b
     aea:	b2db      	uxtb	r3, r3
     aec:	2b01      	cmp	r3, #1
     aee:	d926      	bls.n	b3e <spi_cmd_rsp+0x66>
{
     af0:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     af2:	466b      	mov	r3, sp
     af4:	1dde      	adds	r6, r3, #7
     af6:	4b26      	ldr	r3, [pc, #152]	; (b90 <spi_cmd_rsp+0xb8>)
     af8:	4698      	mov	r8, r3
     afa:	2101      	movs	r1, #1
     afc:	0030      	movs	r0, r6
     afe:	47c0      	blx	r8
     b00:	1e05      	subs	r5, r0, #0
     b02:	d125      	bne.n	b50 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
     b04:	7833      	ldrb	r3, [r6, #0]
     b06:	42bb      	cmp	r3, r7
     b08:	d030      	beq.n	b6c <spi_cmd_rsp+0x94>
     b0a:	3c01      	subs	r4, #1
     b0c:	b2e4      	uxtb	r4, r4
     b0e:	2c00      	cmp	r4, #0
     b10:	d1f3      	bne.n	afa <spi_cmd_rsp+0x22>
     b12:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     b14:	466b      	mov	r3, sp
     b16:	1dde      	adds	r6, r3, #7
     b18:	4f1d      	ldr	r7, [pc, #116]	; (b90 <spi_cmd_rsp+0xb8>)
     b1a:	2101      	movs	r1, #1
     b1c:	0030      	movs	r0, r6
     b1e:	47b8      	blx	r7
     b20:	2800      	cmp	r0, #0
     b22:	d125      	bne.n	b70 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
     b24:	7833      	ldrb	r3, [r6, #0]
     b26:	2b00      	cmp	r3, #0
     b28:	d02f      	beq.n	b8a <spi_cmd_rsp+0xb2>
     b2a:	3c01      	subs	r4, #1
     b2c:	b2e4      	uxtb	r4, r4
     b2e:	2c00      	cmp	r4, #0
     b30:	d1f3      	bne.n	b1a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
     b32:	2501      	movs	r5, #1

_fail_:

	return result;
}
     b34:	0028      	movs	r0, r5
     b36:	b002      	add	sp, #8
     b38:	bc04      	pop	{r2}
     b3a:	4690      	mov	r8, r2
     b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     b3e:	2101      	movs	r1, #1
     b40:	466b      	mov	r3, sp
     b42:	1dd8      	adds	r0, r3, #7
     b44:	4b12      	ldr	r3, [pc, #72]	; (b90 <spi_cmd_rsp+0xb8>)
     b46:	4798      	blx	r3
			result = N_FAIL;
     b48:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     b4a:	2800      	cmp	r0, #0
     b4c:	d0d0      	beq.n	af0 <spi_cmd_rsp+0x18>
     b4e:	e7f1      	b.n	b34 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
     b50:	225c      	movs	r2, #92	; 0x5c
     b52:	32ff      	adds	r2, #255	; 0xff
     b54:	490f      	ldr	r1, [pc, #60]	; (b94 <spi_cmd_rsp+0xbc>)
     b56:	4810      	ldr	r0, [pc, #64]	; (b98 <spi_cmd_rsp+0xc0>)
     b58:	4b10      	ldr	r3, [pc, #64]	; (b9c <spi_cmd_rsp+0xc4>)
     b5a:	4798      	blx	r3
     b5c:	4810      	ldr	r0, [pc, #64]	; (ba0 <spi_cmd_rsp+0xc8>)
     b5e:	4b11      	ldr	r3, [pc, #68]	; (ba4 <spi_cmd_rsp+0xcc>)
     b60:	4798      	blx	r3
     b62:	200d      	movs	r0, #13
     b64:	4b10      	ldr	r3, [pc, #64]	; (ba8 <spi_cmd_rsp+0xd0>)
     b66:	4798      	blx	r3
			result = N_FAIL;
     b68:	2500      	movs	r5, #0
			goto _fail_;
     b6a:	e7e3      	b.n	b34 <spi_cmd_rsp+0x5c>
     b6c:	240b      	movs	r4, #11
     b6e:	e7d1      	b.n	b14 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
     b70:	226a      	movs	r2, #106	; 0x6a
     b72:	32ff      	adds	r2, #255	; 0xff
     b74:	4907      	ldr	r1, [pc, #28]	; (b94 <spi_cmd_rsp+0xbc>)
     b76:	4808      	ldr	r0, [pc, #32]	; (b98 <spi_cmd_rsp+0xc0>)
     b78:	4b08      	ldr	r3, [pc, #32]	; (b9c <spi_cmd_rsp+0xc4>)
     b7a:	4798      	blx	r3
     b7c:	4808      	ldr	r0, [pc, #32]	; (ba0 <spi_cmd_rsp+0xc8>)
     b7e:	4b09      	ldr	r3, [pc, #36]	; (ba4 <spi_cmd_rsp+0xcc>)
     b80:	4798      	blx	r3
     b82:	200d      	movs	r0, #13
     b84:	4b08      	ldr	r3, [pc, #32]	; (ba8 <spi_cmd_rsp+0xd0>)
     b86:	4798      	blx	r3
			goto _fail_;
     b88:	e7d4      	b.n	b34 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
     b8a:	2501      	movs	r5, #1
     b8c:	e7d2      	b.n	b34 <spi_cmd_rsp+0x5c>
     b8e:	46c0      	nop			; (mov r8, r8)
     b90:	00000ab9 	.word	0x00000ab9
     b94:	00004b98 	.word	0x00004b98
     b98:	00004a84 	.word	0x00004a84
     b9c:	00003a8d 	.word	0x00003a8d
     ba0:	0000503c 	.word	0x0000503c
     ba4:	00003ba9 	.word	0x00003ba9
     ba8:	00003ac1 	.word	0x00003ac1

00000bac <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	46de      	mov	lr, fp
     bb0:	4657      	mov	r7, sl
     bb2:	464e      	mov	r6, r9
     bb4:	4645      	mov	r5, r8
     bb6:	b5e0      	push	{r5, r6, r7, lr}
     bb8:	b087      	sub	sp, #28
     bba:	9001      	str	r0, [sp, #4]
     bbc:	4689      	mov	r9, r1
     bbe:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
     bc0:	2300      	movs	r3, #0
     bc2:	469a      	mov	sl, r3
     bc4:	2380      	movs	r3, #128	; 0x80
     bc6:	019b      	lsls	r3, r3, #6
     bc8:	469b      	mov	fp, r3
     bca:	466a      	mov	r2, sp
     bcc:	81d3      	strh	r3, [r2, #14]
		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     bce:	4b3c      	ldr	r3, [pc, #240]	; (cc0 <spi_data_read+0x114>)
     bd0:	4698      	mov	r8, r3
     bd2:	e02f      	b.n	c34 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
     bd4:	22be      	movs	r2, #190	; 0xbe
     bd6:	0092      	lsls	r2, r2, #2
     bd8:	493a      	ldr	r1, [pc, #232]	; (cc4 <spi_data_read+0x118>)
     bda:	483b      	ldr	r0, [pc, #236]	; (cc8 <spi_data_read+0x11c>)
     bdc:	4b3b      	ldr	r3, [pc, #236]	; (ccc <spi_data_read+0x120>)
     bde:	4798      	blx	r3
     be0:	483b      	ldr	r0, [pc, #236]	; (cd0 <spi_data_read+0x124>)
     be2:	4b3c      	ldr	r3, [pc, #240]	; (cd4 <spi_data_read+0x128>)
     be4:	4798      	blx	r3
     be6:	200d      	movs	r0, #13
     be8:	4b3b      	ldr	r3, [pc, #236]	; (cd8 <spi_data_read+0x12c>)
     bea:	4798      	blx	r3
     bec:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
     bee:	0028      	movs	r0, r5
     bf0:	b007      	add	sp, #28
     bf2:	bc3c      	pop	{r2, r3, r4, r5}
     bf4:	4690      	mov	r8, r2
     bf6:	4699      	mov	r9, r3
     bf8:	46a2      	mov	sl, r4
     bfa:	46ab      	mov	fp, r5
     bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
     bfe:	2c00      	cmp	r4, #0
     c00:	dd2e      	ble.n	c60 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
     c02:	9b01      	ldr	r3, [sp, #4]
     c04:	4453      	add	r3, sl
     c06:	0018      	movs	r0, r3
     c08:	0039      	movs	r1, r7
     c0a:	4b2d      	ldr	r3, [pc, #180]	; (cc0 <spi_data_read+0x114>)
     c0c:	4798      	blx	r3
     c0e:	1e04      	subs	r4, r0, #0
     c10:	d134      	bne.n	c7c <spi_data_read+0xd0>
		if(!clockless)
     c12:	9b02      	ldr	r3, [sp, #8]
     c14:	2b00      	cmp	r3, #0
     c16:	d103      	bne.n	c20 <spi_data_read+0x74>
			if (!gu8Crc_off) {
     c18:	4b30      	ldr	r3, [pc, #192]	; (cdc <spi_data_read+0x130>)
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d039      	beq.n	c94 <spi_data_read+0xe8>
		ix += nbytes;
     c20:	4653      	mov	r3, sl
     c22:	18fb      	adds	r3, r7, r3
     c24:	b21b      	sxth	r3, r3
     c26:	469a      	mov	sl, r3
		sz -= nbytes;
     c28:	464b      	mov	r3, r9
     c2a:	1bdf      	subs	r7, r3, r7
     c2c:	b2bb      	uxth	r3, r7
     c2e:	4699      	mov	r9, r3
	} while (sz);
     c30:	2b00      	cmp	r3, #0
     c32:	d043      	beq.n	cbc <spi_data_read+0x110>
     c34:	464f      	mov	r7, r9
     c36:	45d9      	cmp	r9, fp
     c38:	d901      	bls.n	c3e <spi_data_read+0x92>
     c3a:	466b      	mov	r3, sp
     c3c:	89df      	ldrh	r7, [r3, #14]
     c3e:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
     c40:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     c42:	ab04      	add	r3, sp, #16
     c44:	1cde      	adds	r6, r3, #3
     c46:	2101      	movs	r1, #1
     c48:	0030      	movs	r0, r6
     c4a:	47c0      	blx	r8
     c4c:	1e05      	subs	r5, r0, #0
     c4e:	d1c1      	bne.n	bd4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
     c50:	7833      	ldrb	r3, [r6, #0]
     c52:	091b      	lsrs	r3, r3, #4
     c54:	2b0f      	cmp	r3, #15
     c56:	d0d2      	beq.n	bfe <spi_data_read+0x52>
     c58:	3c01      	subs	r4, #1
     c5a:	b224      	sxth	r4, r4
		} while (retry--);
     c5c:	1c63      	adds	r3, r4, #1
     c5e:	d1f2      	bne.n	c46 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
     c60:	22c1      	movs	r2, #193	; 0xc1
     c62:	0092      	lsls	r2, r2, #2
     c64:	4917      	ldr	r1, [pc, #92]	; (cc4 <spi_data_read+0x118>)
     c66:	4818      	ldr	r0, [pc, #96]	; (cc8 <spi_data_read+0x11c>)
     c68:	4c18      	ldr	r4, [pc, #96]	; (ccc <spi_data_read+0x120>)
     c6a:	47a0      	blx	r4
     c6c:	ab04      	add	r3, sp, #16
     c6e:	78d9      	ldrb	r1, [r3, #3]
     c70:	481b      	ldr	r0, [pc, #108]	; (ce0 <spi_data_read+0x134>)
     c72:	47a0      	blx	r4
     c74:	200d      	movs	r0, #13
     c76:	4b18      	ldr	r3, [pc, #96]	; (cd8 <spi_data_read+0x12c>)
     c78:	4798      	blx	r3
			break;
     c7a:	e7b8      	b.n	bee <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
     c7c:	4a19      	ldr	r2, [pc, #100]	; (ce4 <spi_data_read+0x138>)
     c7e:	4911      	ldr	r1, [pc, #68]	; (cc4 <spi_data_read+0x118>)
     c80:	4811      	ldr	r0, [pc, #68]	; (cc8 <spi_data_read+0x11c>)
     c82:	4b12      	ldr	r3, [pc, #72]	; (ccc <spi_data_read+0x120>)
     c84:	4798      	blx	r3
     c86:	4818      	ldr	r0, [pc, #96]	; (ce8 <spi_data_read+0x13c>)
     c88:	4b12      	ldr	r3, [pc, #72]	; (cd4 <spi_data_read+0x128>)
     c8a:	4798      	blx	r3
     c8c:	200d      	movs	r0, #13
     c8e:	4b12      	ldr	r3, [pc, #72]	; (cd8 <spi_data_read+0x12c>)
     c90:	4798      	blx	r3
			break;
     c92:	e7ac      	b.n	bee <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
     c94:	2102      	movs	r1, #2
     c96:	a805      	add	r0, sp, #20
     c98:	4b09      	ldr	r3, [pc, #36]	; (cc0 <spi_data_read+0x114>)
     c9a:	4798      	blx	r3
     c9c:	2800      	cmp	r0, #0
     c9e:	d0bf      	beq.n	c20 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
     ca0:	22c6      	movs	r2, #198	; 0xc6
     ca2:	0092      	lsls	r2, r2, #2
     ca4:	4907      	ldr	r1, [pc, #28]	; (cc4 <spi_data_read+0x118>)
     ca6:	4808      	ldr	r0, [pc, #32]	; (cc8 <spi_data_read+0x11c>)
     ca8:	4b08      	ldr	r3, [pc, #32]	; (ccc <spi_data_read+0x120>)
     caa:	4798      	blx	r3
     cac:	480f      	ldr	r0, [pc, #60]	; (cec <spi_data_read+0x140>)
     cae:	4b09      	ldr	r3, [pc, #36]	; (cd4 <spi_data_read+0x128>)
     cb0:	4798      	blx	r3
     cb2:	200d      	movs	r0, #13
     cb4:	4b08      	ldr	r3, [pc, #32]	; (cd8 <spi_data_read+0x12c>)
     cb6:	4798      	blx	r3
					result = N_FAIL;
     cb8:	0025      	movs	r5, r4
					break;
     cba:	e798      	b.n	bee <spi_data_read+0x42>
     cbc:	2501      	movs	r5, #1
     cbe:	e796      	b.n	bee <spi_data_read+0x42>
     cc0:	00000ab9 	.word	0x00000ab9
     cc4:	00004ba4 	.word	0x00004ba4
     cc8:	00004a84 	.word	0x00004a84
     ccc:	00003a8d 	.word	0x00003a8d
     cd0:	00005070 	.word	0x00005070
     cd4:	00003ba9 	.word	0x00003ba9
     cd8:	00003ac1 	.word	0x00003ac1
     cdc:	20000098 	.word	0x20000098
     ce0:	000050a4 	.word	0x000050a4
     ce4:	0000030d 	.word	0x0000030d
     ce8:	000050d4 	.word	0x000050d4
     cec:	00005104 	.word	0x00005104

00000cf0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
     cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf2:	46d6      	mov	lr, sl
     cf4:	464f      	mov	r7, r9
     cf6:	4646      	mov	r6, r8
     cf8:	b5c0      	push	{r6, r7, lr}
     cfa:	b086      	sub	sp, #24
     cfc:	9003      	str	r0, [sp, #12]
     cfe:	9104      	str	r1, [sp, #16]
     d00:	2830      	cmp	r0, #48	; 0x30
     d02:	d80f      	bhi.n	d24 <spi_write_reg+0x34>
     d04:	4b30      	ldr	r3, [pc, #192]	; (dc8 <spi_write_reg+0xd8>)
     d06:	781f      	ldrb	r7, [r3, #0]
     d08:	b2fb      	uxtb	r3, r7
     d0a:	9305      	str	r3, [sp, #20]
     d0c:	2300      	movs	r3, #0
     d0e:	2230      	movs	r2, #48	; 0x30
     d10:	9903      	ldr	r1, [sp, #12]
     d12:	428a      	cmp	r2, r1
     d14:	415b      	adcs	r3, r3
     d16:	b2db      	uxtb	r3, r3
     d18:	469a      	mov	sl, r3
     d1a:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
     d1c:	4b2b      	ldr	r3, [pc, #172]	; (dcc <spi_write_reg+0xdc>)
     d1e:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
     d20:	46d1      	mov	r9, sl
     d22:	e033      	b.n	d8c <spi_write_reg+0x9c>
     d24:	4b2a      	ldr	r3, [pc, #168]	; (dd0 <spi_write_reg+0xe0>)
     d26:	781f      	ldrb	r7, [r3, #0]
     d28:	e7ee      	b.n	d08 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
     d2a:	9805      	ldr	r0, [sp, #20]
     d2c:	4b29      	ldr	r3, [pc, #164]	; (dd4 <spi_write_reg+0xe4>)
     d2e:	4798      	blx	r3
     d30:	0004      	movs	r4, r0
	if (result != N_OK) {
     d32:	2801      	cmp	r0, #1
     d34:	d041      	beq.n	dba <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
     d36:	4a28      	ldr	r2, [pc, #160]	; (dd8 <spi_write_reg+0xe8>)
     d38:	4928      	ldr	r1, [pc, #160]	; (ddc <spi_write_reg+0xec>)
     d3a:	4829      	ldr	r0, [pc, #164]	; (de0 <spi_write_reg+0xf0>)
     d3c:	4e29      	ldr	r6, [pc, #164]	; (de4 <spi_write_reg+0xf4>)
     d3e:	47b0      	blx	r6
     d40:	9903      	ldr	r1, [sp, #12]
     d42:	4829      	ldr	r0, [pc, #164]	; (de8 <spi_write_reg+0xf8>)
     d44:	47b0      	blx	r6
     d46:	200d      	movs	r0, #13
     d48:	4b28      	ldr	r3, [pc, #160]	; (dec <spi_write_reg+0xfc>)
     d4a:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
     d4c:	2001      	movs	r0, #1
     d4e:	4e28      	ldr	r6, [pc, #160]	; (df0 <spi_write_reg+0x100>)
     d50:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
     d52:	2300      	movs	r3, #0
     d54:	9300      	str	r3, [sp, #0]
     d56:	2200      	movs	r2, #0
     d58:	2100      	movs	r1, #0
     d5a:	20cf      	movs	r0, #207	; 0xcf
     d5c:	4f1b      	ldr	r7, [pc, #108]	; (dcc <spi_write_reg+0xdc>)
     d5e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
     d60:	20cf      	movs	r0, #207	; 0xcf
     d62:	4b1c      	ldr	r3, [pc, #112]	; (dd4 <spi_write_reg+0xe4>)
     d64:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
     d66:	22ea      	movs	r2, #234	; 0xea
     d68:	0092      	lsls	r2, r2, #2
     d6a:	491c      	ldr	r1, [pc, #112]	; (ddc <spi_write_reg+0xec>)
     d6c:	481c      	ldr	r0, [pc, #112]	; (de0 <spi_write_reg+0xf0>)
     d6e:	4f1d      	ldr	r7, [pc, #116]	; (de4 <spi_write_reg+0xf4>)
     d70:	47b8      	blx	r7
     d72:	9b04      	ldr	r3, [sp, #16]
     d74:	9a03      	ldr	r2, [sp, #12]
     d76:	0029      	movs	r1, r5
     d78:	481e      	ldr	r0, [pc, #120]	; (df4 <spi_write_reg+0x104>)
     d7a:	47b8      	blx	r7
     d7c:	200d      	movs	r0, #13
     d7e:	4b1b      	ldr	r3, [pc, #108]	; (dec <spi_write_reg+0xfc>)
     d80:	4798      	blx	r3
		nm_bsp_sleep(1);
     d82:	2001      	movs	r0, #1
     d84:	47b0      	blx	r6
     d86:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
     d88:	2d00      	cmp	r5, #0
     d8a:	d016      	beq.n	dba <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
     d8c:	464b      	mov	r3, r9
     d8e:	9300      	str	r3, [sp, #0]
     d90:	2304      	movs	r3, #4
     d92:	9a04      	ldr	r2, [sp, #16]
     d94:	9f03      	ldr	r7, [sp, #12]
     d96:	0039      	movs	r1, r7
     d98:	9805      	ldr	r0, [sp, #20]
     d9a:	47c0      	blx	r8
     d9c:	0004      	movs	r4, r0
	if (result != N_OK) {
     d9e:	2801      	cmp	r0, #1
     da0:	d0c3      	beq.n	d2a <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
     da2:	4a15      	ldr	r2, [pc, #84]	; (df8 <spi_write_reg+0x108>)
     da4:	490d      	ldr	r1, [pc, #52]	; (ddc <spi_write_reg+0xec>)
     da6:	480e      	ldr	r0, [pc, #56]	; (de0 <spi_write_reg+0xf0>)
     da8:	4e0e      	ldr	r6, [pc, #56]	; (de4 <spi_write_reg+0xf4>)
     daa:	47b0      	blx	r6
     dac:	0039      	movs	r1, r7
     dae:	4813      	ldr	r0, [pc, #76]	; (dfc <spi_write_reg+0x10c>)
     db0:	47b0      	blx	r6
     db2:	200d      	movs	r0, #13
     db4:	4b0d      	ldr	r3, [pc, #52]	; (dec <spi_write_reg+0xfc>)
     db6:	4798      	blx	r3
		goto _FAIL_;
     db8:	e7c8      	b.n	d4c <spi_write_reg+0x5c>
	}

	return result;
}
     dba:	0020      	movs	r0, r4
     dbc:	b006      	add	sp, #24
     dbe:	bc1c      	pop	{r2, r3, r4}
     dc0:	4690      	mov	r8, r2
     dc2:	4699      	mov	r9, r3
     dc4:	46a2      	mov	sl, r4
     dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc8:	00004b7c 	.word	0x00004b7c
     dcc:	00000939 	.word	0x00000939
     dd0:	00004b7d 	.word	0x00004b7d
     dd4:	00000ad9 	.word	0x00000ad9
     dd8:	00000395 	.word	0x00000395
     ddc:	00004bc4 	.word	0x00004bc4
     de0:	00004a84 	.word	0x00004a84
     de4:	00003a8d 	.word	0x00003a8d
     de8:	000051fc 	.word	0x000051fc
     dec:	00003ac1 	.word	0x00003ac1
     df0:	000001f5 	.word	0x000001f5
     df4:	00005234 	.word	0x00005234
     df8:	0000038f 	.word	0x0000038f
     dfc:	000051d0 	.word	0x000051d0

00000e00 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
     e02:	46de      	mov	lr, fp
     e04:	4657      	mov	r7, sl
     e06:	464e      	mov	r6, r9
     e08:	4645      	mov	r5, r8
     e0a:	b5e0      	push	{r5, r6, r7, lr}
     e0c:	b087      	sub	sp, #28
     e0e:	9002      	str	r0, [sp, #8]
     e10:	468b      	mov	fp, r1
     e12:	28ff      	cmp	r0, #255	; 0xff
     e14:	d80f      	bhi.n	e36 <spi_read_reg+0x36>
     e16:	4b41      	ldr	r3, [pc, #260]	; (f1c <spi_read_reg+0x11c>)
     e18:	781f      	ldrb	r7, [r3, #0]
     e1a:	b2fb      	uxtb	r3, r7
     e1c:	9303      	str	r3, [sp, #12]
     e1e:	2300      	movs	r3, #0
     e20:	22ff      	movs	r2, #255	; 0xff
     e22:	9902      	ldr	r1, [sp, #8]
     e24:	428a      	cmp	r2, r1
     e26:	415b      	adcs	r3, r3
     e28:	b2db      	uxtb	r3, r3
     e2a:	469a      	mov	sl, r3
     e2c:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
     e2e:	4b3c      	ldr	r3, [pc, #240]	; (f20 <spi_read_reg+0x120>)
     e30:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
     e32:	46d1      	mov	r9, sl
     e34:	e031      	b.n	e9a <spi_read_reg+0x9a>
     e36:	4b3b      	ldr	r3, [pc, #236]	; (f24 <spi_read_reg+0x124>)
     e38:	781f      	ldrb	r7, [r3, #0]
     e3a:	e7ee      	b.n	e1a <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
     e3c:	9803      	ldr	r0, [sp, #12]
     e3e:	4b3a      	ldr	r3, [pc, #232]	; (f28 <spi_read_reg+0x128>)
     e40:	4798      	blx	r3
     e42:	0004      	movs	r4, r0
	if (result != N_OK) {
     e44:	2801      	cmp	r0, #1
     e46:	d040      	beq.n	eca <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
     e48:	4a38      	ldr	r2, [pc, #224]	; (f2c <spi_read_reg+0x12c>)
     e4a:	4939      	ldr	r1, [pc, #228]	; (f30 <spi_read_reg+0x130>)
     e4c:	4839      	ldr	r0, [pc, #228]	; (f34 <spi_read_reg+0x134>)
     e4e:	4e3a      	ldr	r6, [pc, #232]	; (f38 <spi_read_reg+0x138>)
     e50:	47b0      	blx	r6
     e52:	9902      	ldr	r1, [sp, #8]
     e54:	4839      	ldr	r0, [pc, #228]	; (f3c <spi_read_reg+0x13c>)
     e56:	47b0      	blx	r6
     e58:	200d      	movs	r0, #13
     e5a:	4b39      	ldr	r3, [pc, #228]	; (f40 <spi_read_reg+0x140>)
     e5c:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
     e5e:	2001      	movs	r0, #1
     e60:	4e38      	ldr	r6, [pc, #224]	; (f44 <spi_read_reg+0x144>)
     e62:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
     e64:	2300      	movs	r3, #0
     e66:	9300      	str	r3, [sp, #0]
     e68:	2200      	movs	r2, #0
     e6a:	2100      	movs	r1, #0
     e6c:	20cf      	movs	r0, #207	; 0xcf
     e6e:	4f2c      	ldr	r7, [pc, #176]	; (f20 <spi_read_reg+0x120>)
     e70:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
     e72:	20cf      	movs	r0, #207	; 0xcf
     e74:	4b2c      	ldr	r3, [pc, #176]	; (f28 <spi_read_reg+0x128>)
     e76:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
     e78:	4a33      	ldr	r2, [pc, #204]	; (f48 <spi_read_reg+0x148>)
     e7a:	492d      	ldr	r1, [pc, #180]	; (f30 <spi_read_reg+0x130>)
     e7c:	482d      	ldr	r0, [pc, #180]	; (f34 <spi_read_reg+0x134>)
     e7e:	4f2e      	ldr	r7, [pc, #184]	; (f38 <spi_read_reg+0x138>)
     e80:	47b8      	blx	r7
     e82:	9a02      	ldr	r2, [sp, #8]
     e84:	0029      	movs	r1, r5
     e86:	4831      	ldr	r0, [pc, #196]	; (f4c <spi_read_reg+0x14c>)
     e88:	47b8      	blx	r7
     e8a:	200d      	movs	r0, #13
     e8c:	4b2c      	ldr	r3, [pc, #176]	; (f40 <spi_read_reg+0x140>)
     e8e:	4798      	blx	r3
		nm_bsp_sleep(1);
     e90:	2001      	movs	r0, #1
     e92:	47b0      	blx	r6
     e94:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
     e96:	2d00      	cmp	r5, #0
     e98:	d038      	beq.n	f0c <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
     e9a:	464b      	mov	r3, r9
     e9c:	9300      	str	r3, [sp, #0]
     e9e:	2304      	movs	r3, #4
     ea0:	2200      	movs	r2, #0
     ea2:	9f02      	ldr	r7, [sp, #8]
     ea4:	0039      	movs	r1, r7
     ea6:	9803      	ldr	r0, [sp, #12]
     ea8:	47c0      	blx	r8
     eaa:	0004      	movs	r4, r0
	if (result != N_OK) {
     eac:	2801      	cmp	r0, #1
     eae:	d0c5      	beq.n	e3c <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
     eb0:	2282      	movs	r2, #130	; 0x82
     eb2:	00d2      	lsls	r2, r2, #3
     eb4:	491e      	ldr	r1, [pc, #120]	; (f30 <spi_read_reg+0x130>)
     eb6:	481f      	ldr	r0, [pc, #124]	; (f34 <spi_read_reg+0x134>)
     eb8:	4e1f      	ldr	r6, [pc, #124]	; (f38 <spi_read_reg+0x138>)
     eba:	47b0      	blx	r6
     ebc:	0039      	movs	r1, r7
     ebe:	4824      	ldr	r0, [pc, #144]	; (f50 <spi_read_reg+0x150>)
     ec0:	47b0      	blx	r6
     ec2:	200d      	movs	r0, #13
     ec4:	4b1e      	ldr	r3, [pc, #120]	; (f40 <spi_read_reg+0x140>)
     ec6:	4798      	blx	r3
		goto _FAIL_;
     ec8:	e7c9      	b.n	e5e <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
     eca:	464a      	mov	r2, r9
     ecc:	2104      	movs	r1, #4
     ece:	a805      	add	r0, sp, #20
     ed0:	4b20      	ldr	r3, [pc, #128]	; (f54 <spi_read_reg+0x154>)
     ed2:	4798      	blx	r3
     ed4:	0004      	movs	r4, r0
	if (result != N_OK) {
     ed6:	2801      	cmp	r0, #1
     ed8:	d00b      	beq.n	ef2 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
     eda:	4a1f      	ldr	r2, [pc, #124]	; (f58 <spi_read_reg+0x158>)
     edc:	4914      	ldr	r1, [pc, #80]	; (f30 <spi_read_reg+0x130>)
     ede:	4815      	ldr	r0, [pc, #84]	; (f34 <spi_read_reg+0x134>)
     ee0:	4b15      	ldr	r3, [pc, #84]	; (f38 <spi_read_reg+0x138>)
     ee2:	4798      	blx	r3
     ee4:	481d      	ldr	r0, [pc, #116]	; (f5c <spi_read_reg+0x15c>)
     ee6:	4b1e      	ldr	r3, [pc, #120]	; (f60 <spi_read_reg+0x160>)
     ee8:	4798      	blx	r3
     eea:	200d      	movs	r0, #13
     eec:	4b14      	ldr	r3, [pc, #80]	; (f40 <spi_read_reg+0x140>)
     eee:	4798      	blx	r3
		goto _FAIL_;
     ef0:	e7b5      	b.n	e5e <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
     ef2:	aa05      	add	r2, sp, #20
     ef4:	7853      	ldrb	r3, [r2, #1]
     ef6:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
     ef8:	7891      	ldrb	r1, [r2, #2]
     efa:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
     efc:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
     efe:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
     f00:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
     f02:	78d2      	ldrb	r2, [r2, #3]
     f04:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
     f06:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
     f08:	465a      	mov	r2, fp
     f0a:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
     f0c:	0020      	movs	r0, r4
     f0e:	b007      	add	sp, #28
     f10:	bc3c      	pop	{r2, r3, r4, r5}
     f12:	4690      	mov	r8, r2
     f14:	4699      	mov	r9, r3
     f16:	46a2      	mov	sl, r4
     f18:	46ab      	mov	fp, r5
     f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f1c:	00004b7e 	.word	0x00004b7e
     f20:	00000939 	.word	0x00000939
     f24:	00004b7f 	.word	0x00004b7f
     f28:	00000ad9 	.word	0x00000ad9
     f2c:	00000416 	.word	0x00000416
     f30:	00004be4 	.word	0x00004be4
     f34:	00004a84 	.word	0x00004a84
     f38:	00003a8d 	.word	0x00003a8d
     f3c:	00005164 	.word	0x00005164
     f40:	00003ac1 	.word	0x00003ac1
     f44:	000001f5 	.word	0x000001f5
     f48:	00000435 	.word	0x00000435
     f4c:	000051b8 	.word	0x000051b8
     f50:	00005138 	.word	0x00005138
     f54:	00000bad 	.word	0x00000bad
     f58:	0000041d 	.word	0x0000041d
     f5c:	00005198 	.word	0x00005198
     f60:	00003ba9 	.word	0x00003ba9

00000f64 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
     f64:	b510      	push	{r4, lr}
     f66:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
     f68:	2300      	movs	r3, #0
     f6a:	9300      	str	r3, [sp, #0]
     f6c:	2200      	movs	r2, #0
     f6e:	2100      	movs	r1, #0
     f70:	20cf      	movs	r0, #207	; 0xcf
     f72:	4c04      	ldr	r4, [pc, #16]	; (f84 <nm_spi_reset+0x20>)
     f74:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
     f76:	20cf      	movs	r0, #207	; 0xcf
     f78:	4b03      	ldr	r3, [pc, #12]	; (f88 <nm_spi_reset+0x24>)
     f7a:	4798      	blx	r3
	return M2M_SUCCESS;
}
     f7c:	2000      	movs	r0, #0
     f7e:	b002      	add	sp, #8
     f80:	bd10      	pop	{r4, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	00000939 	.word	0x00000939
     f88:	00000ad9 	.word	0x00000ad9

00000f8c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
     f8c:	b500      	push	{lr}
     f8e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
     f90:	a901      	add	r1, sp, #4
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <nm_spi_read_reg+0x10>)
     f94:	4798      	blx	r3

	return u32Val;
}
     f96:	9801      	ldr	r0, [sp, #4]
     f98:	b003      	add	sp, #12
     f9a:	bd00      	pop	{pc}
     f9c:	00000e01 	.word	0x00000e01

00000fa0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
     fa0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
     fa2:	4b04      	ldr	r3, [pc, #16]	; (fb4 <nm_spi_read_reg_with_ret+0x14>)
     fa4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
     fa6:	2300      	movs	r3, #0
     fa8:	2801      	cmp	r0, #1
     faa:	d101      	bne.n	fb0 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
     fac:	0018      	movs	r0, r3
     fae:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
     fb0:	3b06      	subs	r3, #6
     fb2:	e7fb      	b.n	fac <nm_spi_read_reg_with_ret+0xc>
     fb4:	00000e01 	.word	0x00000e01

00000fb8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
     fb8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
     fba:	4b04      	ldr	r3, [pc, #16]	; (fcc <nm_spi_write_reg+0x14>)
     fbc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
     fbe:	2300      	movs	r3, #0
     fc0:	2801      	cmp	r0, #1
     fc2:	d101      	bne.n	fc8 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
     fc4:	0018      	movs	r0, r3
     fc6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
     fc8:	3b06      	subs	r3, #6
     fca:	e7fb      	b.n	fc4 <nm_spi_write_reg+0xc>
     fcc:	00000cf1 	.word	0x00000cf1

00000fd0 <nm_spi_init>:
{
     fd0:	b510      	push	{r4, lr}
     fd2:	b082      	sub	sp, #8
	uint32 reg = 0;
     fd4:	2300      	movs	r3, #0
     fd6:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
     fd8:	4a35      	ldr	r2, [pc, #212]	; (10b0 <nm_spi_init+0xe0>)
     fda:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
     fdc:	4669      	mov	r1, sp
     fde:	4835      	ldr	r0, [pc, #212]	; (10b4 <nm_spi_init+0xe4>)
     fe0:	4b35      	ldr	r3, [pc, #212]	; (10b8 <nm_spi_init+0xe8>)
     fe2:	4798      	blx	r3
     fe4:	2800      	cmp	r0, #0
     fe6:	d028      	beq.n	103a <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
     fe8:	4b31      	ldr	r3, [pc, #196]	; (10b0 <nm_spi_init+0xe0>)
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	2b00      	cmp	r3, #0
     fee:	d10d      	bne.n	100c <nm_spi_init+0x3c>
		reg &= ~0x70;
     ff0:	337c      	adds	r3, #124	; 0x7c
     ff2:	9900      	ldr	r1, [sp, #0]
     ff4:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
     ff6:	3b2c      	subs	r3, #44	; 0x2c
     ff8:	4319      	orrs	r1, r3
     ffa:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
     ffc:	482d      	ldr	r0, [pc, #180]	; (10b4 <nm_spi_init+0xe4>)
     ffe:	4b2f      	ldr	r3, [pc, #188]	; (10bc <nm_spi_init+0xec>)
    1000:	4798      	blx	r3
    1002:	1e04      	subs	r4, r0, #0
    1004:	d03a      	beq.n	107c <nm_spi_init+0xac>
		gu8Crc_off = 1;
    1006:	2201      	movs	r2, #1
    1008:	4b29      	ldr	r3, [pc, #164]	; (10b0 <nm_spi_init+0xe0>)
    100a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    100c:	a901      	add	r1, sp, #4
    100e:	2080      	movs	r0, #128	; 0x80
    1010:	0140      	lsls	r0, r0, #5
    1012:	4b29      	ldr	r3, [pc, #164]	; (10b8 <nm_spi_init+0xe8>)
    1014:	4798      	blx	r3
    1016:	2800      	cmp	r0, #0
    1018:	d03c      	beq.n	1094 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    101a:	4c26      	ldr	r4, [pc, #152]	; (10b4 <nm_spi_init+0xe4>)
    101c:	0020      	movs	r0, r4
    101e:	4b28      	ldr	r3, [pc, #160]	; (10c0 <nm_spi_init+0xf0>)
    1020:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    1022:	2370      	movs	r3, #112	; 0x70
    1024:	0001      	movs	r1, r0
    1026:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    1028:	2050      	movs	r0, #80	; 0x50
    102a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    102c:	0020      	movs	r0, r4
    102e:	4b25      	ldr	r3, [pc, #148]	; (10c4 <nm_spi_init+0xf4>)
    1030:	4798      	blx	r3
	return M2M_SUCCESS;
    1032:	2400      	movs	r4, #0
}
    1034:	0020      	movs	r0, r4
    1036:	b002      	add	sp, #8
    1038:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    103a:	2201      	movs	r2, #1
    103c:	4b1c      	ldr	r3, [pc, #112]	; (10b0 <nm_spi_init+0xe0>)
    103e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
    1040:	2298      	movs	r2, #152	; 0x98
    1042:	00d2      	lsls	r2, r2, #3
    1044:	4920      	ldr	r1, [pc, #128]	; (10c8 <nm_spi_init+0xf8>)
    1046:	4821      	ldr	r0, [pc, #132]	; (10cc <nm_spi_init+0xfc>)
    1048:	4b21      	ldr	r3, [pc, #132]	; (10d0 <nm_spi_init+0x100>)
    104a:	4798      	blx	r3
    104c:	4821      	ldr	r0, [pc, #132]	; (10d4 <nm_spi_init+0x104>)
    104e:	4b22      	ldr	r3, [pc, #136]	; (10d8 <nm_spi_init+0x108>)
    1050:	4798      	blx	r3
    1052:	200d      	movs	r0, #13
    1054:	4b21      	ldr	r3, [pc, #132]	; (10dc <nm_spi_init+0x10c>)
    1056:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    1058:	4669      	mov	r1, sp
    105a:	4816      	ldr	r0, [pc, #88]	; (10b4 <nm_spi_init+0xe4>)
    105c:	4b16      	ldr	r3, [pc, #88]	; (10b8 <nm_spi_init+0xe8>)
    105e:	4798      	blx	r3
    1060:	1e04      	subs	r4, r0, #0
    1062:	d1c1      	bne.n	fe8 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    1064:	4a1e      	ldr	r2, [pc, #120]	; (10e0 <nm_spi_init+0x110>)
    1066:	4918      	ldr	r1, [pc, #96]	; (10c8 <nm_spi_init+0xf8>)
    1068:	4818      	ldr	r0, [pc, #96]	; (10cc <nm_spi_init+0xfc>)
    106a:	4b19      	ldr	r3, [pc, #100]	; (10d0 <nm_spi_init+0x100>)
    106c:	4798      	blx	r3
    106e:	481d      	ldr	r0, [pc, #116]	; (10e4 <nm_spi_init+0x114>)
    1070:	4b19      	ldr	r3, [pc, #100]	; (10d8 <nm_spi_init+0x108>)
    1072:	4798      	blx	r3
    1074:	200d      	movs	r0, #13
    1076:	4b19      	ldr	r3, [pc, #100]	; (10dc <nm_spi_init+0x10c>)
    1078:	4798      	blx	r3
			return 0;
    107a:	e7db      	b.n	1034 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    107c:	4a1a      	ldr	r2, [pc, #104]	; (10e8 <nm_spi_init+0x118>)
    107e:	4912      	ldr	r1, [pc, #72]	; (10c8 <nm_spi_init+0xf8>)
    1080:	4812      	ldr	r0, [pc, #72]	; (10cc <nm_spi_init+0xfc>)
    1082:	4b13      	ldr	r3, [pc, #76]	; (10d0 <nm_spi_init+0x100>)
    1084:	4798      	blx	r3
    1086:	4819      	ldr	r0, [pc, #100]	; (10ec <nm_spi_init+0x11c>)
    1088:	4b13      	ldr	r3, [pc, #76]	; (10d8 <nm_spi_init+0x108>)
    108a:	4798      	blx	r3
    108c:	200d      	movs	r0, #13
    108e:	4b13      	ldr	r3, [pc, #76]	; (10dc <nm_spi_init+0x10c>)
    1090:	4798      	blx	r3
			return 0;
    1092:	e7cf      	b.n	1034 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    1094:	4a16      	ldr	r2, [pc, #88]	; (10f0 <nm_spi_init+0x120>)
    1096:	490c      	ldr	r1, [pc, #48]	; (10c8 <nm_spi_init+0xf8>)
    1098:	480c      	ldr	r0, [pc, #48]	; (10cc <nm_spi_init+0xfc>)
    109a:	4b0d      	ldr	r3, [pc, #52]	; (10d0 <nm_spi_init+0x100>)
    109c:	4798      	blx	r3
    109e:	4815      	ldr	r0, [pc, #84]	; (10f4 <nm_spi_init+0x124>)
    10a0:	4b0d      	ldr	r3, [pc, #52]	; (10d8 <nm_spi_init+0x108>)
    10a2:	4798      	blx	r3
    10a4:	200d      	movs	r0, #13
    10a6:	4b0d      	ldr	r3, [pc, #52]	; (10dc <nm_spi_init+0x10c>)
    10a8:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    10aa:	2406      	movs	r4, #6
    10ac:	4264      	negs	r4, r4
    10ae:	e7c1      	b.n	1034 <nm_spi_init+0x64>
    10b0:	20000098 	.word	0x20000098
    10b4:	0000e824 	.word	0x0000e824
    10b8:	00000e01 	.word	0x00000e01
    10bc:	00000cf1 	.word	0x00000cf1
    10c0:	00000f8d 	.word	0x00000f8d
    10c4:	00000fb9 	.word	0x00000fb9
    10c8:	00004c00 	.word	0x00004c00
    10cc:	00004a84 	.word	0x00004a84
    10d0:	00003a8d 	.word	0x00003a8d
    10d4:	00004d0c 	.word	0x00004d0c
    10d8:	00003ba9 	.word	0x00003ba9
    10dc:	00003ac1 	.word	0x00003ac1
    10e0:	000004c3 	.word	0x000004c3
    10e4:	00004d5c 	.word	0x00004d5c
    10e8:	000004cd 	.word	0x000004cd
    10ec:	00004d88 	.word	0x00004d88
    10f0:	000004d7 	.word	0x000004d7
    10f4:	00004dbc 	.word	0x00004dbc

000010f8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    10f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fa:	46de      	mov	lr, fp
    10fc:	4657      	mov	r7, sl
    10fe:	464e      	mov	r6, r9
    1100:	4645      	mov	r5, r8
    1102:	b5e0      	push	{r5, r6, r7, lr}
    1104:	b087      	sub	sp, #28
    1106:	9002      	str	r0, [sp, #8]
    1108:	9103      	str	r1, [sp, #12]
    110a:	0016      	movs	r6, r2
    110c:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    110e:	2300      	movs	r3, #0
    1110:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    1112:	2400      	movs	r4, #0
    1114:	4b3e      	ldr	r3, [pc, #248]	; (1210 <nm_spi_read_block+0x118>)
    1116:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    1118:	46a9      	mov	r9, r5
    111a:	e037      	b.n	118c <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    111c:	2301      	movs	r3, #1
    111e:	469b      	mov	fp, r3
		size = 2;
    1120:	3601      	adds	r6, #1
    1122:	e035      	b.n	1190 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    1124:	20c8      	movs	r0, #200	; 0xc8
    1126:	4b3b      	ldr	r3, [pc, #236]	; (1214 <nm_spi_read_block+0x11c>)
    1128:	4798      	blx	r3
	if (result != N_OK) {
    112a:	2801      	cmp	r0, #1
    112c:	d045      	beq.n	11ba <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    112e:	4a3a      	ldr	r2, [pc, #232]	; (1218 <nm_spi_read_block+0x120>)
    1130:	493a      	ldr	r1, [pc, #232]	; (121c <nm_spi_read_block+0x124>)
    1132:	483b      	ldr	r0, [pc, #236]	; (1220 <nm_spi_read_block+0x128>)
    1134:	4f3b      	ldr	r7, [pc, #236]	; (1224 <nm_spi_read_block+0x12c>)
    1136:	47b8      	blx	r7
    1138:	9902      	ldr	r1, [sp, #8]
    113a:	483b      	ldr	r0, [pc, #236]	; (1228 <nm_spi_read_block+0x130>)
    113c:	47b8      	blx	r7
    113e:	200d      	movs	r0, #13
    1140:	4b3a      	ldr	r3, [pc, #232]	; (122c <nm_spi_read_block+0x134>)
    1142:	4798      	blx	r3
		nm_bsp_sleep(1);
    1144:	2001      	movs	r0, #1
    1146:	4f3a      	ldr	r7, [pc, #232]	; (1230 <nm_spi_read_block+0x138>)
    1148:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    114a:	9400      	str	r4, [sp, #0]
    114c:	0023      	movs	r3, r4
    114e:	0022      	movs	r2, r4
    1150:	0021      	movs	r1, r4
    1152:	20cf      	movs	r0, #207	; 0xcf
    1154:	4d2e      	ldr	r5, [pc, #184]	; (1210 <nm_spi_read_block+0x118>)
    1156:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    1158:	20cf      	movs	r0, #207	; 0xcf
    115a:	4b2e      	ldr	r3, [pc, #184]	; (1214 <nm_spi_read_block+0x11c>)
    115c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    115e:	4a35      	ldr	r2, [pc, #212]	; (1234 <nm_spi_read_block+0x13c>)
    1160:	492e      	ldr	r1, [pc, #184]	; (121c <nm_spi_read_block+0x124>)
    1162:	482f      	ldr	r0, [pc, #188]	; (1220 <nm_spi_read_block+0x128>)
    1164:	4b2f      	ldr	r3, [pc, #188]	; (1224 <nm_spi_read_block+0x12c>)
    1166:	469a      	mov	sl, r3
    1168:	4798      	blx	r3
    116a:	0033      	movs	r3, r6
    116c:	9a02      	ldr	r2, [sp, #8]
    116e:	4649      	mov	r1, r9
    1170:	4831      	ldr	r0, [pc, #196]	; (1238 <nm_spi_read_block+0x140>)
    1172:	47d0      	blx	sl
    1174:	200d      	movs	r0, #13
    1176:	4b2d      	ldr	r3, [pc, #180]	; (122c <nm_spi_read_block+0x134>)
    1178:	4798      	blx	r3
		nm_bsp_sleep(1);
    117a:	2001      	movs	r0, #1
    117c:	47b8      	blx	r7
    117e:	2301      	movs	r3, #1
    1180:	425b      	negs	r3, r3
    1182:	469c      	mov	ip, r3
    1184:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    1186:	464b      	mov	r3, r9
    1188:	2b00      	cmp	r3, #0
    118a:	d038      	beq.n	11fe <nm_spi_read_block+0x106>
	if (size == 1)
    118c:	2e01      	cmp	r6, #1
    118e:	d0c5      	beq.n	111c <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    1190:	9400      	str	r4, [sp, #0]
    1192:	0033      	movs	r3, r6
    1194:	0022      	movs	r2, r4
    1196:	9d02      	ldr	r5, [sp, #8]
    1198:	0029      	movs	r1, r5
    119a:	20c8      	movs	r0, #200	; 0xc8
    119c:	47c0      	blx	r8
	if (result != N_OK) {
    119e:	2801      	cmp	r0, #1
    11a0:	d0c0      	beq.n	1124 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    11a2:	4a26      	ldr	r2, [pc, #152]	; (123c <nm_spi_read_block+0x144>)
    11a4:	491d      	ldr	r1, [pc, #116]	; (121c <nm_spi_read_block+0x124>)
    11a6:	481e      	ldr	r0, [pc, #120]	; (1220 <nm_spi_read_block+0x128>)
    11a8:	4f1e      	ldr	r7, [pc, #120]	; (1224 <nm_spi_read_block+0x12c>)
    11aa:	47b8      	blx	r7
    11ac:	0029      	movs	r1, r5
    11ae:	4824      	ldr	r0, [pc, #144]	; (1240 <nm_spi_read_block+0x148>)
    11b0:	47b8      	blx	r7
    11b2:	200d      	movs	r0, #13
    11b4:	4b1d      	ldr	r3, [pc, #116]	; (122c <nm_spi_read_block+0x134>)
    11b6:	4798      	blx	r3
    11b8:	e7c4      	b.n	1144 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    11ba:	465b      	mov	r3, fp
    11bc:	2b00      	cmp	r3, #0
    11be:	d016      	beq.n	11ee <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    11c0:	af05      	add	r7, sp, #20
    11c2:	0022      	movs	r2, r4
    11c4:	0031      	movs	r1, r6
    11c6:	0038      	movs	r0, r7
    11c8:	4b1e      	ldr	r3, [pc, #120]	; (1244 <nm_spi_read_block+0x14c>)
    11ca:	4798      	blx	r3
		buf[0] = tmp[0];
    11cc:	783b      	ldrb	r3, [r7, #0]
    11ce:	9a03      	ldr	r2, [sp, #12]
    11d0:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    11d2:	2801      	cmp	r0, #1
    11d4:	d011      	beq.n	11fa <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    11d6:	4a1c      	ldr	r2, [pc, #112]	; (1248 <nm_spi_read_block+0x150>)
    11d8:	4910      	ldr	r1, [pc, #64]	; (121c <nm_spi_read_block+0x124>)
    11da:	4811      	ldr	r0, [pc, #68]	; (1220 <nm_spi_read_block+0x128>)
    11dc:	4b11      	ldr	r3, [pc, #68]	; (1224 <nm_spi_read_block+0x12c>)
    11de:	4798      	blx	r3
    11e0:	481a      	ldr	r0, [pc, #104]	; (124c <nm_spi_read_block+0x154>)
    11e2:	4b1b      	ldr	r3, [pc, #108]	; (1250 <nm_spi_read_block+0x158>)
    11e4:	4798      	blx	r3
    11e6:	200d      	movs	r0, #13
    11e8:	4b10      	ldr	r3, [pc, #64]	; (122c <nm_spi_read_block+0x134>)
    11ea:	4798      	blx	r3
    11ec:	e7aa      	b.n	1144 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    11ee:	0022      	movs	r2, r4
    11f0:	0031      	movs	r1, r6
    11f2:	9803      	ldr	r0, [sp, #12]
    11f4:	4b13      	ldr	r3, [pc, #76]	; (1244 <nm_spi_read_block+0x14c>)
    11f6:	4798      	blx	r3
    11f8:	e7eb      	b.n	11d2 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    11fa:	2000      	movs	r0, #0
    11fc:	e001      	b.n	1202 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    11fe:	2006      	movs	r0, #6
    1200:	4240      	negs	r0, r0

	return s8Ret;
}
    1202:	b007      	add	sp, #28
    1204:	bc3c      	pop	{r2, r3, r4, r5}
    1206:	4690      	mov	r8, r2
    1208:	4699      	mov	r9, r3
    120a:	46a2      	mov	sl, r4
    120c:	46ab      	mov	fp, r5
    120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1210:	00000939 	.word	0x00000939
    1214:	00000ad9 	.word	0x00000ad9
    1218:	0000045c 	.word	0x0000045c
    121c:	00004bf4 	.word	0x00004bf4
    1220:	00004a84 	.word	0x00004a84
    1224:	00003a8d 	.word	0x00003a8d
    1228:	00004e10 	.word	0x00004e10
    122c:	00003ac1 	.word	0x00003ac1
    1230:	000001f5 	.word	0x000001f5
    1234:	0000047d 	.word	0x0000047d
    1238:	00004e70 	.word	0x00004e70
    123c:	00000456 	.word	0x00000456
    1240:	00004de0 	.word	0x00004de0
    1244:	00000bad 	.word	0x00000bad
    1248:	0000046c 	.word	0x0000046c
    124c:	00004e48 	.word	0x00004e48
    1250:	00003ba9 	.word	0x00003ba9

00001254 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1254:	b5f0      	push	{r4, r5, r6, r7, lr}
    1256:	46de      	mov	lr, fp
    1258:	4647      	mov	r7, r8
    125a:	b580      	push	{r7, lr}
    125c:	b089      	sub	sp, #36	; 0x24
    125e:	9004      	str	r0, [sp, #16]
    1260:	468b      	mov	fp, r1
    1262:	9203      	str	r2, [sp, #12]
    1264:	260a      	movs	r6, #10
    1266:	2780      	movs	r7, #128	; 0x80
    1268:	01bf      	lsls	r7, r7, #6
    126a:	466b      	mov	r3, sp
    126c:	82df      	strh	r7, [r3, #22]
    126e:	0035      	movs	r5, r6
    1270:	e02d      	b.n	12ce <nm_spi_write_block+0x7a>
		size = 2;
    1272:	3301      	adds	r3, #1
    1274:	9303      	str	r3, [sp, #12]
    1276:	e02d      	b.n	12d4 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    1278:	4a82      	ldr	r2, [pc, #520]	; (1484 <nm_spi_write_block+0x230>)
    127a:	4983      	ldr	r1, [pc, #524]	; (1488 <nm_spi_write_block+0x234>)
    127c:	4883      	ldr	r0, [pc, #524]	; (148c <nm_spi_write_block+0x238>)
    127e:	4c84      	ldr	r4, [pc, #528]	; (1490 <nm_spi_write_block+0x23c>)
    1280:	47a0      	blx	r4
    1282:	0031      	movs	r1, r6
    1284:	4883      	ldr	r0, [pc, #524]	; (1494 <nm_spi_write_block+0x240>)
    1286:	47a0      	blx	r4
    1288:	200d      	movs	r0, #13
    128a:	4b83      	ldr	r3, [pc, #524]	; (1498 <nm_spi_write_block+0x244>)
    128c:	4798      	blx	r3
		nm_bsp_sleep(1);
    128e:	2001      	movs	r0, #1
    1290:	4c82      	ldr	r4, [pc, #520]	; (149c <nm_spi_write_block+0x248>)
    1292:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    1294:	2300      	movs	r3, #0
    1296:	9300      	str	r3, [sp, #0]
    1298:	2200      	movs	r2, #0
    129a:	2100      	movs	r1, #0
    129c:	20cf      	movs	r0, #207	; 0xcf
    129e:	4e80      	ldr	r6, [pc, #512]	; (14a0 <nm_spi_write_block+0x24c>)
    12a0:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    12a2:	20cf      	movs	r0, #207	; 0xcf
    12a4:	4b7f      	ldr	r3, [pc, #508]	; (14a4 <nm_spi_write_block+0x250>)
    12a6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    12a8:	4a7f      	ldr	r2, [pc, #508]	; (14a8 <nm_spi_write_block+0x254>)
    12aa:	4977      	ldr	r1, [pc, #476]	; (1488 <nm_spi_write_block+0x234>)
    12ac:	4877      	ldr	r0, [pc, #476]	; (148c <nm_spi_write_block+0x238>)
    12ae:	4e78      	ldr	r6, [pc, #480]	; (1490 <nm_spi_write_block+0x23c>)
    12b0:	47b0      	blx	r6
    12b2:	9b03      	ldr	r3, [sp, #12]
    12b4:	9a04      	ldr	r2, [sp, #16]
    12b6:	0029      	movs	r1, r5
    12b8:	487c      	ldr	r0, [pc, #496]	; (14ac <nm_spi_write_block+0x258>)
    12ba:	47b0      	blx	r6
    12bc:	200d      	movs	r0, #13
    12be:	4b76      	ldr	r3, [pc, #472]	; (1498 <nm_spi_write_block+0x244>)
    12c0:	4798      	blx	r3
		nm_bsp_sleep(1);
    12c2:	2001      	movs	r0, #1
    12c4:	47a0      	blx	r4
    12c6:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    12c8:	2d00      	cmp	r5, #0
    12ca:	d100      	bne.n	12ce <nm_spi_write_block+0x7a>
    12cc:	e0d2      	b.n	1474 <nm_spi_write_block+0x220>
	if (size == 1)
    12ce:	9b03      	ldr	r3, [sp, #12]
    12d0:	2b01      	cmp	r3, #1
    12d2:	d0ce      	beq.n	1272 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    12d4:	2300      	movs	r3, #0
    12d6:	9300      	str	r3, [sp, #0]
    12d8:	9b03      	ldr	r3, [sp, #12]
    12da:	2200      	movs	r2, #0
    12dc:	9e04      	ldr	r6, [sp, #16]
    12de:	0031      	movs	r1, r6
    12e0:	20c7      	movs	r0, #199	; 0xc7
    12e2:	4c6f      	ldr	r4, [pc, #444]	; (14a0 <nm_spi_write_block+0x24c>)
    12e4:	47a0      	blx	r4
	if (result != N_OK) {
    12e6:	2801      	cmp	r0, #1
    12e8:	d1c6      	bne.n	1278 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    12ea:	20c7      	movs	r0, #199	; 0xc7
    12ec:	4b6d      	ldr	r3, [pc, #436]	; (14a4 <nm_spi_write_block+0x250>)
    12ee:	4798      	blx	r3
	if (result != N_OK) {
    12f0:	2801      	cmp	r0, #1
    12f2:	d00b      	beq.n	130c <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    12f4:	4a6e      	ldr	r2, [pc, #440]	; (14b0 <nm_spi_write_block+0x25c>)
    12f6:	4964      	ldr	r1, [pc, #400]	; (1488 <nm_spi_write_block+0x234>)
    12f8:	4864      	ldr	r0, [pc, #400]	; (148c <nm_spi_write_block+0x238>)
    12fa:	4c65      	ldr	r4, [pc, #404]	; (1490 <nm_spi_write_block+0x23c>)
    12fc:	47a0      	blx	r4
    12fe:	9904      	ldr	r1, [sp, #16]
    1300:	486c      	ldr	r0, [pc, #432]	; (14b4 <nm_spi_write_block+0x260>)
    1302:	47a0      	blx	r4
    1304:	200d      	movs	r0, #13
    1306:	4b64      	ldr	r3, [pc, #400]	; (1498 <nm_spi_write_block+0x244>)
    1308:	4798      	blx	r3
    130a:	e7c0      	b.n	128e <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    130c:	2200      	movs	r2, #0
    130e:	ab07      	add	r3, sp, #28
    1310:	801a      	strh	r2, [r3, #0]
    1312:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    1314:	2600      	movs	r6, #0
				order = 0x1;
    1316:	46a8      	mov	r8, r5
    1318:	0035      	movs	r5, r6
    131a:	0026      	movs	r6, r4
    131c:	e021      	b.n	1362 <nm_spi_write_block+0x10e>
				order = 0x2;
    131e:	2300      	movs	r3, #0
    1320:	42b7      	cmp	r7, r6
    1322:	415b      	adcs	r3, r3
    1324:	3302      	adds	r3, #2
		cmd |= order;
    1326:	200b      	movs	r0, #11
    1328:	aa04      	add	r2, sp, #16
    132a:	4694      	mov	ip, r2
    132c:	4460      	add	r0, ip
    132e:	2210      	movs	r2, #16
    1330:	4252      	negs	r2, r2
    1332:	4313      	orrs	r3, r2
    1334:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    1336:	2101      	movs	r1, #1
    1338:	4b5f      	ldr	r3, [pc, #380]	; (14b8 <nm_spi_write_block+0x264>)
    133a:	4798      	blx	r3
    133c:	2800      	cmp	r0, #0
    133e:	d11d      	bne.n	137c <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    1340:	465b      	mov	r3, fp
    1342:	1958      	adds	r0, r3, r5
    1344:	0021      	movs	r1, r4
    1346:	4b5c      	ldr	r3, [pc, #368]	; (14b8 <nm_spi_write_block+0x264>)
    1348:	4798      	blx	r3
    134a:	2800      	cmp	r0, #0
    134c:	d12e      	bne.n	13ac <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    134e:	4b5b      	ldr	r3, [pc, #364]	; (14bc <nm_spi_write_block+0x268>)
    1350:	781b      	ldrb	r3, [r3, #0]
    1352:	2b00      	cmp	r3, #0
    1354:	d037      	beq.n	13c6 <nm_spi_write_block+0x172>
		ix += nbytes;
    1356:	1965      	adds	r5, r4, r5
    1358:	b22d      	sxth	r5, r5
		sz -= nbytes;
    135a:	1b36      	subs	r6, r6, r4
    135c:	b2b6      	uxth	r6, r6
	} while (sz);
    135e:	2e00      	cmp	r6, #0
    1360:	d052      	beq.n	1408 <nm_spi_write_block+0x1b4>
    1362:	1c34      	adds	r4, r6, #0
    1364:	42be      	cmp	r6, r7
    1366:	d901      	bls.n	136c <nm_spi_write_block+0x118>
    1368:	466b      	mov	r3, sp
    136a:	8adc      	ldrh	r4, [r3, #22]
    136c:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    136e:	2d00      	cmp	r5, #0
    1370:	d1d5      	bne.n	131e <nm_spi_write_block+0xca>
				order = 0x3;
    1372:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    1374:	42be      	cmp	r6, r7
    1376:	d9d6      	bls.n	1326 <nm_spi_write_block+0xd2>
				order = 0x1;
    1378:	3b02      	subs	r3, #2
    137a:	e7d4      	b.n	1326 <nm_spi_write_block+0xd2>
    137c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    137e:	4a50      	ldr	r2, [pc, #320]	; (14c0 <nm_spi_write_block+0x26c>)
    1380:	4950      	ldr	r1, [pc, #320]	; (14c4 <nm_spi_write_block+0x270>)
    1382:	4842      	ldr	r0, [pc, #264]	; (148c <nm_spi_write_block+0x238>)
    1384:	4b42      	ldr	r3, [pc, #264]	; (1490 <nm_spi_write_block+0x23c>)
    1386:	4798      	blx	r3
    1388:	484f      	ldr	r0, [pc, #316]	; (14c8 <nm_spi_write_block+0x274>)
    138a:	4b50      	ldr	r3, [pc, #320]	; (14cc <nm_spi_write_block+0x278>)
    138c:	4798      	blx	r3
    138e:	200d      	movs	r0, #13
    1390:	4b41      	ldr	r3, [pc, #260]	; (1498 <nm_spi_write_block+0x244>)
    1392:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    1394:	4a4e      	ldr	r2, [pc, #312]	; (14d0 <nm_spi_write_block+0x27c>)
    1396:	493c      	ldr	r1, [pc, #240]	; (1488 <nm_spi_write_block+0x234>)
    1398:	483c      	ldr	r0, [pc, #240]	; (148c <nm_spi_write_block+0x238>)
    139a:	4b3d      	ldr	r3, [pc, #244]	; (1490 <nm_spi_write_block+0x23c>)
    139c:	4798      	blx	r3
    139e:	484d      	ldr	r0, [pc, #308]	; (14d4 <nm_spi_write_block+0x280>)
    13a0:	4b4a      	ldr	r3, [pc, #296]	; (14cc <nm_spi_write_block+0x278>)
    13a2:	4798      	blx	r3
    13a4:	200d      	movs	r0, #13
    13a6:	4b3c      	ldr	r3, [pc, #240]	; (1498 <nm_spi_write_block+0x244>)
    13a8:	4798      	blx	r3
    13aa:	e770      	b.n	128e <nm_spi_write_block+0x3a>
    13ac:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    13ae:	4a4a      	ldr	r2, [pc, #296]	; (14d8 <nm_spi_write_block+0x284>)
    13b0:	4944      	ldr	r1, [pc, #272]	; (14c4 <nm_spi_write_block+0x270>)
    13b2:	4836      	ldr	r0, [pc, #216]	; (148c <nm_spi_write_block+0x238>)
    13b4:	4b36      	ldr	r3, [pc, #216]	; (1490 <nm_spi_write_block+0x23c>)
    13b6:	4798      	blx	r3
    13b8:	4848      	ldr	r0, [pc, #288]	; (14dc <nm_spi_write_block+0x288>)
    13ba:	4b44      	ldr	r3, [pc, #272]	; (14cc <nm_spi_write_block+0x278>)
    13bc:	4798      	blx	r3
    13be:	200d      	movs	r0, #13
    13c0:	4b35      	ldr	r3, [pc, #212]	; (1498 <nm_spi_write_block+0x244>)
    13c2:	4798      	blx	r3
    13c4:	e7e6      	b.n	1394 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    13c6:	2102      	movs	r1, #2
    13c8:	a807      	add	r0, sp, #28
    13ca:	4b3b      	ldr	r3, [pc, #236]	; (14b8 <nm_spi_write_block+0x264>)
    13cc:	4798      	blx	r3
    13ce:	2800      	cmp	r0, #0
    13d0:	d0c1      	beq.n	1356 <nm_spi_write_block+0x102>
    13d2:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    13d4:	22d7      	movs	r2, #215	; 0xd7
    13d6:	0092      	lsls	r2, r2, #2
    13d8:	493a      	ldr	r1, [pc, #232]	; (14c4 <nm_spi_write_block+0x270>)
    13da:	482c      	ldr	r0, [pc, #176]	; (148c <nm_spi_write_block+0x238>)
    13dc:	4b2c      	ldr	r3, [pc, #176]	; (1490 <nm_spi_write_block+0x23c>)
    13de:	4798      	blx	r3
    13e0:	483f      	ldr	r0, [pc, #252]	; (14e0 <nm_spi_write_block+0x28c>)
    13e2:	4b3a      	ldr	r3, [pc, #232]	; (14cc <nm_spi_write_block+0x278>)
    13e4:	4798      	blx	r3
    13e6:	200d      	movs	r0, #13
    13e8:	4b2b      	ldr	r3, [pc, #172]	; (1498 <nm_spi_write_block+0x244>)
    13ea:	4798      	blx	r3
    13ec:	e7d2      	b.n	1394 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    13ee:	229a      	movs	r2, #154	; 0x9a
    13f0:	0052      	lsls	r2, r2, #1
    13f2:	493c      	ldr	r1, [pc, #240]	; (14e4 <nm_spi_write_block+0x290>)
    13f4:	4825      	ldr	r0, [pc, #148]	; (148c <nm_spi_write_block+0x238>)
    13f6:	4b26      	ldr	r3, [pc, #152]	; (1490 <nm_spi_write_block+0x23c>)
    13f8:	4798      	blx	r3
    13fa:	483b      	ldr	r0, [pc, #236]	; (14e8 <nm_spi_write_block+0x294>)
    13fc:	4b33      	ldr	r3, [pc, #204]	; (14cc <nm_spi_write_block+0x278>)
    13fe:	4798      	blx	r3
    1400:	200d      	movs	r0, #13
    1402:	4b25      	ldr	r3, [pc, #148]	; (1498 <nm_spi_write_block+0x244>)
    1404:	4798      	blx	r3
    1406:	e027      	b.n	1458 <nm_spi_write_block+0x204>
    1408:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    140a:	4b2c      	ldr	r3, [pc, #176]	; (14bc <nm_spi_write_block+0x268>)
    140c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    140e:	1e63      	subs	r3, r4, #1
    1410:	419c      	sbcs	r4, r3
    1412:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    1414:	b2a1      	uxth	r1, r4
    1416:	a807      	add	r0, sp, #28
    1418:	4b34      	ldr	r3, [pc, #208]	; (14ec <nm_spi_write_block+0x298>)
    141a:	4798      	blx	r3
    141c:	2800      	cmp	r0, #0
    141e:	d1e6      	bne.n	13ee <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    1420:	ab08      	add	r3, sp, #32
    1422:	191b      	adds	r3, r3, r4
    1424:	3b05      	subs	r3, #5
    1426:	781b      	ldrb	r3, [r3, #0]
    1428:	2b00      	cmp	r3, #0
    142a:	d106      	bne.n	143a <nm_spi_write_block+0x1e6>
    142c:	ab08      	add	r3, sp, #32
    142e:	469c      	mov	ip, r3
    1430:	4464      	add	r4, ip
    1432:	3c06      	subs	r4, #6
    1434:	7823      	ldrb	r3, [r4, #0]
    1436:	2bc3      	cmp	r3, #195	; 0xc3
    1438:	d01a      	beq.n	1470 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    143a:	223c      	movs	r2, #60	; 0x3c
    143c:	32ff      	adds	r2, #255	; 0xff
    143e:	4929      	ldr	r1, [pc, #164]	; (14e4 <nm_spi_write_block+0x290>)
    1440:	4812      	ldr	r0, [pc, #72]	; (148c <nm_spi_write_block+0x238>)
    1442:	4c13      	ldr	r4, [pc, #76]	; (1490 <nm_spi_write_block+0x23c>)
    1444:	47a0      	blx	r4
    1446:	a907      	add	r1, sp, #28
    1448:	788b      	ldrb	r3, [r1, #2]
    144a:	784a      	ldrb	r2, [r1, #1]
    144c:	7809      	ldrb	r1, [r1, #0]
    144e:	4828      	ldr	r0, [pc, #160]	; (14f0 <nm_spi_write_block+0x29c>)
    1450:	47a0      	blx	r4
    1452:	200d      	movs	r0, #13
    1454:	4b10      	ldr	r3, [pc, #64]	; (1498 <nm_spi_write_block+0x244>)
    1456:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    1458:	4a26      	ldr	r2, [pc, #152]	; (14f4 <nm_spi_write_block+0x2a0>)
    145a:	490b      	ldr	r1, [pc, #44]	; (1488 <nm_spi_write_block+0x234>)
    145c:	480b      	ldr	r0, [pc, #44]	; (148c <nm_spi_write_block+0x238>)
    145e:	4b0c      	ldr	r3, [pc, #48]	; (1490 <nm_spi_write_block+0x23c>)
    1460:	4798      	blx	r3
    1462:	481c      	ldr	r0, [pc, #112]	; (14d4 <nm_spi_write_block+0x280>)
    1464:	4b19      	ldr	r3, [pc, #100]	; (14cc <nm_spi_write_block+0x278>)
    1466:	4798      	blx	r3
    1468:	200d      	movs	r0, #13
    146a:	4b0b      	ldr	r3, [pc, #44]	; (1498 <nm_spi_write_block+0x244>)
    146c:	4798      	blx	r3
    146e:	e70e      	b.n	128e <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1470:	2000      	movs	r0, #0
    1472:	e001      	b.n	1478 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    1474:	2006      	movs	r0, #6
    1476:	4240      	negs	r0, r0

	return s8Ret;
}
    1478:	b009      	add	sp, #36	; 0x24
    147a:	bc0c      	pop	{r2, r3}
    147c:	4690      	mov	r8, r2
    147e:	469b      	mov	fp, r3
    1480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	000003c3 	.word	0x000003c3
    1488:	00004bd4 	.word	0x00004bd4
    148c:	00004a84 	.word	0x00004a84
    1490:	00003a8d 	.word	0x00003a8d
    1494:	00004e8c 	.word	0x00004e8c
    1498:	00003ac1 	.word	0x00003ac1
    149c:	000001f5 	.word	0x000001f5
    14a0:	00000939 	.word	0x00000939
    14a4:	00000ad9 	.word	0x00000ad9
    14a8:	000003eb 	.word	0x000003eb
    14ac:	00004e70 	.word	0x00004e70
    14b0:	000003c9 	.word	0x000003c9
    14b4:	00004ebc 	.word	0x00004ebc
    14b8:	00000919 	.word	0x00000919
    14bc:	20000098 	.word	0x20000098
    14c0:	00000349 	.word	0x00000349
    14c4:	00004bb4 	.word	0x00004bb4
    14c8:	00004ef4 	.word	0x00004ef4
    14cc:	00003ba9 	.word	0x00003ba9
    14d0:	000003d9 	.word	0x000003d9
    14d4:	00004fe8 	.word	0x00004fe8
    14d8:	00000352 	.word	0x00000352
    14dc:	00004f2c 	.word	0x00004f2c
    14e0:	00004f60 	.word	0x00004f60
    14e4:	00004b88 	.word	0x00004b88
    14e8:	00004f98 	.word	0x00004f98
    14ec:	00000ab9 	.word	0x00000ab9
    14f0:	00004fb8 	.word	0x00004fb8
    14f4:	000003e1 	.word	0x000003e1

000014f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    14f8:	4b0c      	ldr	r3, [pc, #48]	; (152c <cpu_irq_enter_critical+0x34>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d106      	bne.n	150e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1500:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1504:	2b00      	cmp	r3, #0
    1506:	d007      	beq.n	1518 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1508:	2200      	movs	r2, #0
    150a:	4b09      	ldr	r3, [pc, #36]	; (1530 <cpu_irq_enter_critical+0x38>)
    150c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    150e:	4a07      	ldr	r2, [pc, #28]	; (152c <cpu_irq_enter_critical+0x34>)
    1510:	6813      	ldr	r3, [r2, #0]
    1512:	3301      	adds	r3, #1
    1514:	6013      	str	r3, [r2, #0]
}
    1516:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1518:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    151a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    151e:	2200      	movs	r2, #0
    1520:	4b04      	ldr	r3, [pc, #16]	; (1534 <cpu_irq_enter_critical+0x3c>)
    1522:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1524:	3201      	adds	r2, #1
    1526:	4b02      	ldr	r3, [pc, #8]	; (1530 <cpu_irq_enter_critical+0x38>)
    1528:	701a      	strb	r2, [r3, #0]
    152a:	e7f0      	b.n	150e <cpu_irq_enter_critical+0x16>
    152c:	2000009c 	.word	0x2000009c
    1530:	200000a0 	.word	0x200000a0
    1534:	2000000a 	.word	0x2000000a

00001538 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1538:	4b08      	ldr	r3, [pc, #32]	; (155c <cpu_irq_leave_critical+0x24>)
    153a:	681a      	ldr	r2, [r3, #0]
    153c:	3a01      	subs	r2, #1
    153e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1540:	681b      	ldr	r3, [r3, #0]
    1542:	2b00      	cmp	r3, #0
    1544:	d109      	bne.n	155a <cpu_irq_leave_critical+0x22>
    1546:	4b06      	ldr	r3, [pc, #24]	; (1560 <cpu_irq_leave_critical+0x28>)
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	2b00      	cmp	r3, #0
    154c:	d005      	beq.n	155a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    154e:	2201      	movs	r2, #1
    1550:	4b04      	ldr	r3, [pc, #16]	; (1564 <cpu_irq_leave_critical+0x2c>)
    1552:	701a      	strb	r2, [r3, #0]
    1554:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1558:	b662      	cpsie	i
	}
}
    155a:	4770      	bx	lr
    155c:	2000009c 	.word	0x2000009c
    1560:	200000a0 	.word	0x200000a0
    1564:	2000000a 	.word	0x2000000a

00001568 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1568:	b5f0      	push	{r4, r5, r6, r7, lr}
    156a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    156c:	ac01      	add	r4, sp, #4
    156e:	2501      	movs	r5, #1
    1570:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1572:	2700      	movs	r7, #0
    1574:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1576:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1578:	0021      	movs	r1, r4
    157a:	2015      	movs	r0, #21
    157c:	4e06      	ldr	r6, [pc, #24]	; (1598 <system_board_init+0x30>)
    157e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1580:	2280      	movs	r2, #128	; 0x80
    1582:	0392      	lsls	r2, r2, #14
    1584:	4b05      	ldr	r3, [pc, #20]	; (159c <system_board_init+0x34>)
    1586:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1588:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    158a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    158c:	0021      	movs	r1, r4
    158e:	200f      	movs	r0, #15
    1590:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1592:	b003      	add	sp, #12
    1594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	00001679 	.word	0x00001679
    159c:	41004400 	.word	0x41004400

000015a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    15a0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    15a2:	2200      	movs	r2, #0
    15a4:	4b10      	ldr	r3, [pc, #64]	; (15e8 <EIC_Handler+0x48>)
    15a6:	701a      	strb	r2, [r3, #0]
    15a8:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    15aa:	4910      	ldr	r1, [pc, #64]	; (15ec <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    15ac:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    15ae:	4e10      	ldr	r6, [pc, #64]	; (15f0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    15b0:	4c0d      	ldr	r4, [pc, #52]	; (15e8 <EIC_Handler+0x48>)
    15b2:	e00a      	b.n	15ca <EIC_Handler+0x2a>
		return eics[eic_index];
    15b4:	490d      	ldr	r1, [pc, #52]	; (15ec <EIC_Handler+0x4c>)
    15b6:	e008      	b.n	15ca <EIC_Handler+0x2a>
    15b8:	7823      	ldrb	r3, [r4, #0]
    15ba:	3301      	adds	r3, #1
    15bc:	b2db      	uxtb	r3, r3
    15be:	7023      	strb	r3, [r4, #0]
    15c0:	2b0f      	cmp	r3, #15
    15c2:	d810      	bhi.n	15e6 <EIC_Handler+0x46>
		return NULL;
    15c4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    15c6:	2b1f      	cmp	r3, #31
    15c8:	d9f4      	bls.n	15b4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    15ca:	0028      	movs	r0, r5
    15cc:	4018      	ands	r0, r3
    15ce:	2201      	movs	r2, #1
    15d0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    15d2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    15d4:	4210      	tst	r0, r2
    15d6:	d0ef      	beq.n	15b8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    15d8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    15da:	009b      	lsls	r3, r3, #2
    15dc:	599b      	ldr	r3, [r3, r6]
    15de:	2b00      	cmp	r3, #0
    15e0:	d0ea      	beq.n	15b8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    15e2:	4798      	blx	r3
    15e4:	e7e8      	b.n	15b8 <EIC_Handler+0x18>
			}
		}
	}
}
    15e6:	bd70      	pop	{r4, r5, r6, pc}
    15e8:	200005a8 	.word	0x200005a8
    15ec:	40001800 	.word	0x40001800
    15f0:	200005ac 	.word	0x200005ac

000015f4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    15f4:	4a04      	ldr	r2, [pc, #16]	; (1608 <_extint_enable+0x14>)
    15f6:	7813      	ldrb	r3, [r2, #0]
    15f8:	2102      	movs	r1, #2
    15fa:	430b      	orrs	r3, r1
    15fc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    15fe:	7853      	ldrb	r3, [r2, #1]
    1600:	b25b      	sxtb	r3, r3
    1602:	2b00      	cmp	r3, #0
    1604:	dbfb      	blt.n	15fe <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1606:	4770      	bx	lr
    1608:	40001800 	.word	0x40001800

0000160c <_system_extint_init>:
{
    160c:	b500      	push	{lr}
    160e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1610:	4a12      	ldr	r2, [pc, #72]	; (165c <_system_extint_init+0x50>)
    1612:	6993      	ldr	r3, [r2, #24]
    1614:	2140      	movs	r1, #64	; 0x40
    1616:	430b      	orrs	r3, r1
    1618:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    161a:	a901      	add	r1, sp, #4
    161c:	2300      	movs	r3, #0
    161e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1620:	2005      	movs	r0, #5
    1622:	4b0f      	ldr	r3, [pc, #60]	; (1660 <_system_extint_init+0x54>)
    1624:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1626:	2005      	movs	r0, #5
    1628:	4b0e      	ldr	r3, [pc, #56]	; (1664 <_system_extint_init+0x58>)
    162a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    162c:	4a0e      	ldr	r2, [pc, #56]	; (1668 <_system_extint_init+0x5c>)
    162e:	7813      	ldrb	r3, [r2, #0]
    1630:	2101      	movs	r1, #1
    1632:	430b      	orrs	r3, r1
    1634:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1636:	7853      	ldrb	r3, [r2, #1]
    1638:	b25b      	sxtb	r3, r3
    163a:	2b00      	cmp	r3, #0
    163c:	dbfb      	blt.n	1636 <_system_extint_init+0x2a>
    163e:	4b0b      	ldr	r3, [pc, #44]	; (166c <_system_extint_init+0x60>)
    1640:	0019      	movs	r1, r3
    1642:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1644:	2200      	movs	r2, #0
    1646:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1648:	4299      	cmp	r1, r3
    164a:	d1fc      	bne.n	1646 <_system_extint_init+0x3a>
    164c:	2210      	movs	r2, #16
    164e:	4b08      	ldr	r3, [pc, #32]	; (1670 <_system_extint_init+0x64>)
    1650:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1652:	4b08      	ldr	r3, [pc, #32]	; (1674 <_system_extint_init+0x68>)
    1654:	4798      	blx	r3
}
    1656:	b003      	add	sp, #12
    1658:	bd00      	pop	{pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	40000400 	.word	0x40000400
    1660:	00002ce9 	.word	0x00002ce9
    1664:	00002c5d 	.word	0x00002c5d
    1668:	40001800 	.word	0x40001800
    166c:	200005ac 	.word	0x200005ac
    1670:	e000e100 	.word	0xe000e100
    1674:	000015f5 	.word	0x000015f5

00001678 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1678:	b500      	push	{lr}
    167a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    167c:	ab01      	add	r3, sp, #4
    167e:	2280      	movs	r2, #128	; 0x80
    1680:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1682:	780a      	ldrb	r2, [r1, #0]
    1684:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1686:	784a      	ldrb	r2, [r1, #1]
    1688:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    168a:	788a      	ldrb	r2, [r1, #2]
    168c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    168e:	0019      	movs	r1, r3
    1690:	4b01      	ldr	r3, [pc, #4]	; (1698 <port_pin_set_config+0x20>)
    1692:	4798      	blx	r3
}
    1694:	b003      	add	sp, #12
    1696:	bd00      	pop	{pc}
    1698:	00002de1 	.word	0x00002de1

0000169c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    169c:	b5f0      	push	{r4, r5, r6, r7, lr}
    169e:	46de      	mov	lr, fp
    16a0:	4657      	mov	r7, sl
    16a2:	464e      	mov	r6, r9
    16a4:	4645      	mov	r5, r8
    16a6:	b5e0      	push	{r5, r6, r7, lr}
    16a8:	b087      	sub	sp, #28
    16aa:	4680      	mov	r8, r0
    16ac:	9104      	str	r1, [sp, #16]
    16ae:	0016      	movs	r6, r2
    16b0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    16b2:	2200      	movs	r2, #0
    16b4:	2300      	movs	r3, #0
    16b6:	2100      	movs	r1, #0
    16b8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    16ba:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    16bc:	2001      	movs	r0, #1
    16be:	0021      	movs	r1, r4
    16c0:	9600      	str	r6, [sp, #0]
    16c2:	9701      	str	r7, [sp, #4]
    16c4:	465c      	mov	r4, fp
    16c6:	9403      	str	r4, [sp, #12]
    16c8:	4644      	mov	r4, r8
    16ca:	9405      	str	r4, [sp, #20]
    16cc:	e013      	b.n	16f6 <long_division+0x5a>
    16ce:	2420      	movs	r4, #32
    16d0:	1a64      	subs	r4, r4, r1
    16d2:	0005      	movs	r5, r0
    16d4:	40e5      	lsrs	r5, r4
    16d6:	46a8      	mov	r8, r5
    16d8:	e014      	b.n	1704 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    16da:	9c00      	ldr	r4, [sp, #0]
    16dc:	9d01      	ldr	r5, [sp, #4]
    16de:	1b12      	subs	r2, r2, r4
    16e0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    16e2:	465c      	mov	r4, fp
    16e4:	464d      	mov	r5, r9
    16e6:	432c      	orrs	r4, r5
    16e8:	46a3      	mov	fp, r4
    16ea:	9c03      	ldr	r4, [sp, #12]
    16ec:	4645      	mov	r5, r8
    16ee:	432c      	orrs	r4, r5
    16f0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    16f2:	3901      	subs	r1, #1
    16f4:	d325      	bcc.n	1742 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    16f6:	2420      	movs	r4, #32
    16f8:	4264      	negs	r4, r4
    16fa:	190c      	adds	r4, r1, r4
    16fc:	d4e7      	bmi.n	16ce <long_division+0x32>
    16fe:	0005      	movs	r5, r0
    1700:	40a5      	lsls	r5, r4
    1702:	46a8      	mov	r8, r5
    1704:	0004      	movs	r4, r0
    1706:	408c      	lsls	r4, r1
    1708:	46a1      	mov	r9, r4
		r = r << 1;
    170a:	1892      	adds	r2, r2, r2
    170c:	415b      	adcs	r3, r3
    170e:	0014      	movs	r4, r2
    1710:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1712:	9e05      	ldr	r6, [sp, #20]
    1714:	464f      	mov	r7, r9
    1716:	403e      	ands	r6, r7
    1718:	46b4      	mov	ip, r6
    171a:	9e04      	ldr	r6, [sp, #16]
    171c:	4647      	mov	r7, r8
    171e:	403e      	ands	r6, r7
    1720:	46b2      	mov	sl, r6
    1722:	4666      	mov	r6, ip
    1724:	4657      	mov	r7, sl
    1726:	433e      	orrs	r6, r7
    1728:	d003      	beq.n	1732 <long_division+0x96>
			r |= 0x01;
    172a:	0006      	movs	r6, r0
    172c:	4326      	orrs	r6, r4
    172e:	0032      	movs	r2, r6
    1730:	002b      	movs	r3, r5
		if (r >= d) {
    1732:	9c00      	ldr	r4, [sp, #0]
    1734:	9d01      	ldr	r5, [sp, #4]
    1736:	429d      	cmp	r5, r3
    1738:	d8db      	bhi.n	16f2 <long_division+0x56>
    173a:	d1ce      	bne.n	16da <long_division+0x3e>
    173c:	4294      	cmp	r4, r2
    173e:	d8d8      	bhi.n	16f2 <long_division+0x56>
    1740:	e7cb      	b.n	16da <long_division+0x3e>
    1742:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1744:	4658      	mov	r0, fp
    1746:	0019      	movs	r1, r3
    1748:	b007      	add	sp, #28
    174a:	bc3c      	pop	{r2, r3, r4, r5}
    174c:	4690      	mov	r8, r2
    174e:	4699      	mov	r9, r3
    1750:	46a2      	mov	sl, r4
    1752:	46ab      	mov	fp, r5
    1754:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001756 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1756:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1758:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    175a:	2340      	movs	r3, #64	; 0x40
    175c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    175e:	4281      	cmp	r1, r0
    1760:	d202      	bcs.n	1768 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1762:	0018      	movs	r0, r3
    1764:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1766:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1768:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    176a:	1c63      	adds	r3, r4, #1
    176c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    176e:	4288      	cmp	r0, r1
    1770:	d9f9      	bls.n	1766 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1772:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1774:	2cff      	cmp	r4, #255	; 0xff
    1776:	d8f4      	bhi.n	1762 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1778:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    177a:	2300      	movs	r3, #0
    177c:	e7f1      	b.n	1762 <_sercom_get_sync_baud_val+0xc>
	...

00001780 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1780:	b5f0      	push	{r4, r5, r6, r7, lr}
    1782:	b083      	sub	sp, #12
    1784:	000f      	movs	r7, r1
    1786:	0016      	movs	r6, r2
    1788:	aa08      	add	r2, sp, #32
    178a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    178c:	0004      	movs	r4, r0
    178e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1790:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1792:	42bc      	cmp	r4, r7
    1794:	d902      	bls.n	179c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1796:	0010      	movs	r0, r2
    1798:	b003      	add	sp, #12
    179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    179c:	2b00      	cmp	r3, #0
    179e:	d114      	bne.n	17ca <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    17a0:	0002      	movs	r2, r0
    17a2:	0008      	movs	r0, r1
    17a4:	2100      	movs	r1, #0
    17a6:	4c19      	ldr	r4, [pc, #100]	; (180c <_sercom_get_async_baud_val+0x8c>)
    17a8:	47a0      	blx	r4
    17aa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    17ac:	003a      	movs	r2, r7
    17ae:	2300      	movs	r3, #0
    17b0:	2000      	movs	r0, #0
    17b2:	4c17      	ldr	r4, [pc, #92]	; (1810 <_sercom_get_async_baud_val+0x90>)
    17b4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    17b6:	2200      	movs	r2, #0
    17b8:	2301      	movs	r3, #1
    17ba:	1a12      	subs	r2, r2, r0
    17bc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    17be:	0c12      	lsrs	r2, r2, #16
    17c0:	041b      	lsls	r3, r3, #16
    17c2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    17c4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    17c6:	2200      	movs	r2, #0
    17c8:	e7e5      	b.n	1796 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    17ca:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    17cc:	2b01      	cmp	r3, #1
    17ce:	d1f9      	bne.n	17c4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    17d0:	000a      	movs	r2, r1
    17d2:	2300      	movs	r3, #0
    17d4:	2100      	movs	r1, #0
    17d6:	4c0d      	ldr	r4, [pc, #52]	; (180c <_sercom_get_async_baud_val+0x8c>)
    17d8:	47a0      	blx	r4
    17da:	0002      	movs	r2, r0
    17dc:	000b      	movs	r3, r1
    17de:	9200      	str	r2, [sp, #0]
    17e0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    17e2:	0038      	movs	r0, r7
    17e4:	2100      	movs	r1, #0
    17e6:	4c0a      	ldr	r4, [pc, #40]	; (1810 <_sercom_get_async_baud_val+0x90>)
    17e8:	47a0      	blx	r4
    17ea:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    17ec:	2380      	movs	r3, #128	; 0x80
    17ee:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    17f0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    17f2:	4298      	cmp	r0, r3
    17f4:	d8cf      	bhi.n	1796 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    17f6:	0f79      	lsrs	r1, r7, #29
    17f8:	00f8      	lsls	r0, r7, #3
    17fa:	9a00      	ldr	r2, [sp, #0]
    17fc:	9b01      	ldr	r3, [sp, #4]
    17fe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1800:	00ea      	lsls	r2, r5, #3
    1802:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1804:	b2d2      	uxtb	r2, r2
    1806:	0352      	lsls	r2, r2, #13
    1808:	432a      	orrs	r2, r5
    180a:	e7db      	b.n	17c4 <_sercom_get_async_baud_val+0x44>
    180c:	00003869 	.word	0x00003869
    1810:	0000169d 	.word	0x0000169d

00001814 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1814:	b510      	push	{r4, lr}
    1816:	b082      	sub	sp, #8
    1818:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    181a:	4b0e      	ldr	r3, [pc, #56]	; (1854 <sercom_set_gclk_generator+0x40>)
    181c:	781b      	ldrb	r3, [r3, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	d007      	beq.n	1832 <sercom_set_gclk_generator+0x1e>
    1822:	2900      	cmp	r1, #0
    1824:	d105      	bne.n	1832 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1826:	4b0b      	ldr	r3, [pc, #44]	; (1854 <sercom_set_gclk_generator+0x40>)
    1828:	785b      	ldrb	r3, [r3, #1]
    182a:	4283      	cmp	r3, r0
    182c:	d010      	beq.n	1850 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    182e:	201d      	movs	r0, #29
    1830:	e00c      	b.n	184c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1832:	a901      	add	r1, sp, #4
    1834:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1836:	2013      	movs	r0, #19
    1838:	4b07      	ldr	r3, [pc, #28]	; (1858 <sercom_set_gclk_generator+0x44>)
    183a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    183c:	2013      	movs	r0, #19
    183e:	4b07      	ldr	r3, [pc, #28]	; (185c <sercom_set_gclk_generator+0x48>)
    1840:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1842:	4b04      	ldr	r3, [pc, #16]	; (1854 <sercom_set_gclk_generator+0x40>)
    1844:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1846:	2201      	movs	r2, #1
    1848:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    184a:	2000      	movs	r0, #0
}
    184c:	b002      	add	sp, #8
    184e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1850:	2000      	movs	r0, #0
    1852:	e7fb      	b.n	184c <sercom_set_gclk_generator+0x38>
    1854:	200000a4 	.word	0x200000a4
    1858:	00002ce9 	.word	0x00002ce9
    185c:	00002c5d 	.word	0x00002c5d

00001860 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1860:	4b40      	ldr	r3, [pc, #256]	; (1964 <_sercom_get_default_pad+0x104>)
    1862:	4298      	cmp	r0, r3
    1864:	d031      	beq.n	18ca <_sercom_get_default_pad+0x6a>
    1866:	d90a      	bls.n	187e <_sercom_get_default_pad+0x1e>
    1868:	4b3f      	ldr	r3, [pc, #252]	; (1968 <_sercom_get_default_pad+0x108>)
    186a:	4298      	cmp	r0, r3
    186c:	d04d      	beq.n	190a <_sercom_get_default_pad+0xaa>
    186e:	4b3f      	ldr	r3, [pc, #252]	; (196c <_sercom_get_default_pad+0x10c>)
    1870:	4298      	cmp	r0, r3
    1872:	d05a      	beq.n	192a <_sercom_get_default_pad+0xca>
    1874:	4b3e      	ldr	r3, [pc, #248]	; (1970 <_sercom_get_default_pad+0x110>)
    1876:	4298      	cmp	r0, r3
    1878:	d037      	beq.n	18ea <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    187a:	2000      	movs	r0, #0
}
    187c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    187e:	4b3d      	ldr	r3, [pc, #244]	; (1974 <_sercom_get_default_pad+0x114>)
    1880:	4298      	cmp	r0, r3
    1882:	d00c      	beq.n	189e <_sercom_get_default_pad+0x3e>
    1884:	4b3c      	ldr	r3, [pc, #240]	; (1978 <_sercom_get_default_pad+0x118>)
    1886:	4298      	cmp	r0, r3
    1888:	d1f7      	bne.n	187a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    188a:	2901      	cmp	r1, #1
    188c:	d017      	beq.n	18be <_sercom_get_default_pad+0x5e>
    188e:	2900      	cmp	r1, #0
    1890:	d05d      	beq.n	194e <_sercom_get_default_pad+0xee>
    1892:	2902      	cmp	r1, #2
    1894:	d015      	beq.n	18c2 <_sercom_get_default_pad+0x62>
    1896:	2903      	cmp	r1, #3
    1898:	d015      	beq.n	18c6 <_sercom_get_default_pad+0x66>
	return 0;
    189a:	2000      	movs	r0, #0
    189c:	e7ee      	b.n	187c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    189e:	2901      	cmp	r1, #1
    18a0:	d007      	beq.n	18b2 <_sercom_get_default_pad+0x52>
    18a2:	2900      	cmp	r1, #0
    18a4:	d051      	beq.n	194a <_sercom_get_default_pad+0xea>
    18a6:	2902      	cmp	r1, #2
    18a8:	d005      	beq.n	18b6 <_sercom_get_default_pad+0x56>
    18aa:	2903      	cmp	r1, #3
    18ac:	d005      	beq.n	18ba <_sercom_get_default_pad+0x5a>
	return 0;
    18ae:	2000      	movs	r0, #0
    18b0:	e7e4      	b.n	187c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18b2:	4832      	ldr	r0, [pc, #200]	; (197c <_sercom_get_default_pad+0x11c>)
    18b4:	e7e2      	b.n	187c <_sercom_get_default_pad+0x1c>
    18b6:	4832      	ldr	r0, [pc, #200]	; (1980 <_sercom_get_default_pad+0x120>)
    18b8:	e7e0      	b.n	187c <_sercom_get_default_pad+0x1c>
    18ba:	4832      	ldr	r0, [pc, #200]	; (1984 <_sercom_get_default_pad+0x124>)
    18bc:	e7de      	b.n	187c <_sercom_get_default_pad+0x1c>
    18be:	4832      	ldr	r0, [pc, #200]	; (1988 <_sercom_get_default_pad+0x128>)
    18c0:	e7dc      	b.n	187c <_sercom_get_default_pad+0x1c>
    18c2:	4832      	ldr	r0, [pc, #200]	; (198c <_sercom_get_default_pad+0x12c>)
    18c4:	e7da      	b.n	187c <_sercom_get_default_pad+0x1c>
    18c6:	4832      	ldr	r0, [pc, #200]	; (1990 <_sercom_get_default_pad+0x130>)
    18c8:	e7d8      	b.n	187c <_sercom_get_default_pad+0x1c>
    18ca:	2901      	cmp	r1, #1
    18cc:	d007      	beq.n	18de <_sercom_get_default_pad+0x7e>
    18ce:	2900      	cmp	r1, #0
    18d0:	d03f      	beq.n	1952 <_sercom_get_default_pad+0xf2>
    18d2:	2902      	cmp	r1, #2
    18d4:	d005      	beq.n	18e2 <_sercom_get_default_pad+0x82>
    18d6:	2903      	cmp	r1, #3
    18d8:	d005      	beq.n	18e6 <_sercom_get_default_pad+0x86>
	return 0;
    18da:	2000      	movs	r0, #0
    18dc:	e7ce      	b.n	187c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18de:	482d      	ldr	r0, [pc, #180]	; (1994 <_sercom_get_default_pad+0x134>)
    18e0:	e7cc      	b.n	187c <_sercom_get_default_pad+0x1c>
    18e2:	482d      	ldr	r0, [pc, #180]	; (1998 <_sercom_get_default_pad+0x138>)
    18e4:	e7ca      	b.n	187c <_sercom_get_default_pad+0x1c>
    18e6:	482d      	ldr	r0, [pc, #180]	; (199c <_sercom_get_default_pad+0x13c>)
    18e8:	e7c8      	b.n	187c <_sercom_get_default_pad+0x1c>
    18ea:	2901      	cmp	r1, #1
    18ec:	d007      	beq.n	18fe <_sercom_get_default_pad+0x9e>
    18ee:	2900      	cmp	r1, #0
    18f0:	d031      	beq.n	1956 <_sercom_get_default_pad+0xf6>
    18f2:	2902      	cmp	r1, #2
    18f4:	d005      	beq.n	1902 <_sercom_get_default_pad+0xa2>
    18f6:	2903      	cmp	r1, #3
    18f8:	d005      	beq.n	1906 <_sercom_get_default_pad+0xa6>
	return 0;
    18fa:	2000      	movs	r0, #0
    18fc:	e7be      	b.n	187c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18fe:	4828      	ldr	r0, [pc, #160]	; (19a0 <_sercom_get_default_pad+0x140>)
    1900:	e7bc      	b.n	187c <_sercom_get_default_pad+0x1c>
    1902:	4828      	ldr	r0, [pc, #160]	; (19a4 <_sercom_get_default_pad+0x144>)
    1904:	e7ba      	b.n	187c <_sercom_get_default_pad+0x1c>
    1906:	4828      	ldr	r0, [pc, #160]	; (19a8 <_sercom_get_default_pad+0x148>)
    1908:	e7b8      	b.n	187c <_sercom_get_default_pad+0x1c>
    190a:	2901      	cmp	r1, #1
    190c:	d007      	beq.n	191e <_sercom_get_default_pad+0xbe>
    190e:	2900      	cmp	r1, #0
    1910:	d023      	beq.n	195a <_sercom_get_default_pad+0xfa>
    1912:	2902      	cmp	r1, #2
    1914:	d005      	beq.n	1922 <_sercom_get_default_pad+0xc2>
    1916:	2903      	cmp	r1, #3
    1918:	d005      	beq.n	1926 <_sercom_get_default_pad+0xc6>
	return 0;
    191a:	2000      	movs	r0, #0
    191c:	e7ae      	b.n	187c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    191e:	4823      	ldr	r0, [pc, #140]	; (19ac <_sercom_get_default_pad+0x14c>)
    1920:	e7ac      	b.n	187c <_sercom_get_default_pad+0x1c>
    1922:	4823      	ldr	r0, [pc, #140]	; (19b0 <_sercom_get_default_pad+0x150>)
    1924:	e7aa      	b.n	187c <_sercom_get_default_pad+0x1c>
    1926:	4823      	ldr	r0, [pc, #140]	; (19b4 <_sercom_get_default_pad+0x154>)
    1928:	e7a8      	b.n	187c <_sercom_get_default_pad+0x1c>
    192a:	2901      	cmp	r1, #1
    192c:	d007      	beq.n	193e <_sercom_get_default_pad+0xde>
    192e:	2900      	cmp	r1, #0
    1930:	d015      	beq.n	195e <_sercom_get_default_pad+0xfe>
    1932:	2902      	cmp	r1, #2
    1934:	d005      	beq.n	1942 <_sercom_get_default_pad+0xe2>
    1936:	2903      	cmp	r1, #3
    1938:	d005      	beq.n	1946 <_sercom_get_default_pad+0xe6>
	return 0;
    193a:	2000      	movs	r0, #0
    193c:	e79e      	b.n	187c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    193e:	481e      	ldr	r0, [pc, #120]	; (19b8 <_sercom_get_default_pad+0x158>)
    1940:	e79c      	b.n	187c <_sercom_get_default_pad+0x1c>
    1942:	481e      	ldr	r0, [pc, #120]	; (19bc <_sercom_get_default_pad+0x15c>)
    1944:	e79a      	b.n	187c <_sercom_get_default_pad+0x1c>
    1946:	481e      	ldr	r0, [pc, #120]	; (19c0 <_sercom_get_default_pad+0x160>)
    1948:	e798      	b.n	187c <_sercom_get_default_pad+0x1c>
    194a:	481e      	ldr	r0, [pc, #120]	; (19c4 <_sercom_get_default_pad+0x164>)
    194c:	e796      	b.n	187c <_sercom_get_default_pad+0x1c>
    194e:	2003      	movs	r0, #3
    1950:	e794      	b.n	187c <_sercom_get_default_pad+0x1c>
    1952:	481d      	ldr	r0, [pc, #116]	; (19c8 <_sercom_get_default_pad+0x168>)
    1954:	e792      	b.n	187c <_sercom_get_default_pad+0x1c>
    1956:	481d      	ldr	r0, [pc, #116]	; (19cc <_sercom_get_default_pad+0x16c>)
    1958:	e790      	b.n	187c <_sercom_get_default_pad+0x1c>
    195a:	481d      	ldr	r0, [pc, #116]	; (19d0 <_sercom_get_default_pad+0x170>)
    195c:	e78e      	b.n	187c <_sercom_get_default_pad+0x1c>
    195e:	481d      	ldr	r0, [pc, #116]	; (19d4 <_sercom_get_default_pad+0x174>)
    1960:	e78c      	b.n	187c <_sercom_get_default_pad+0x1c>
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	42001000 	.word	0x42001000
    1968:	42001800 	.word	0x42001800
    196c:	42001c00 	.word	0x42001c00
    1970:	42001400 	.word	0x42001400
    1974:	42000800 	.word	0x42000800
    1978:	42000c00 	.word	0x42000c00
    197c:	00050003 	.word	0x00050003
    1980:	00060003 	.word	0x00060003
    1984:	00070003 	.word	0x00070003
    1988:	00010003 	.word	0x00010003
    198c:	001e0003 	.word	0x001e0003
    1990:	001f0003 	.word	0x001f0003
    1994:	00090003 	.word	0x00090003
    1998:	000a0003 	.word	0x000a0003
    199c:	000b0003 	.word	0x000b0003
    19a0:	00110003 	.word	0x00110003
    19a4:	00120003 	.word	0x00120003
    19a8:	00130003 	.word	0x00130003
    19ac:	000d0003 	.word	0x000d0003
    19b0:	000e0003 	.word	0x000e0003
    19b4:	000f0003 	.word	0x000f0003
    19b8:	00170003 	.word	0x00170003
    19bc:	00180003 	.word	0x00180003
    19c0:	00190003 	.word	0x00190003
    19c4:	00040003 	.word	0x00040003
    19c8:	00080003 	.word	0x00080003
    19cc:	00100003 	.word	0x00100003
    19d0:	000c0003 	.word	0x000c0003
    19d4:	00160003 	.word	0x00160003

000019d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    19d8:	b530      	push	{r4, r5, lr}
    19da:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    19dc:	4b0b      	ldr	r3, [pc, #44]	; (1a0c <_sercom_get_sercom_inst_index+0x34>)
    19de:	466a      	mov	r2, sp
    19e0:	cb32      	ldmia	r3!, {r1, r4, r5}
    19e2:	c232      	stmia	r2!, {r1, r4, r5}
    19e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    19e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    19e8:	9b00      	ldr	r3, [sp, #0]
    19ea:	4283      	cmp	r3, r0
    19ec:	d00b      	beq.n	1a06 <_sercom_get_sercom_inst_index+0x2e>
    19ee:	2301      	movs	r3, #1
    19f0:	009a      	lsls	r2, r3, #2
    19f2:	4669      	mov	r1, sp
    19f4:	5852      	ldr	r2, [r2, r1]
    19f6:	4282      	cmp	r2, r0
    19f8:	d006      	beq.n	1a08 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19fa:	3301      	adds	r3, #1
    19fc:	2b06      	cmp	r3, #6
    19fe:	d1f7      	bne.n	19f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1a00:	2000      	movs	r0, #0
}
    1a02:	b007      	add	sp, #28
    1a04:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a06:	2300      	movs	r3, #0
			return i;
    1a08:	b2d8      	uxtb	r0, r3
    1a0a:	e7fa      	b.n	1a02 <_sercom_get_sercom_inst_index+0x2a>
    1a0c:	00005250 	.word	0x00005250

00001a10 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1a10:	4770      	bx	lr
	...

00001a14 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1a14:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1a16:	4b0a      	ldr	r3, [pc, #40]	; (1a40 <_sercom_set_handler+0x2c>)
    1a18:	781b      	ldrb	r3, [r3, #0]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d10c      	bne.n	1a38 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a1e:	4f09      	ldr	r7, [pc, #36]	; (1a44 <_sercom_set_handler+0x30>)
    1a20:	4e09      	ldr	r6, [pc, #36]	; (1a48 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1a22:	4d0a      	ldr	r5, [pc, #40]	; (1a4c <_sercom_set_handler+0x38>)
    1a24:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a26:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1a28:	195a      	adds	r2, r3, r5
    1a2a:	6014      	str	r4, [r2, #0]
    1a2c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a2e:	2b18      	cmp	r3, #24
    1a30:	d1f9      	bne.n	1a26 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1a32:	2201      	movs	r2, #1
    1a34:	4b02      	ldr	r3, [pc, #8]	; (1a40 <_sercom_set_handler+0x2c>)
    1a36:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1a38:	0080      	lsls	r0, r0, #2
    1a3a:	4b02      	ldr	r3, [pc, #8]	; (1a44 <_sercom_set_handler+0x30>)
    1a3c:	50c1      	str	r1, [r0, r3]
}
    1a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a40:	200000a6 	.word	0x200000a6
    1a44:	200000a8 	.word	0x200000a8
    1a48:	00001a11 	.word	0x00001a11
    1a4c:	200005ec 	.word	0x200005ec

00001a50 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1a50:	b500      	push	{lr}
    1a52:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1a54:	2309      	movs	r3, #9
    1a56:	466a      	mov	r2, sp
    1a58:	7013      	strb	r3, [r2, #0]
    1a5a:	3301      	adds	r3, #1
    1a5c:	7053      	strb	r3, [r2, #1]
    1a5e:	3301      	adds	r3, #1
    1a60:	7093      	strb	r3, [r2, #2]
    1a62:	3301      	adds	r3, #1
    1a64:	70d3      	strb	r3, [r2, #3]
    1a66:	3301      	adds	r3, #1
    1a68:	7113      	strb	r3, [r2, #4]
    1a6a:	3301      	adds	r3, #1
    1a6c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1a6e:	4b03      	ldr	r3, [pc, #12]	; (1a7c <_sercom_get_interrupt_vector+0x2c>)
    1a70:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1a72:	466b      	mov	r3, sp
    1a74:	5618      	ldrsb	r0, [r3, r0]
}
    1a76:	b003      	add	sp, #12
    1a78:	bd00      	pop	{pc}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	000019d9 	.word	0x000019d9

00001a80 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1a80:	b510      	push	{r4, lr}
    1a82:	4b02      	ldr	r3, [pc, #8]	; (1a8c <SERCOM0_Handler+0xc>)
    1a84:	681b      	ldr	r3, [r3, #0]
    1a86:	2000      	movs	r0, #0
    1a88:	4798      	blx	r3
    1a8a:	bd10      	pop	{r4, pc}
    1a8c:	200000a8 	.word	0x200000a8

00001a90 <SERCOM1_Handler>:
    1a90:	b510      	push	{r4, lr}
    1a92:	4b02      	ldr	r3, [pc, #8]	; (1a9c <SERCOM1_Handler+0xc>)
    1a94:	685b      	ldr	r3, [r3, #4]
    1a96:	2001      	movs	r0, #1
    1a98:	4798      	blx	r3
    1a9a:	bd10      	pop	{r4, pc}
    1a9c:	200000a8 	.word	0x200000a8

00001aa0 <SERCOM2_Handler>:
    1aa0:	b510      	push	{r4, lr}
    1aa2:	4b02      	ldr	r3, [pc, #8]	; (1aac <SERCOM2_Handler+0xc>)
    1aa4:	689b      	ldr	r3, [r3, #8]
    1aa6:	2002      	movs	r0, #2
    1aa8:	4798      	blx	r3
    1aaa:	bd10      	pop	{r4, pc}
    1aac:	200000a8 	.word	0x200000a8

00001ab0 <SERCOM3_Handler>:
    1ab0:	b510      	push	{r4, lr}
    1ab2:	4b02      	ldr	r3, [pc, #8]	; (1abc <SERCOM3_Handler+0xc>)
    1ab4:	68db      	ldr	r3, [r3, #12]
    1ab6:	2003      	movs	r0, #3
    1ab8:	4798      	blx	r3
    1aba:	bd10      	pop	{r4, pc}
    1abc:	200000a8 	.word	0x200000a8

00001ac0 <SERCOM4_Handler>:
    1ac0:	b510      	push	{r4, lr}
    1ac2:	4b02      	ldr	r3, [pc, #8]	; (1acc <SERCOM4_Handler+0xc>)
    1ac4:	691b      	ldr	r3, [r3, #16]
    1ac6:	2004      	movs	r0, #4
    1ac8:	4798      	blx	r3
    1aca:	bd10      	pop	{r4, pc}
    1acc:	200000a8 	.word	0x200000a8

00001ad0 <SERCOM5_Handler>:
    1ad0:	b510      	push	{r4, lr}
    1ad2:	4b02      	ldr	r3, [pc, #8]	; (1adc <SERCOM5_Handler+0xc>)
    1ad4:	695b      	ldr	r3, [r3, #20]
    1ad6:	2005      	movs	r0, #5
    1ad8:	4798      	blx	r3
    1ada:	bd10      	pop	{r4, pc}
    1adc:	200000a8 	.word	0x200000a8

00001ae0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ae2:	b08b      	sub	sp, #44	; 0x2c
    1ae4:	0005      	movs	r5, r0
    1ae6:	000c      	movs	r4, r1
    1ae8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1aea:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1aec:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1aee:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1af0:	079b      	lsls	r3, r3, #30
    1af2:	d501      	bpl.n	1af8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1af4:	b00b      	add	sp, #44	; 0x2c
    1af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1af8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1afa:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1afc:	07db      	lsls	r3, r3, #31
    1afe:	d4f9      	bmi.n	1af4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1b00:	0008      	movs	r0, r1
    1b02:	4b60      	ldr	r3, [pc, #384]	; (1c84 <spi_init+0x1a4>)
    1b04:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1b06:	4a60      	ldr	r2, [pc, #384]	; (1c88 <spi_init+0x1a8>)
    1b08:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1b0a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1b0c:	2301      	movs	r3, #1
    1b0e:	40bb      	lsls	r3, r7
    1b10:	430b      	orrs	r3, r1
    1b12:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1b14:	a909      	add	r1, sp, #36	; 0x24
    1b16:	2724      	movs	r7, #36	; 0x24
    1b18:	5df3      	ldrb	r3, [r6, r7]
    1b1a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b1c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1b1e:	b2c3      	uxtb	r3, r0
    1b20:	9301      	str	r3, [sp, #4]
    1b22:	0018      	movs	r0, r3
    1b24:	4b59      	ldr	r3, [pc, #356]	; (1c8c <spi_init+0x1ac>)
    1b26:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1b28:	9801      	ldr	r0, [sp, #4]
    1b2a:	4b59      	ldr	r3, [pc, #356]	; (1c90 <spi_init+0x1b0>)
    1b2c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1b2e:	5df0      	ldrb	r0, [r6, r7]
    1b30:	2100      	movs	r1, #0
    1b32:	4b58      	ldr	r3, [pc, #352]	; (1c94 <spi_init+0x1b4>)
    1b34:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1b36:	7833      	ldrb	r3, [r6, #0]
    1b38:	2b01      	cmp	r3, #1
    1b3a:	d038      	beq.n	1bae <spi_init+0xce>
    1b3c:	002b      	movs	r3, r5
    1b3e:	330c      	adds	r3, #12
    1b40:	0029      	movs	r1, r5
    1b42:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1b44:	2200      	movs	r2, #0
    1b46:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1b48:	428b      	cmp	r3, r1
    1b4a:	d1fc      	bne.n	1b46 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    1b4c:	2300      	movs	r3, #0
    1b4e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1b50:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1b52:	2400      	movs	r4, #0
    1b54:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1b56:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1b58:	3336      	adds	r3, #54	; 0x36
    1b5a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1b5c:	3301      	adds	r3, #1
    1b5e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1b60:	3301      	adds	r3, #1
    1b62:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1b64:	3b35      	subs	r3, #53	; 0x35
    1b66:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1b68:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1b6a:	6828      	ldr	r0, [r5, #0]
    1b6c:	4b45      	ldr	r3, [pc, #276]	; (1c84 <spi_init+0x1a4>)
    1b6e:	4798      	blx	r3
    1b70:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1b72:	4949      	ldr	r1, [pc, #292]	; (1c98 <spi_init+0x1b8>)
    1b74:	4b49      	ldr	r3, [pc, #292]	; (1c9c <spi_init+0x1bc>)
    1b76:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1b78:	00bf      	lsls	r7, r7, #2
    1b7a:	4b49      	ldr	r3, [pc, #292]	; (1ca0 <spi_init+0x1c0>)
    1b7c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b7e:	682f      	ldr	r7, [r5, #0]
    1b80:	ab04      	add	r3, sp, #16
    1b82:	2280      	movs	r2, #128	; 0x80
    1b84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b86:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b88:	3a7f      	subs	r2, #127	; 0x7f
    1b8a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1b8c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1b8e:	7833      	ldrb	r3, [r6, #0]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d102      	bne.n	1b9a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b94:	2200      	movs	r2, #0
    1b96:	ab04      	add	r3, sp, #16
    1b98:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1b9a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b9c:	9305      	str	r3, [sp, #20]
    1b9e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1ba0:	9306      	str	r3, [sp, #24]
    1ba2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1ba4:	9307      	str	r3, [sp, #28]
    1ba6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1ba8:	9308      	str	r3, [sp, #32]
    1baa:	2400      	movs	r4, #0
    1bac:	e00b      	b.n	1bc6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1bae:	6823      	ldr	r3, [r4, #0]
    1bb0:	220c      	movs	r2, #12
    1bb2:	4313      	orrs	r3, r2
    1bb4:	6023      	str	r3, [r4, #0]
    1bb6:	e7c1      	b.n	1b3c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1bb8:	0038      	movs	r0, r7
    1bba:	4b3a      	ldr	r3, [pc, #232]	; (1ca4 <spi_init+0x1c4>)
    1bbc:	4798      	blx	r3
    1bbe:	e00a      	b.n	1bd6 <spi_init+0xf6>
    1bc0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1bc2:	2c04      	cmp	r4, #4
    1bc4:	d010      	beq.n	1be8 <spi_init+0x108>
    1bc6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1bc8:	00a3      	lsls	r3, r4, #2
    1bca:	aa02      	add	r2, sp, #8
    1bcc:	200c      	movs	r0, #12
    1bce:	1812      	adds	r2, r2, r0
    1bd0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d0f0      	beq.n	1bb8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    1bd6:	1c43      	adds	r3, r0, #1
    1bd8:	d0f2      	beq.n	1bc0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1bda:	a904      	add	r1, sp, #16
    1bdc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1bde:	0c00      	lsrs	r0, r0, #16
    1be0:	b2c0      	uxtb	r0, r0
    1be2:	4b31      	ldr	r3, [pc, #196]	; (1ca8 <spi_init+0x1c8>)
    1be4:	4798      	blx	r3
    1be6:	e7eb      	b.n	1bc0 <spi_init+0xe0>
	module->mode             = config->mode;
    1be8:	7833      	ldrb	r3, [r6, #0]
    1bea:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1bec:	7c33      	ldrb	r3, [r6, #16]
    1bee:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1bf0:	7cb3      	ldrb	r3, [r6, #18]
    1bf2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1bf4:	7d33      	ldrb	r3, [r6, #20]
    1bf6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1bf8:	2200      	movs	r2, #0
    1bfa:	ab02      	add	r3, sp, #8
    1bfc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1bfe:	7833      	ldrb	r3, [r6, #0]
    1c00:	2b01      	cmp	r3, #1
    1c02:	d028      	beq.n	1c56 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    1c04:	6873      	ldr	r3, [r6, #4]
    1c06:	68b2      	ldr	r2, [r6, #8]
    1c08:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1c0a:	68f2      	ldr	r2, [r6, #12]
    1c0c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1c0e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1c10:	7c72      	ldrb	r2, [r6, #17]
    1c12:	2a00      	cmp	r2, #0
    1c14:	d103      	bne.n	1c1e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1c16:	4a25      	ldr	r2, [pc, #148]	; (1cac <spi_init+0x1cc>)
    1c18:	7892      	ldrb	r2, [r2, #2]
    1c1a:	0792      	lsls	r2, r2, #30
    1c1c:	d501      	bpl.n	1c22 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1c1e:	2280      	movs	r2, #128	; 0x80
    1c20:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1c22:	7cb2      	ldrb	r2, [r6, #18]
    1c24:	2a00      	cmp	r2, #0
    1c26:	d002      	beq.n	1c2e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1c28:	2280      	movs	r2, #128	; 0x80
    1c2a:	0292      	lsls	r2, r2, #10
    1c2c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1c2e:	7cf2      	ldrb	r2, [r6, #19]
    1c30:	2a00      	cmp	r2, #0
    1c32:	d002      	beq.n	1c3a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1c34:	2280      	movs	r2, #128	; 0x80
    1c36:	0092      	lsls	r2, r2, #2
    1c38:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1c3a:	7d32      	ldrb	r2, [r6, #20]
    1c3c:	2a00      	cmp	r2, #0
    1c3e:	d002      	beq.n	1c46 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1c40:	2280      	movs	r2, #128	; 0x80
    1c42:	0192      	lsls	r2, r2, #6
    1c44:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1c46:	683a      	ldr	r2, [r7, #0]
    1c48:	4313      	orrs	r3, r2
    1c4a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	430b      	orrs	r3, r1
    1c50:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    1c52:	2000      	movs	r0, #0
    1c54:	e74e      	b.n	1af4 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1c56:	6828      	ldr	r0, [r5, #0]
    1c58:	4b0a      	ldr	r3, [pc, #40]	; (1c84 <spi_init+0x1a4>)
    1c5a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1c5c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1c5e:	b2c0      	uxtb	r0, r0
    1c60:	4b13      	ldr	r3, [pc, #76]	; (1cb0 <spi_init+0x1d0>)
    1c62:	4798      	blx	r3
    1c64:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1c66:	ab02      	add	r3, sp, #8
    1c68:	1d9a      	adds	r2, r3, #6
    1c6a:	69b0      	ldr	r0, [r6, #24]
    1c6c:	4b11      	ldr	r3, [pc, #68]	; (1cb4 <spi_init+0x1d4>)
    1c6e:	4798      	blx	r3
    1c70:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1c72:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1c74:	2b00      	cmp	r3, #0
    1c76:	d000      	beq.n	1c7a <spi_init+0x19a>
    1c78:	e73c      	b.n	1af4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    1c7a:	ab02      	add	r3, sp, #8
    1c7c:	3306      	adds	r3, #6
    1c7e:	781b      	ldrb	r3, [r3, #0]
    1c80:	733b      	strb	r3, [r7, #12]
    1c82:	e7bf      	b.n	1c04 <spi_init+0x124>
    1c84:	000019d9 	.word	0x000019d9
    1c88:	40000400 	.word	0x40000400
    1c8c:	00002ce9 	.word	0x00002ce9
    1c90:	00002c5d 	.word	0x00002c5d
    1c94:	00001815 	.word	0x00001815
    1c98:	00001dad 	.word	0x00001dad
    1c9c:	00001a15 	.word	0x00001a15
    1ca0:	200005ec 	.word	0x200005ec
    1ca4:	00001861 	.word	0x00001861
    1ca8:	00002de1 	.word	0x00002de1
    1cac:	41002000 	.word	0x41002000
    1cb0:	00002d05 	.word	0x00002d05
    1cb4:	00001757 	.word	0x00001757

00001cb8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1cb8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1cba:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1cbc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1cbe:	2c01      	cmp	r4, #1
    1cc0:	d001      	beq.n	1cc6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1cc2:	0018      	movs	r0, r3
    1cc4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1cc6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1cc8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1cca:	2c00      	cmp	r4, #0
    1ccc:	d1f9      	bne.n	1cc2 <spi_select_slave+0xa>
		if (select) {
    1cce:	2a00      	cmp	r2, #0
    1cd0:	d058      	beq.n	1d84 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1cd2:	784b      	ldrb	r3, [r1, #1]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d044      	beq.n	1d62 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1cd8:	6803      	ldr	r3, [r0, #0]
    1cda:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1cdc:	07db      	lsls	r3, r3, #31
    1cde:	d410      	bmi.n	1d02 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1ce0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1ce2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1ce4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1ce6:	2900      	cmp	r1, #0
    1ce8:	d104      	bne.n	1cf4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1cea:	0953      	lsrs	r3, r2, #5
    1cec:	01db      	lsls	r3, r3, #7
    1cee:	492e      	ldr	r1, [pc, #184]	; (1da8 <spi_select_slave+0xf0>)
    1cf0:	468c      	mov	ip, r1
    1cf2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1cf4:	211f      	movs	r1, #31
    1cf6:	4011      	ands	r1, r2
    1cf8:	2201      	movs	r2, #1
    1cfa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1cfc:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1cfe:	2305      	movs	r3, #5
    1d00:	e7df      	b.n	1cc2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1d02:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1d04:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1d06:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d08:	2c00      	cmp	r4, #0
    1d0a:	d104      	bne.n	1d16 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1d0c:	0953      	lsrs	r3, r2, #5
    1d0e:	01db      	lsls	r3, r3, #7
    1d10:	4c25      	ldr	r4, [pc, #148]	; (1da8 <spi_select_slave+0xf0>)
    1d12:	46a4      	mov	ip, r4
    1d14:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d16:	241f      	movs	r4, #31
    1d18:	4014      	ands	r4, r2
    1d1a:	2201      	movs	r2, #1
    1d1c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    1d1e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d20:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1d22:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1d24:	07d2      	lsls	r2, r2, #31
    1d26:	d501      	bpl.n	1d2c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1d28:	788a      	ldrb	r2, [r1, #2]
    1d2a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1d2c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1d2e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1d30:	2a00      	cmp	r2, #0
    1d32:	d1c6      	bne.n	1cc2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d34:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1d36:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1d38:	7e13      	ldrb	r3, [r2, #24]
    1d3a:	420b      	tst	r3, r1
    1d3c:	d0fc      	beq.n	1d38 <spi_select_slave+0x80>
    1d3e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1d40:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    1d42:	0749      	lsls	r1, r1, #29
    1d44:	d5bd      	bpl.n	1cc2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1d46:	8b53      	ldrh	r3, [r2, #26]
    1d48:	075b      	lsls	r3, r3, #29
    1d4a:	d501      	bpl.n	1d50 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d4c:	2304      	movs	r3, #4
    1d4e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d50:	7983      	ldrb	r3, [r0, #6]
    1d52:	2b01      	cmp	r3, #1
    1d54:	d002      	beq.n	1d5c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1d56:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d58:	2300      	movs	r3, #0
    1d5a:	e7b2      	b.n	1cc2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d5e:	2300      	movs	r3, #0
    1d60:	e7af      	b.n	1cc2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1d62:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1d64:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1d66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d68:	2900      	cmp	r1, #0
    1d6a:	d104      	bne.n	1d76 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1d6c:	0953      	lsrs	r3, r2, #5
    1d6e:	01db      	lsls	r3, r3, #7
    1d70:	490d      	ldr	r1, [pc, #52]	; (1da8 <spi_select_slave+0xf0>)
    1d72:	468c      	mov	ip, r1
    1d74:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d76:	211f      	movs	r1, #31
    1d78:	4011      	ands	r1, r2
    1d7a:	2201      	movs	r2, #1
    1d7c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1d7e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1d80:	2300      	movs	r3, #0
    1d82:	e79e      	b.n	1cc2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1d84:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1d86:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1d88:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d8a:	2900      	cmp	r1, #0
    1d8c:	d104      	bne.n	1d98 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1d8e:	0953      	lsrs	r3, r2, #5
    1d90:	01db      	lsls	r3, r3, #7
    1d92:	4905      	ldr	r1, [pc, #20]	; (1da8 <spi_select_slave+0xf0>)
    1d94:	468c      	mov	ip, r1
    1d96:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d98:	211f      	movs	r1, #31
    1d9a:	4011      	ands	r1, r2
    1d9c:	2201      	movs	r2, #1
    1d9e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1da0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1da2:	2300      	movs	r3, #0
    1da4:	e78d      	b.n	1cc2 <spi_select_slave+0xa>
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	41004400 	.word	0x41004400

00001dac <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1dae:	0080      	lsls	r0, r0, #2
    1db0:	4b70      	ldr	r3, [pc, #448]	; (1f74 <_spi_interrupt_handler+0x1c8>)
    1db2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1db4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1db6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1db8:	5ce7      	ldrb	r7, [r4, r3]
    1dba:	2236      	movs	r2, #54	; 0x36
    1dbc:	5ca2      	ldrb	r2, [r4, r2]
    1dbe:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1dc0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1dc2:	7db5      	ldrb	r5, [r6, #22]
    1dc4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1dc6:	07eb      	lsls	r3, r5, #31
    1dc8:	d502      	bpl.n	1dd0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1dca:	7963      	ldrb	r3, [r4, #5]
    1dcc:	2b01      	cmp	r3, #1
    1dce:	d01e      	beq.n	1e0e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1dd0:	076b      	lsls	r3, r5, #29
    1dd2:	d511      	bpl.n	1df8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1dd4:	8b73      	ldrh	r3, [r6, #26]
    1dd6:	075b      	lsls	r3, r3, #29
    1dd8:	d55a      	bpl.n	1e90 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1dda:	7a63      	ldrb	r3, [r4, #9]
    1ddc:	2b01      	cmp	r3, #1
    1dde:	d008      	beq.n	1df2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1de0:	221e      	movs	r2, #30
    1de2:	2338      	movs	r3, #56	; 0x38
    1de4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1de6:	3b35      	subs	r3, #53	; 0x35
    1de8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1dea:	3302      	adds	r3, #2
    1dec:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1dee:	073b      	lsls	r3, r7, #28
    1df0:	d44a      	bmi.n	1e88 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1df2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1df4:	2304      	movs	r3, #4
    1df6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1df8:	07ab      	lsls	r3, r5, #30
    1dfa:	d503      	bpl.n	1e04 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1dfc:	7963      	ldrb	r3, [r4, #5]
    1dfe:	2b01      	cmp	r3, #1
    1e00:	d100      	bne.n	1e04 <_spi_interrupt_handler+0x58>
    1e02:	e097      	b.n	1f34 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1e04:	b26d      	sxtb	r5, r5
    1e06:	2d00      	cmp	r5, #0
    1e08:	da00      	bge.n	1e0c <_spi_interrupt_handler+0x60>
    1e0a:	e0a9      	b.n	1f60 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1e0e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1e10:	2b00      	cmp	r3, #0
    1e12:	d022      	beq.n	1e5a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    1e14:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1e16:	2b00      	cmp	r3, #0
    1e18:	d0da      	beq.n	1dd0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1e1a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1e1e:	7813      	ldrb	r3, [r2, #0]
    1e20:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1e22:	1c50      	adds	r0, r2, #1
    1e24:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1e26:	79a0      	ldrb	r0, [r4, #6]
    1e28:	2801      	cmp	r0, #1
    1e2a:	d027      	beq.n	1e7c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e2c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1e2e:	05db      	lsls	r3, r3, #23
    1e30:	0ddb      	lsrs	r3, r3, #23
    1e32:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    1e34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1e36:	3b01      	subs	r3, #1
    1e38:	b29b      	uxth	r3, r3
    1e3a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    1e3c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1e3e:	b29b      	uxth	r3, r3
    1e40:	2b00      	cmp	r3, #0
    1e42:	d1c5      	bne.n	1dd0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1e44:	3301      	adds	r3, #1
    1e46:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1e48:	7a63      	ldrb	r3, [r4, #9]
    1e4a:	2b01      	cmp	r3, #1
    1e4c:	d1c0      	bne.n	1dd0 <_spi_interrupt_handler+0x24>
    1e4e:	79e3      	ldrb	r3, [r4, #7]
    1e50:	2b00      	cmp	r3, #0
    1e52:	d1bd      	bne.n	1dd0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1e54:	3302      	adds	r3, #2
    1e56:	75b3      	strb	r3, [r6, #22]
    1e58:	e7ba      	b.n	1dd0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    1e5a:	4b47      	ldr	r3, [pc, #284]	; (1f78 <_spi_interrupt_handler+0x1cc>)
    1e5c:	881b      	ldrh	r3, [r3, #0]
    1e5e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1e60:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1e62:	3b01      	subs	r3, #1
    1e64:	b29b      	uxth	r3, r3
    1e66:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1e68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1e6a:	b29b      	uxth	r3, r3
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d101      	bne.n	1e74 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1e70:	3301      	adds	r3, #1
    1e72:	7533      	strb	r3, [r6, #20]
		if (0
    1e74:	7963      	ldrb	r3, [r4, #5]
    1e76:	2b01      	cmp	r3, #1
    1e78:	d0cc      	beq.n	1e14 <_spi_interrupt_handler+0x68>
    1e7a:	e7a9      	b.n	1dd0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1e7c:	7850      	ldrb	r0, [r2, #1]
    1e7e:	0200      	lsls	r0, r0, #8
    1e80:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1e82:	3202      	adds	r2, #2
    1e84:	62e2      	str	r2, [r4, #44]	; 0x2c
    1e86:	e7d2      	b.n	1e2e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1e88:	0020      	movs	r0, r4
    1e8a:	69a3      	ldr	r3, [r4, #24]
    1e8c:	4798      	blx	r3
    1e8e:	e7b0      	b.n	1df2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1e90:	7a63      	ldrb	r3, [r4, #9]
    1e92:	2b01      	cmp	r3, #1
    1e94:	d028      	beq.n	1ee8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1e96:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e9a:	05db      	lsls	r3, r3, #23
    1e9c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1e9e:	b2da      	uxtb	r2, r3
    1ea0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1ea2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1ea4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ea6:	1c51      	adds	r1, r2, #1
    1ea8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1eaa:	79a1      	ldrb	r1, [r4, #6]
    1eac:	2901      	cmp	r1, #1
    1eae:	d034      	beq.n	1f1a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    1eb0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1eb2:	3b01      	subs	r3, #1
    1eb4:	b29b      	uxth	r3, r3
    1eb6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1eb8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1eba:	b29b      	uxth	r3, r3
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d000      	beq.n	1ec2 <_spi_interrupt_handler+0x116>
    1ec0:	e79a      	b.n	1df8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    1ec2:	2200      	movs	r2, #0
    1ec4:	3338      	adds	r3, #56	; 0x38
    1ec6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1ec8:	3b34      	subs	r3, #52	; 0x34
    1eca:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1ecc:	7a63      	ldrb	r3, [r4, #9]
    1ece:	2b02      	cmp	r3, #2
    1ed0:	d029      	beq.n	1f26 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1ed2:	7a63      	ldrb	r3, [r4, #9]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d000      	beq.n	1eda <_spi_interrupt_handler+0x12e>
    1ed8:	e78e      	b.n	1df8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1eda:	07bb      	lsls	r3, r7, #30
    1edc:	d400      	bmi.n	1ee0 <_spi_interrupt_handler+0x134>
    1ede:	e78b      	b.n	1df8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1ee0:	0020      	movs	r0, r4
    1ee2:	6923      	ldr	r3, [r4, #16]
    1ee4:	4798      	blx	r3
    1ee6:	e787      	b.n	1df8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1ee8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1eec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1eee:	3b01      	subs	r3, #1
    1ef0:	b29b      	uxth	r3, r3
    1ef2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1ef4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1ef6:	b29b      	uxth	r3, r3
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d000      	beq.n	1efe <_spi_interrupt_handler+0x152>
    1efc:	e77c      	b.n	1df8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1efe:	3304      	adds	r3, #4
    1f00:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1f02:	2200      	movs	r2, #0
    1f04:	3334      	adds	r3, #52	; 0x34
    1f06:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1f08:	3b35      	subs	r3, #53	; 0x35
    1f0a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1f0c:	07fb      	lsls	r3, r7, #31
    1f0e:	d400      	bmi.n	1f12 <_spi_interrupt_handler+0x166>
    1f10:	e772      	b.n	1df8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1f12:	0020      	movs	r0, r4
    1f14:	68e3      	ldr	r3, [r4, #12]
    1f16:	4798      	blx	r3
    1f18:	e76e      	b.n	1df8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1f1a:	0a1b      	lsrs	r3, r3, #8
    1f1c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f20:	3301      	adds	r3, #1
    1f22:	62a3      	str	r3, [r4, #40]	; 0x28
    1f24:	e7c4      	b.n	1eb0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1f26:	077b      	lsls	r3, r7, #29
    1f28:	d400      	bmi.n	1f2c <_spi_interrupt_handler+0x180>
    1f2a:	e765      	b.n	1df8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1f2c:	0020      	movs	r0, r4
    1f2e:	6963      	ldr	r3, [r4, #20]
    1f30:	4798      	blx	r3
    1f32:	e761      	b.n	1df8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1f34:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1f36:	2b01      	cmp	r3, #1
    1f38:	d000      	beq.n	1f3c <_spi_interrupt_handler+0x190>
    1f3a:	e763      	b.n	1e04 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1f3c:	79e3      	ldrb	r3, [r4, #7]
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d000      	beq.n	1f44 <_spi_interrupt_handler+0x198>
    1f42:	e75f      	b.n	1e04 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1f44:	3302      	adds	r3, #2
    1f46:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1f48:	3301      	adds	r3, #1
    1f4a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1f4c:	2200      	movs	r2, #0
    1f4e:	3335      	adds	r3, #53	; 0x35
    1f50:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1f52:	07fb      	lsls	r3, r7, #31
    1f54:	d400      	bmi.n	1f58 <_spi_interrupt_handler+0x1ac>
    1f56:	e755      	b.n	1e04 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1f58:	0020      	movs	r0, r4
    1f5a:	68e3      	ldr	r3, [r4, #12]
    1f5c:	4798      	blx	r3
    1f5e:	e751      	b.n	1e04 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1f60:	2380      	movs	r3, #128	; 0x80
    1f62:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1f64:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1f66:	067b      	lsls	r3, r7, #25
    1f68:	d400      	bmi.n	1f6c <_spi_interrupt_handler+0x1c0>
    1f6a:	e74f      	b.n	1e0c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f6e:	0020      	movs	r0, r4
    1f70:	4798      	blx	r3
}
    1f72:	e74b      	b.n	1e0c <_spi_interrupt_handler+0x60>
    1f74:	200005ec 	.word	0x200005ec
    1f78:	20000604 	.word	0x20000604

00001f7c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7e:	46de      	mov	lr, fp
    1f80:	4657      	mov	r7, sl
    1f82:	464e      	mov	r6, r9
    1f84:	4645      	mov	r5, r8
    1f86:	b5e0      	push	{r5, r6, r7, lr}
    1f88:	b091      	sub	sp, #68	; 0x44
    1f8a:	0005      	movs	r5, r0
    1f8c:	000c      	movs	r4, r1
    1f8e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1f90:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f92:	0008      	movs	r0, r1
    1f94:	4bba      	ldr	r3, [pc, #744]	; (2280 <STACK_SIZE+0x280>)
    1f96:	4798      	blx	r3
    1f98:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f9a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1f9c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f9e:	07db      	lsls	r3, r3, #31
    1fa0:	d506      	bpl.n	1fb0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1fa2:	b011      	add	sp, #68	; 0x44
    1fa4:	bc3c      	pop	{r2, r3, r4, r5}
    1fa6:	4690      	mov	r8, r2
    1fa8:	4699      	mov	r9, r3
    1faa:	46a2      	mov	sl, r4
    1fac:	46ab      	mov	fp, r5
    1fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1fb0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1fb2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1fb4:	079b      	lsls	r3, r3, #30
    1fb6:	d4f4      	bmi.n	1fa2 <usart_init+0x26>
    1fb8:	49b2      	ldr	r1, [pc, #712]	; (2284 <STACK_SIZE+0x284>)
    1fba:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1fbc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1fbe:	2301      	movs	r3, #1
    1fc0:	40bb      	lsls	r3, r7
    1fc2:	4303      	orrs	r3, r0
    1fc4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1fc6:	a90f      	add	r1, sp, #60	; 0x3c
    1fc8:	272d      	movs	r7, #45	; 0x2d
    1fca:	5df3      	ldrb	r3, [r6, r7]
    1fcc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fce:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1fd0:	b2d3      	uxtb	r3, r2
    1fd2:	9302      	str	r3, [sp, #8]
    1fd4:	0018      	movs	r0, r3
    1fd6:	4bac      	ldr	r3, [pc, #688]	; (2288 <STACK_SIZE+0x288>)
    1fd8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1fda:	9802      	ldr	r0, [sp, #8]
    1fdc:	4bab      	ldr	r3, [pc, #684]	; (228c <STACK_SIZE+0x28c>)
    1fde:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1fe0:	5df0      	ldrb	r0, [r6, r7]
    1fe2:	2100      	movs	r1, #0
    1fe4:	4baa      	ldr	r3, [pc, #680]	; (2290 <STACK_SIZE+0x290>)
    1fe6:	4798      	blx	r3
	module->character_size = config->character_size;
    1fe8:	7af3      	ldrb	r3, [r6, #11]
    1fea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1fec:	2324      	movs	r3, #36	; 0x24
    1fee:	5cf3      	ldrb	r3, [r6, r3]
    1ff0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1ff2:	2325      	movs	r3, #37	; 0x25
    1ff4:	5cf3      	ldrb	r3, [r6, r3]
    1ff6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1ff8:	7ef3      	ldrb	r3, [r6, #27]
    1ffa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1ffc:	7f33      	ldrb	r3, [r6, #28]
    1ffe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2000:	682b      	ldr	r3, [r5, #0]
    2002:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2004:	0018      	movs	r0, r3
    2006:	4b9e      	ldr	r3, [pc, #632]	; (2280 <STACK_SIZE+0x280>)
    2008:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    200a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    200c:	2200      	movs	r2, #0
    200e:	230e      	movs	r3, #14
    2010:	a906      	add	r1, sp, #24
    2012:	468c      	mov	ip, r1
    2014:	4463      	add	r3, ip
    2016:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2018:	8a32      	ldrh	r2, [r6, #16]
    201a:	9202      	str	r2, [sp, #8]
    201c:	2380      	movs	r3, #128	; 0x80
    201e:	01db      	lsls	r3, r3, #7
    2020:	429a      	cmp	r2, r3
    2022:	d100      	bne.n	2026 <STACK_SIZE+0x26>
    2024:	e09a      	b.n	215c <STACK_SIZE+0x15c>
    2026:	d90f      	bls.n	2048 <STACK_SIZE+0x48>
    2028:	23c0      	movs	r3, #192	; 0xc0
    202a:	01db      	lsls	r3, r3, #7
    202c:	9a02      	ldr	r2, [sp, #8]
    202e:	429a      	cmp	r2, r3
    2030:	d100      	bne.n	2034 <STACK_SIZE+0x34>
    2032:	e08e      	b.n	2152 <STACK_SIZE+0x152>
    2034:	2380      	movs	r3, #128	; 0x80
    2036:	021b      	lsls	r3, r3, #8
    2038:	429a      	cmp	r2, r3
    203a:	d000      	beq.n	203e <STACK_SIZE+0x3e>
    203c:	e11b      	b.n	2276 <STACK_SIZE+0x276>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    203e:	2303      	movs	r3, #3
    2040:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2042:	2300      	movs	r3, #0
    2044:	9307      	str	r3, [sp, #28]
    2046:	e008      	b.n	205a <STACK_SIZE+0x5a>
	switch (config->sample_rate) {
    2048:	2380      	movs	r3, #128	; 0x80
    204a:	019b      	lsls	r3, r3, #6
    204c:	429a      	cmp	r2, r3
    204e:	d000      	beq.n	2052 <STACK_SIZE+0x52>
    2050:	e111      	b.n	2276 <STACK_SIZE+0x276>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2052:	2310      	movs	r3, #16
    2054:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2056:	3b0f      	subs	r3, #15
    2058:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    205a:	6833      	ldr	r3, [r6, #0]
    205c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    205e:	68f3      	ldr	r3, [r6, #12]
    2060:	469b      	mov	fp, r3
		config->sample_adjustment |
    2062:	6973      	ldr	r3, [r6, #20]
    2064:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2066:	7e33      	ldrb	r3, [r6, #24]
    2068:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    206a:	2326      	movs	r3, #38	; 0x26
    206c:	5cf3      	ldrb	r3, [r6, r3]
    206e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2070:	6873      	ldr	r3, [r6, #4]
    2072:	4699      	mov	r9, r3
	switch (transfer_mode)
    2074:	2b00      	cmp	r3, #0
    2076:	d100      	bne.n	207a <STACK_SIZE+0x7a>
    2078:	e09c      	b.n	21b4 <STACK_SIZE+0x1b4>
    207a:	2380      	movs	r3, #128	; 0x80
    207c:	055b      	lsls	r3, r3, #21
    207e:	4599      	cmp	r9, r3
    2080:	d100      	bne.n	2084 <STACK_SIZE+0x84>
    2082:	e080      	b.n	2186 <STACK_SIZE+0x186>
	if(config->encoding_format_enable) {
    2084:	7e73      	ldrb	r3, [r6, #25]
    2086:	2b00      	cmp	r3, #0
    2088:	d002      	beq.n	2090 <STACK_SIZE+0x90>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    208a:	7eb3      	ldrb	r3, [r6, #26]
    208c:	4642      	mov	r2, r8
    208e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2090:	230e      	movs	r3, #14
    2092:	aa06      	add	r2, sp, #24
    2094:	4694      	mov	ip, r2
    2096:	4463      	add	r3, ip
    2098:	881b      	ldrh	r3, [r3, #0]
    209a:	4642      	mov	r2, r8
    209c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    209e:	9b05      	ldr	r3, [sp, #20]
    20a0:	465a      	mov	r2, fp
    20a2:	4313      	orrs	r3, r2
    20a4:	9a03      	ldr	r2, [sp, #12]
    20a6:	4313      	orrs	r3, r2
    20a8:	464a      	mov	r2, r9
    20aa:	4313      	orrs	r3, r2
    20ac:	9f02      	ldr	r7, [sp, #8]
    20ae:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    20b0:	9b04      	ldr	r3, [sp, #16]
    20b2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    20b4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    20b6:	4653      	mov	r3, sl
    20b8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    20ba:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    20bc:	2327      	movs	r3, #39	; 0x27
    20be:	5cf3      	ldrb	r3, [r6, r3]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d101      	bne.n	20c8 <STACK_SIZE+0xc8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    20c4:	3304      	adds	r3, #4
    20c6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    20c8:	7e73      	ldrb	r3, [r6, #25]
    20ca:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    20cc:	7f32      	ldrb	r2, [r6, #28]
    20ce:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    20d0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20d2:	7f72      	ldrb	r2, [r6, #29]
    20d4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    20d6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20d8:	2224      	movs	r2, #36	; 0x24
    20da:	5cb2      	ldrb	r2, [r6, r2]
    20dc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20de:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    20e0:	2225      	movs	r2, #37	; 0x25
    20e2:	5cb2      	ldrb	r2, [r6, r2]
    20e4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20e6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    20e8:	7ab1      	ldrb	r1, [r6, #10]
    20ea:	7af2      	ldrb	r2, [r6, #11]
    20ec:	4311      	orrs	r1, r2
    20ee:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    20f0:	8933      	ldrh	r3, [r6, #8]
    20f2:	2bff      	cmp	r3, #255	; 0xff
    20f4:	d100      	bne.n	20f8 <STACK_SIZE+0xf8>
    20f6:	e081      	b.n	21fc <STACK_SIZE+0x1fc>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    20f8:	2280      	movs	r2, #128	; 0x80
    20fa:	0452      	lsls	r2, r2, #17
    20fc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    20fe:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2100:	232c      	movs	r3, #44	; 0x2c
    2102:	5cf3      	ldrb	r3, [r6, r3]
    2104:	2b00      	cmp	r3, #0
    2106:	d103      	bne.n	2110 <STACK_SIZE+0x110>
    2108:	4b62      	ldr	r3, [pc, #392]	; (2294 <STACK_SIZE+0x294>)
    210a:	789b      	ldrb	r3, [r3, #2]
    210c:	079b      	lsls	r3, r3, #30
    210e:	d501      	bpl.n	2114 <STACK_SIZE+0x114>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2110:	2380      	movs	r3, #128	; 0x80
    2112:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2114:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2116:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2118:	2b00      	cmp	r3, #0
    211a:	d1fc      	bne.n	2116 <STACK_SIZE+0x116>
	usart_hw->CTRLB.reg = ctrlb;
    211c:	4643      	mov	r3, r8
    211e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2120:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2122:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2124:	2b00      	cmp	r3, #0
    2126:	d1fc      	bne.n	2122 <STACK_SIZE+0x122>
	usart_hw->CTRLA.reg = ctrla;
    2128:	4643      	mov	r3, r8
    212a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    212c:	ab0e      	add	r3, sp, #56	; 0x38
    212e:	2280      	movs	r2, #128	; 0x80
    2130:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2132:	2200      	movs	r2, #0
    2134:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2136:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2138:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    213a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    213c:	930a      	str	r3, [sp, #40]	; 0x28
    213e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2140:	930b      	str	r3, [sp, #44]	; 0x2c
    2142:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2144:	930c      	str	r3, [sp, #48]	; 0x30
    2146:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2148:	9302      	str	r3, [sp, #8]
    214a:	930d      	str	r3, [sp, #52]	; 0x34
    214c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    214e:	ae0a      	add	r6, sp, #40	; 0x28
    2150:	e063      	b.n	221a <STACK_SIZE+0x21a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2152:	2308      	movs	r3, #8
    2154:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2156:	3b07      	subs	r3, #7
    2158:	9307      	str	r3, [sp, #28]
    215a:	e77e      	b.n	205a <STACK_SIZE+0x5a>
	ctrla = (uint32_t)config->data_order |
    215c:	6833      	ldr	r3, [r6, #0]
    215e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2160:	68f3      	ldr	r3, [r6, #12]
    2162:	469b      	mov	fp, r3
		config->sample_adjustment |
    2164:	6973      	ldr	r3, [r6, #20]
    2166:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2168:	7e33      	ldrb	r3, [r6, #24]
    216a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    216c:	2326      	movs	r3, #38	; 0x26
    216e:	5cf3      	ldrb	r3, [r6, r3]
    2170:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2172:	6873      	ldr	r3, [r6, #4]
    2174:	4699      	mov	r9, r3
	switch (transfer_mode)
    2176:	2b00      	cmp	r3, #0
    2178:	d018      	beq.n	21ac <STACK_SIZE+0x1ac>
    217a:	2380      	movs	r3, #128	; 0x80
    217c:	055b      	lsls	r3, r3, #21
    217e:	4599      	cmp	r9, r3
    2180:	d001      	beq.n	2186 <STACK_SIZE+0x186>
	enum status_code status_code = STATUS_OK;
    2182:	2000      	movs	r0, #0
    2184:	e025      	b.n	21d2 <STACK_SIZE+0x1d2>
			if (!config->use_external_clock) {
    2186:	2327      	movs	r3, #39	; 0x27
    2188:	5cf3      	ldrb	r3, [r6, r3]
    218a:	2b00      	cmp	r3, #0
    218c:	d000      	beq.n	2190 <STACK_SIZE+0x190>
    218e:	e779      	b.n	2084 <STACK_SIZE+0x84>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2190:	6a33      	ldr	r3, [r6, #32]
    2192:	001f      	movs	r7, r3
    2194:	b2c0      	uxtb	r0, r0
    2196:	4b40      	ldr	r3, [pc, #256]	; (2298 <STACK_SIZE+0x298>)
    2198:	4798      	blx	r3
    219a:	0001      	movs	r1, r0
    219c:	220e      	movs	r2, #14
    219e:	ab06      	add	r3, sp, #24
    21a0:	469c      	mov	ip, r3
    21a2:	4462      	add	r2, ip
    21a4:	0038      	movs	r0, r7
    21a6:	4b3d      	ldr	r3, [pc, #244]	; (229c <STACK_SIZE+0x29c>)
    21a8:	4798      	blx	r3
    21aa:	e012      	b.n	21d2 <STACK_SIZE+0x1d2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    21ac:	2308      	movs	r3, #8
    21ae:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    21b0:	2300      	movs	r3, #0
    21b2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    21b4:	2327      	movs	r3, #39	; 0x27
    21b6:	5cf3      	ldrb	r3, [r6, r3]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d00e      	beq.n	21da <STACK_SIZE+0x1da>
				status_code =
    21bc:	9b06      	ldr	r3, [sp, #24]
    21be:	9300      	str	r3, [sp, #0]
    21c0:	9b07      	ldr	r3, [sp, #28]
    21c2:	220e      	movs	r2, #14
    21c4:	a906      	add	r1, sp, #24
    21c6:	468c      	mov	ip, r1
    21c8:	4462      	add	r2, ip
    21ca:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    21cc:	6a30      	ldr	r0, [r6, #32]
    21ce:	4f34      	ldr	r7, [pc, #208]	; (22a0 <STACK_SIZE+0x2a0>)
    21d0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    21d2:	2800      	cmp	r0, #0
    21d4:	d000      	beq.n	21d8 <STACK_SIZE+0x1d8>
    21d6:	e6e4      	b.n	1fa2 <usart_init+0x26>
    21d8:	e754      	b.n	2084 <STACK_SIZE+0x84>
						_sercom_get_async_baud_val(config->baudrate,
    21da:	6a33      	ldr	r3, [r6, #32]
    21dc:	001f      	movs	r7, r3
    21de:	b2c0      	uxtb	r0, r0
    21e0:	4b2d      	ldr	r3, [pc, #180]	; (2298 <STACK_SIZE+0x298>)
    21e2:	4798      	blx	r3
    21e4:	0001      	movs	r1, r0
				status_code =
    21e6:	9b06      	ldr	r3, [sp, #24]
    21e8:	9300      	str	r3, [sp, #0]
    21ea:	9b07      	ldr	r3, [sp, #28]
    21ec:	220e      	movs	r2, #14
    21ee:	a806      	add	r0, sp, #24
    21f0:	4684      	mov	ip, r0
    21f2:	4462      	add	r2, ip
    21f4:	0038      	movs	r0, r7
    21f6:	4f2a      	ldr	r7, [pc, #168]	; (22a0 <STACK_SIZE+0x2a0>)
    21f8:	47b8      	blx	r7
    21fa:	e7ea      	b.n	21d2 <STACK_SIZE+0x1d2>
		if(config->lin_slave_enable) {
    21fc:	7ef3      	ldrb	r3, [r6, #27]
    21fe:	2b00      	cmp	r3, #0
    2200:	d100      	bne.n	2204 <STACK_SIZE+0x204>
    2202:	e77d      	b.n	2100 <STACK_SIZE+0x100>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2204:	2380      	movs	r3, #128	; 0x80
    2206:	04db      	lsls	r3, r3, #19
    2208:	431f      	orrs	r7, r3
    220a:	e779      	b.n	2100 <STACK_SIZE+0x100>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    220c:	0020      	movs	r0, r4
    220e:	4b25      	ldr	r3, [pc, #148]	; (22a4 <STACK_SIZE+0x2a4>)
    2210:	4798      	blx	r3
    2212:	e007      	b.n	2224 <STACK_SIZE+0x224>
    2214:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2216:	2f04      	cmp	r7, #4
    2218:	d00d      	beq.n	2236 <STACK_SIZE+0x236>
    221a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    221c:	00bb      	lsls	r3, r7, #2
    221e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2220:	2800      	cmp	r0, #0
    2222:	d0f3      	beq.n	220c <STACK_SIZE+0x20c>
		if (current_pinmux != PINMUX_UNUSED) {
    2224:	1c43      	adds	r3, r0, #1
    2226:	d0f5      	beq.n	2214 <STACK_SIZE+0x214>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2228:	a90e      	add	r1, sp, #56	; 0x38
    222a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    222c:	0c00      	lsrs	r0, r0, #16
    222e:	b2c0      	uxtb	r0, r0
    2230:	4b1d      	ldr	r3, [pc, #116]	; (22a8 <STACK_SIZE+0x2a8>)
    2232:	4798      	blx	r3
    2234:	e7ee      	b.n	2214 <STACK_SIZE+0x214>
		module->callback[i]            = NULL;
    2236:	2300      	movs	r3, #0
    2238:	60eb      	str	r3, [r5, #12]
    223a:	612b      	str	r3, [r5, #16]
    223c:	616b      	str	r3, [r5, #20]
    223e:	61ab      	str	r3, [r5, #24]
    2240:	61eb      	str	r3, [r5, #28]
    2242:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2244:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2246:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2248:	2200      	movs	r2, #0
    224a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    224c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    224e:	3330      	adds	r3, #48	; 0x30
    2250:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2252:	3301      	adds	r3, #1
    2254:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2256:	3301      	adds	r3, #1
    2258:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    225a:	3301      	adds	r3, #1
    225c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    225e:	6828      	ldr	r0, [r5, #0]
    2260:	4b07      	ldr	r3, [pc, #28]	; (2280 <STACK_SIZE+0x280>)
    2262:	4798      	blx	r3
    2264:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2266:	4911      	ldr	r1, [pc, #68]	; (22ac <STACK_SIZE+0x2ac>)
    2268:	4b11      	ldr	r3, [pc, #68]	; (22b0 <STACK_SIZE+0x2b0>)
    226a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    226c:	00a4      	lsls	r4, r4, #2
    226e:	4b11      	ldr	r3, [pc, #68]	; (22b4 <STACK_SIZE+0x2b4>)
    2270:	50e5      	str	r5, [r4, r3]
	return status_code;
    2272:	2000      	movs	r0, #0
    2274:	e695      	b.n	1fa2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2276:	2310      	movs	r3, #16
    2278:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    227a:	2300      	movs	r3, #0
    227c:	9307      	str	r3, [sp, #28]
    227e:	e6ec      	b.n	205a <STACK_SIZE+0x5a>
    2280:	000019d9 	.word	0x000019d9
    2284:	40000400 	.word	0x40000400
    2288:	00002ce9 	.word	0x00002ce9
    228c:	00002c5d 	.word	0x00002c5d
    2290:	00001815 	.word	0x00001815
    2294:	41002000 	.word	0x41002000
    2298:	00002d05 	.word	0x00002d05
    229c:	00001757 	.word	0x00001757
    22a0:	00001781 	.word	0x00001781
    22a4:	00001861 	.word	0x00001861
    22a8:	00002de1 	.word	0x00002de1
    22ac:	00002459 	.word	0x00002459
    22b0:	00001a15 	.word	0x00001a15
    22b4:	200005ec 	.word	0x200005ec

000022b8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    22b8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    22ba:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    22bc:	2a00      	cmp	r2, #0
    22be:	d101      	bne.n	22c4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    22c0:	0018      	movs	r0, r3
    22c2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    22c4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    22c6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    22c8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    22ca:	2a00      	cmp	r2, #0
    22cc:	d1f8      	bne.n	22c0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    22ce:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    22d0:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    22d2:	2102      	movs	r1, #2
    22d4:	7e13      	ldrb	r3, [r2, #24]
    22d6:	420b      	tst	r3, r1
    22d8:	d0fc      	beq.n	22d4 <usart_write_wait+0x1c>
	return STATUS_OK;
    22da:	2300      	movs	r3, #0
    22dc:	e7f0      	b.n	22c0 <usart_write_wait+0x8>

000022de <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    22de:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    22e0:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    22e2:	2a00      	cmp	r2, #0
    22e4:	d101      	bne.n	22ea <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    22e6:	0018      	movs	r0, r3
    22e8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    22ea:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    22ec:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    22ee:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    22f0:	2a00      	cmp	r2, #0
    22f2:	d1f8      	bne.n	22e6 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    22f4:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    22f6:	7e10      	ldrb	r0, [r2, #24]
    22f8:	0740      	lsls	r0, r0, #29
    22fa:	d5f4      	bpl.n	22e6 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    22fc:	8b53      	ldrh	r3, [r2, #26]
    22fe:	b2db      	uxtb	r3, r3
	if (error_code) {
    2300:	0698      	lsls	r0, r3, #26
    2302:	d01d      	beq.n	2340 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2304:	0798      	lsls	r0, r3, #30
    2306:	d503      	bpl.n	2310 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2308:	2302      	movs	r3, #2
    230a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    230c:	3318      	adds	r3, #24
    230e:	e7ea      	b.n	22e6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2310:	0758      	lsls	r0, r3, #29
    2312:	d503      	bpl.n	231c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2314:	2304      	movs	r3, #4
    2316:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2318:	331a      	adds	r3, #26
    231a:	e7e4      	b.n	22e6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    231c:	07d8      	lsls	r0, r3, #31
    231e:	d503      	bpl.n	2328 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2320:	2301      	movs	r3, #1
    2322:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2324:	3312      	adds	r3, #18
    2326:	e7de      	b.n	22e6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2328:	06d8      	lsls	r0, r3, #27
    232a:	d503      	bpl.n	2334 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    232c:	2310      	movs	r3, #16
    232e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2330:	3332      	adds	r3, #50	; 0x32
    2332:	e7d8      	b.n	22e6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2334:	069b      	lsls	r3, r3, #26
    2336:	d503      	bpl.n	2340 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2338:	2320      	movs	r3, #32
    233a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    233c:	3321      	adds	r3, #33	; 0x21
    233e:	e7d2      	b.n	22e6 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2340:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2342:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2344:	2300      	movs	r3, #0
    2346:	e7ce      	b.n	22e6 <usart_read_wait+0x8>

00002348 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    234a:	0006      	movs	r6, r0
    234c:	000c      	movs	r4, r1
    234e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2350:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2352:	4b0a      	ldr	r3, [pc, #40]	; (237c <_usart_write_buffer+0x34>)
    2354:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2356:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2358:	b29b      	uxth	r3, r3
    235a:	2b00      	cmp	r3, #0
    235c:	d003      	beq.n	2366 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    235e:	4b08      	ldr	r3, [pc, #32]	; (2380 <_usart_write_buffer+0x38>)
    2360:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2362:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2366:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2368:	4b05      	ldr	r3, [pc, #20]	; (2380 <_usart_write_buffer+0x38>)
    236a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    236c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    236e:	2205      	movs	r2, #5
    2370:	2333      	movs	r3, #51	; 0x33
    2372:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2374:	3b32      	subs	r3, #50	; 0x32
    2376:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2378:	2000      	movs	r0, #0
    237a:	e7f3      	b.n	2364 <_usart_write_buffer+0x1c>
    237c:	000014f9 	.word	0x000014f9
    2380:	00001539 	.word	0x00001539

00002384 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2386:	0004      	movs	r4, r0
    2388:	000d      	movs	r5, r1
    238a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    238c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    238e:	4b0f      	ldr	r3, [pc, #60]	; (23cc <_usart_read_buffer+0x48>)
    2390:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2392:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2394:	b29b      	uxth	r3, r3
    2396:	2b00      	cmp	r3, #0
    2398:	d003      	beq.n	23a2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    239a:	4b0d      	ldr	r3, [pc, #52]	; (23d0 <_usart_read_buffer+0x4c>)
    239c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    239e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    23a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    23a2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    23a4:	4b0a      	ldr	r3, [pc, #40]	; (23d0 <_usart_read_buffer+0x4c>)
    23a6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    23a8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    23aa:	2205      	movs	r2, #5
    23ac:	2332      	movs	r3, #50	; 0x32
    23ae:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    23b0:	3b2e      	subs	r3, #46	; 0x2e
    23b2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    23b4:	7a23      	ldrb	r3, [r4, #8]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d001      	beq.n	23be <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    23ba:	2320      	movs	r3, #32
    23bc:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    23be:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    23c0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    23c2:	2b00      	cmp	r3, #0
    23c4:	d0ec      	beq.n	23a0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    23c6:	2308      	movs	r3, #8
    23c8:	75bb      	strb	r3, [r7, #22]
    23ca:	e7e9      	b.n	23a0 <_usart_read_buffer+0x1c>
    23cc:	000014f9 	.word	0x000014f9
    23d0:	00001539 	.word	0x00001539

000023d4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    23d4:	1c93      	adds	r3, r2, #2
    23d6:	009b      	lsls	r3, r3, #2
    23d8:	18c3      	adds	r3, r0, r3
    23da:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    23dc:	2130      	movs	r1, #48	; 0x30
    23de:	2301      	movs	r3, #1
    23e0:	4093      	lsls	r3, r2
    23e2:	001a      	movs	r2, r3
    23e4:	5c43      	ldrb	r3, [r0, r1]
    23e6:	4313      	orrs	r3, r2
    23e8:	5443      	strb	r3, [r0, r1]
}
    23ea:	4770      	bx	lr

000023ec <usart_write_job>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_job(
		struct usart_module *const module,
		const uint16_t *tx_data)
{
    23ec:	b510      	push	{r4, lr}
	Assert(module);
	Assert(tx_data);


	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    23ee:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    23f0:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    23f2:	2a00      	cmp	r2, #0
    23f4:	d101      	bne.n	23fa <usart_write_job+0xe>
	}

	/* Call internal write buffer function with length 1 */
	return _usart_write_buffer(module, (uint8_t *)tx_data, 1);
}
    23f6:	0018      	movs	r0, r3
    23f8:	bd10      	pop	{r4, pc}
	return _usart_write_buffer(module, (uint8_t *)tx_data, 1);
    23fa:	2201      	movs	r2, #1
    23fc:	4b01      	ldr	r3, [pc, #4]	; (2404 <usart_write_job+0x18>)
    23fe:	4798      	blx	r3
    2400:	0003      	movs	r3, r0
    2402:	e7f8      	b.n	23f6 <usart_write_job+0xa>
    2404:	00002349 	.word	0x00002349

00002408 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2408:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    240a:	2201      	movs	r2, #1
    240c:	4b01      	ldr	r3, [pc, #4]	; (2414 <usart_read_job+0xc>)
    240e:	4798      	blx	r3
}
    2410:	bd10      	pop	{r4, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	00002385 	.word	0x00002385

00002418 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2418:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    241a:	2317      	movs	r3, #23
	if (length == 0) {
    241c:	2a00      	cmp	r2, #0
    241e:	d101      	bne.n	2424 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2420:	0018      	movs	r0, r3
    2422:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2424:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2426:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2428:	2c00      	cmp	r4, #0
    242a:	d0f9      	beq.n	2420 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    242c:	4b01      	ldr	r3, [pc, #4]	; (2434 <usart_write_buffer_job+0x1c>)
    242e:	4798      	blx	r3
    2430:	0003      	movs	r3, r0
    2432:	e7f5      	b.n	2420 <usart_write_buffer_job+0x8>
    2434:	00002349 	.word	0x00002349

00002438 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2438:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    243a:	2317      	movs	r3, #23
	if (length == 0) {
    243c:	2a00      	cmp	r2, #0
    243e:	d101      	bne.n	2444 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2440:	0018      	movs	r0, r3
    2442:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2444:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2446:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2448:	2c00      	cmp	r4, #0
    244a:	d0f9      	beq.n	2440 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    244c:	4b01      	ldr	r3, [pc, #4]	; (2454 <usart_read_buffer_job+0x1c>)
    244e:	4798      	blx	r3
    2450:	0003      	movs	r3, r0
    2452:	e7f5      	b.n	2440 <usart_read_buffer_job+0x8>
    2454:	00002385 	.word	0x00002385

00002458 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    245a:	0080      	lsls	r0, r0, #2
    245c:	4b62      	ldr	r3, [pc, #392]	; (25e8 <_usart_interrupt_handler+0x190>)
    245e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2460:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2462:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2464:	2b00      	cmp	r3, #0
    2466:	d1fc      	bne.n	2462 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2468:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    246a:	7da6      	ldrb	r6, [r4, #22]
    246c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    246e:	2330      	movs	r3, #48	; 0x30
    2470:	5ceb      	ldrb	r3, [r5, r3]
    2472:	2231      	movs	r2, #49	; 0x31
    2474:	5caf      	ldrb	r7, [r5, r2]
    2476:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2478:	07f3      	lsls	r3, r6, #31
    247a:	d522      	bpl.n	24c2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    247c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    247e:	b29b      	uxth	r3, r3
    2480:	2b00      	cmp	r3, #0
    2482:	d01c      	beq.n	24be <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2484:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2486:	7813      	ldrb	r3, [r2, #0]
    2488:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    248a:	1c51      	adds	r1, r2, #1
    248c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    248e:	7969      	ldrb	r1, [r5, #5]
    2490:	2901      	cmp	r1, #1
    2492:	d00e      	beq.n	24b2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2494:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2496:	05db      	lsls	r3, r3, #23
    2498:	0ddb      	lsrs	r3, r3, #23
    249a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    249c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    249e:	3b01      	subs	r3, #1
    24a0:	b29b      	uxth	r3, r3
    24a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    24a4:	2b00      	cmp	r3, #0
    24a6:	d10c      	bne.n	24c2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    24a8:	3301      	adds	r3, #1
    24aa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    24ac:	3301      	adds	r3, #1
    24ae:	75a3      	strb	r3, [r4, #22]
    24b0:	e007      	b.n	24c2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    24b2:	7851      	ldrb	r1, [r2, #1]
    24b4:	0209      	lsls	r1, r1, #8
    24b6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    24b8:	3202      	adds	r2, #2
    24ba:	62aa      	str	r2, [r5, #40]	; 0x28
    24bc:	e7eb      	b.n	2496 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    24be:	2301      	movs	r3, #1
    24c0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    24c2:	07b3      	lsls	r3, r6, #30
    24c4:	d506      	bpl.n	24d4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    24c6:	2302      	movs	r3, #2
    24c8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    24ca:	2200      	movs	r2, #0
    24cc:	3331      	adds	r3, #49	; 0x31
    24ce:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    24d0:	07fb      	lsls	r3, r7, #31
    24d2:	d41a      	bmi.n	250a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    24d4:	0773      	lsls	r3, r6, #29
    24d6:	d565      	bpl.n	25a4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    24d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    24da:	b29b      	uxth	r3, r3
    24dc:	2b00      	cmp	r3, #0
    24de:	d05f      	beq.n	25a0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    24e0:	8b63      	ldrh	r3, [r4, #26]
    24e2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    24e4:	071a      	lsls	r2, r3, #28
    24e6:	d414      	bmi.n	2512 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    24e8:	223f      	movs	r2, #63	; 0x3f
    24ea:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    24ec:	2b00      	cmp	r3, #0
    24ee:	d034      	beq.n	255a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    24f0:	079a      	lsls	r2, r3, #30
    24f2:	d511      	bpl.n	2518 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    24f4:	221a      	movs	r2, #26
    24f6:	2332      	movs	r3, #50	; 0x32
    24f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    24fa:	3b30      	subs	r3, #48	; 0x30
    24fc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    24fe:	077b      	lsls	r3, r7, #29
    2500:	d550      	bpl.n	25a4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2502:	0028      	movs	r0, r5
    2504:	696b      	ldr	r3, [r5, #20]
    2506:	4798      	blx	r3
    2508:	e04c      	b.n	25a4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    250a:	0028      	movs	r0, r5
    250c:	68eb      	ldr	r3, [r5, #12]
    250e:	4798      	blx	r3
    2510:	e7e0      	b.n	24d4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2512:	2237      	movs	r2, #55	; 0x37
    2514:	4013      	ands	r3, r2
    2516:	e7e9      	b.n	24ec <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2518:	075a      	lsls	r2, r3, #29
    251a:	d505      	bpl.n	2528 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    251c:	221e      	movs	r2, #30
    251e:	2332      	movs	r3, #50	; 0x32
    2520:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2522:	3b2e      	subs	r3, #46	; 0x2e
    2524:	8363      	strh	r3, [r4, #26]
    2526:	e7ea      	b.n	24fe <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2528:	07da      	lsls	r2, r3, #31
    252a:	d505      	bpl.n	2538 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    252c:	2213      	movs	r2, #19
    252e:	2332      	movs	r3, #50	; 0x32
    2530:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2532:	3b31      	subs	r3, #49	; 0x31
    2534:	8363      	strh	r3, [r4, #26]
    2536:	e7e2      	b.n	24fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2538:	06da      	lsls	r2, r3, #27
    253a:	d505      	bpl.n	2548 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    253c:	2242      	movs	r2, #66	; 0x42
    253e:	2332      	movs	r3, #50	; 0x32
    2540:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2542:	3b22      	subs	r3, #34	; 0x22
    2544:	8363      	strh	r3, [r4, #26]
    2546:	e7da      	b.n	24fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2548:	2220      	movs	r2, #32
    254a:	421a      	tst	r2, r3
    254c:	d0d7      	beq.n	24fe <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    254e:	3221      	adds	r2, #33	; 0x21
    2550:	2332      	movs	r3, #50	; 0x32
    2552:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2554:	3b12      	subs	r3, #18
    2556:	8363      	strh	r3, [r4, #26]
    2558:	e7d1      	b.n	24fe <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    255a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    255c:	05db      	lsls	r3, r3, #23
    255e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2560:	b2da      	uxtb	r2, r3
    2562:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2564:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2566:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2568:	1c51      	adds	r1, r2, #1
    256a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    256c:	7969      	ldrb	r1, [r5, #5]
    256e:	2901      	cmp	r1, #1
    2570:	d010      	beq.n	2594 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2572:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2574:	3b01      	subs	r3, #1
    2576:	b29b      	uxth	r3, r3
    2578:	85ab      	strh	r3, [r5, #44]	; 0x2c
    257a:	2b00      	cmp	r3, #0
    257c:	d112      	bne.n	25a4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    257e:	3304      	adds	r3, #4
    2580:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2582:	2200      	movs	r2, #0
    2584:	332e      	adds	r3, #46	; 0x2e
    2586:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2588:	07bb      	lsls	r3, r7, #30
    258a:	d50b      	bpl.n	25a4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    258c:	0028      	movs	r0, r5
    258e:	692b      	ldr	r3, [r5, #16]
    2590:	4798      	blx	r3
    2592:	e007      	b.n	25a4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2594:	0a1b      	lsrs	r3, r3, #8
    2596:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2598:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    259a:	3301      	adds	r3, #1
    259c:	626b      	str	r3, [r5, #36]	; 0x24
    259e:	e7e8      	b.n	2572 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    25a0:	2304      	movs	r3, #4
    25a2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    25a4:	06f3      	lsls	r3, r6, #27
    25a6:	d504      	bpl.n	25b2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    25a8:	2310      	movs	r3, #16
    25aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    25ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    25ae:	06fb      	lsls	r3, r7, #27
    25b0:	d40e      	bmi.n	25d0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    25b2:	06b3      	lsls	r3, r6, #26
    25b4:	d504      	bpl.n	25c0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    25b6:	2320      	movs	r3, #32
    25b8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    25ba:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    25bc:	073b      	lsls	r3, r7, #28
    25be:	d40b      	bmi.n	25d8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    25c0:	0733      	lsls	r3, r6, #28
    25c2:	d504      	bpl.n	25ce <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    25c4:	2308      	movs	r3, #8
    25c6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    25c8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    25ca:	06bb      	lsls	r3, r7, #26
    25cc:	d408      	bmi.n	25e0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    25ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    25d0:	0028      	movs	r0, r5
    25d2:	69eb      	ldr	r3, [r5, #28]
    25d4:	4798      	blx	r3
    25d6:	e7ec      	b.n	25b2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    25d8:	0028      	movs	r0, r5
    25da:	69ab      	ldr	r3, [r5, #24]
    25dc:	4798      	blx	r3
    25de:	e7ef      	b.n	25c0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    25e0:	6a2b      	ldr	r3, [r5, #32]
    25e2:	0028      	movs	r0, r5
    25e4:	4798      	blx	r3
}
    25e6:	e7f2      	b.n	25ce <_usart_interrupt_handler+0x176>
    25e8:	200005ec 	.word	0x200005ec

000025ec <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    25ec:	b510      	push	{r4, lr}
	switch (clock_source) {
    25ee:	2808      	cmp	r0, #8
    25f0:	d803      	bhi.n	25fa <system_clock_source_get_hz+0xe>
    25f2:	0080      	lsls	r0, r0, #2
    25f4:	4b1c      	ldr	r3, [pc, #112]	; (2668 <system_clock_source_get_hz+0x7c>)
    25f6:	581b      	ldr	r3, [r3, r0]
    25f8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    25fa:	2000      	movs	r0, #0
    25fc:	e032      	b.n	2664 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    25fe:	4b1b      	ldr	r3, [pc, #108]	; (266c <system_clock_source_get_hz+0x80>)
    2600:	6918      	ldr	r0, [r3, #16]
    2602:	e02f      	b.n	2664 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2604:	4b1a      	ldr	r3, [pc, #104]	; (2670 <system_clock_source_get_hz+0x84>)
    2606:	6a1b      	ldr	r3, [r3, #32]
    2608:	059b      	lsls	r3, r3, #22
    260a:	0f9b      	lsrs	r3, r3, #30
    260c:	4819      	ldr	r0, [pc, #100]	; (2674 <system_clock_source_get_hz+0x88>)
    260e:	40d8      	lsrs	r0, r3
    2610:	e028      	b.n	2664 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2612:	4b16      	ldr	r3, [pc, #88]	; (266c <system_clock_source_get_hz+0x80>)
    2614:	6958      	ldr	r0, [r3, #20]
    2616:	e025      	b.n	2664 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2618:	4b14      	ldr	r3, [pc, #80]	; (266c <system_clock_source_get_hz+0x80>)
    261a:	681b      	ldr	r3, [r3, #0]
			return 0;
    261c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    261e:	079b      	lsls	r3, r3, #30
    2620:	d520      	bpl.n	2664 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2622:	4913      	ldr	r1, [pc, #76]	; (2670 <system_clock_source_get_hz+0x84>)
    2624:	2210      	movs	r2, #16
    2626:	68cb      	ldr	r3, [r1, #12]
    2628:	421a      	tst	r2, r3
    262a:	d0fc      	beq.n	2626 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    262c:	4b0f      	ldr	r3, [pc, #60]	; (266c <system_clock_source_get_hz+0x80>)
    262e:	681a      	ldr	r2, [r3, #0]
    2630:	2324      	movs	r3, #36	; 0x24
    2632:	4013      	ands	r3, r2
    2634:	2b04      	cmp	r3, #4
    2636:	d001      	beq.n	263c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2638:	480f      	ldr	r0, [pc, #60]	; (2678 <system_clock_source_get_hz+0x8c>)
    263a:	e013      	b.n	2664 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    263c:	2000      	movs	r0, #0
    263e:	4b0f      	ldr	r3, [pc, #60]	; (267c <system_clock_source_get_hz+0x90>)
    2640:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2642:	4b0a      	ldr	r3, [pc, #40]	; (266c <system_clock_source_get_hz+0x80>)
    2644:	689b      	ldr	r3, [r3, #8]
    2646:	041b      	lsls	r3, r3, #16
    2648:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    264a:	4358      	muls	r0, r3
    264c:	e00a      	b.n	2664 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    264e:	2350      	movs	r3, #80	; 0x50
    2650:	4a07      	ldr	r2, [pc, #28]	; (2670 <system_clock_source_get_hz+0x84>)
    2652:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2654:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2656:	075b      	lsls	r3, r3, #29
    2658:	d504      	bpl.n	2664 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    265a:	4b04      	ldr	r3, [pc, #16]	; (266c <system_clock_source_get_hz+0x80>)
    265c:	68d8      	ldr	r0, [r3, #12]
    265e:	e001      	b.n	2664 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2660:	2080      	movs	r0, #128	; 0x80
    2662:	0200      	lsls	r0, r0, #8
	}
}
    2664:	bd10      	pop	{r4, pc}
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	00005268 	.word	0x00005268
    266c:	200000c0 	.word	0x200000c0
    2670:	40000800 	.word	0x40000800
    2674:	007a1200 	.word	0x007a1200
    2678:	02dc6c00 	.word	0x02dc6c00
    267c:	00002d05 	.word	0x00002d05

00002680 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2680:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2682:	490c      	ldr	r1, [pc, #48]	; (26b4 <system_clock_source_osc8m_set_config+0x34>)
    2684:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2686:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2688:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    268a:	7840      	ldrb	r0, [r0, #1]
    268c:	2201      	movs	r2, #1
    268e:	4010      	ands	r0, r2
    2690:	0180      	lsls	r0, r0, #6
    2692:	2640      	movs	r6, #64	; 0x40
    2694:	43b3      	bics	r3, r6
    2696:	4303      	orrs	r3, r0
    2698:	402a      	ands	r2, r5
    269a:	01d2      	lsls	r2, r2, #7
    269c:	2080      	movs	r0, #128	; 0x80
    269e:	4383      	bics	r3, r0
    26a0:	4313      	orrs	r3, r2
    26a2:	2203      	movs	r2, #3
    26a4:	4022      	ands	r2, r4
    26a6:	0212      	lsls	r2, r2, #8
    26a8:	4803      	ldr	r0, [pc, #12]	; (26b8 <system_clock_source_osc8m_set_config+0x38>)
    26aa:	4003      	ands	r3, r0
    26ac:	4313      	orrs	r3, r2
    26ae:	620b      	str	r3, [r1, #32]
}
    26b0:	bd70      	pop	{r4, r5, r6, pc}
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	40000800 	.word	0x40000800
    26b8:	fffffcff 	.word	0xfffffcff

000026bc <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    26bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26be:	46ce      	mov	lr, r9
    26c0:	4647      	mov	r7, r8
    26c2:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    26c4:	4b19      	ldr	r3, [pc, #100]	; (272c <system_clock_source_osc32k_set_config+0x70>)
    26c6:	4699      	mov	r9, r3
    26c8:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    26ca:	7841      	ldrb	r1, [r0, #1]
    26cc:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    26ce:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    26d0:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    26d2:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    26d4:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    26d6:	7880      	ldrb	r0, [r0, #2]
    26d8:	2101      	movs	r1, #1
    26da:	4008      	ands	r0, r1
    26dc:	0080      	lsls	r0, r0, #2
    26de:	2204      	movs	r2, #4
    26e0:	4393      	bics	r3, r2
    26e2:	4303      	orrs	r3, r0
    26e4:	4660      	mov	r0, ip
    26e6:	4008      	ands	r0, r1
    26e8:	00c0      	lsls	r0, r0, #3
    26ea:	3204      	adds	r2, #4
    26ec:	4393      	bics	r3, r2
    26ee:	4303      	orrs	r3, r0
    26f0:	0038      	movs	r0, r7
    26f2:	4008      	ands	r0, r1
    26f4:	0180      	lsls	r0, r0, #6
    26f6:	2740      	movs	r7, #64	; 0x40
    26f8:	43bb      	bics	r3, r7
    26fa:	4303      	orrs	r3, r0
    26fc:	0030      	movs	r0, r6
    26fe:	4008      	ands	r0, r1
    2700:	01c0      	lsls	r0, r0, #7
    2702:	2680      	movs	r6, #128	; 0x80
    2704:	43b3      	bics	r3, r6
    2706:	4303      	orrs	r3, r0
    2708:	2007      	movs	r0, #7
    270a:	4005      	ands	r5, r0
    270c:	022d      	lsls	r5, r5, #8
    270e:	4808      	ldr	r0, [pc, #32]	; (2730 <system_clock_source_osc32k_set_config+0x74>)
    2710:	4003      	ands	r3, r0
    2712:	432b      	orrs	r3, r5
    2714:	4021      	ands	r1, r4
    2716:	0309      	lsls	r1, r1, #12
    2718:	4806      	ldr	r0, [pc, #24]	; (2734 <system_clock_source_osc32k_set_config+0x78>)
    271a:	4003      	ands	r3, r0
    271c:	430b      	orrs	r3, r1
    271e:	464a      	mov	r2, r9
    2720:	6193      	str	r3, [r2, #24]
}
    2722:	bc0c      	pop	{r2, r3}
    2724:	4690      	mov	r8, r2
    2726:	4699      	mov	r9, r3
    2728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	40000800 	.word	0x40000800
    2730:	fffff8ff 	.word	0xfffff8ff
    2734:	ffffefff 	.word	0xffffefff

00002738 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2738:	b5f0      	push	{r4, r5, r6, r7, lr}
    273a:	46de      	mov	lr, fp
    273c:	4657      	mov	r7, sl
    273e:	464e      	mov	r6, r9
    2740:	4645      	mov	r5, r8
    2742:	b5e0      	push	{r5, r6, r7, lr}
    2744:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2746:	4b26      	ldr	r3, [pc, #152]	; (27e0 <system_clock_source_xosc32k_set_config+0xa8>)
    2748:	469b      	mov	fp, r3
    274a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    274c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    274e:	7800      	ldrb	r0, [r0, #0]
    2750:	4242      	negs	r2, r0
    2752:	4142      	adcs	r2, r0
    2754:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2756:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2758:	78ca      	ldrb	r2, [r1, #3]
    275a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    275c:	790a      	ldrb	r2, [r1, #4]
    275e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2760:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2762:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2764:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2766:	688a      	ldr	r2, [r1, #8]
    2768:	491e      	ldr	r1, [pc, #120]	; (27e4 <system_clock_source_xosc32k_set_config+0xac>)
    276a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    276c:	2101      	movs	r1, #1
    276e:	464a      	mov	r2, r9
    2770:	0092      	lsls	r2, r2, #2
    2772:	4691      	mov	r9, r2
    2774:	2204      	movs	r2, #4
    2776:	4393      	bics	r3, r2
    2778:	464a      	mov	r2, r9
    277a:	4313      	orrs	r3, r2
    277c:	4642      	mov	r2, r8
    277e:	400a      	ands	r2, r1
    2780:	00d2      	lsls	r2, r2, #3
    2782:	4690      	mov	r8, r2
    2784:	2208      	movs	r2, #8
    2786:	4393      	bics	r3, r2
    2788:	4642      	mov	r2, r8
    278a:	4313      	orrs	r3, r2
    278c:	4662      	mov	r2, ip
    278e:	400a      	ands	r2, r1
    2790:	0112      	lsls	r2, r2, #4
    2792:	4694      	mov	ip, r2
    2794:	2210      	movs	r2, #16
    2796:	4393      	bics	r3, r2
    2798:	4662      	mov	r2, ip
    279a:	4313      	orrs	r3, r2
    279c:	4008      	ands	r0, r1
    279e:	0140      	lsls	r0, r0, #5
    27a0:	2220      	movs	r2, #32
    27a2:	4393      	bics	r3, r2
    27a4:	4303      	orrs	r3, r0
    27a6:	400f      	ands	r7, r1
    27a8:	01bf      	lsls	r7, r7, #6
    27aa:	2040      	movs	r0, #64	; 0x40
    27ac:	4383      	bics	r3, r0
    27ae:	433b      	orrs	r3, r7
    27b0:	400e      	ands	r6, r1
    27b2:	01f6      	lsls	r6, r6, #7
    27b4:	3040      	adds	r0, #64	; 0x40
    27b6:	4383      	bics	r3, r0
    27b8:	4333      	orrs	r3, r6
    27ba:	3879      	subs	r0, #121	; 0x79
    27bc:	4005      	ands	r5, r0
    27be:	022d      	lsls	r5, r5, #8
    27c0:	4809      	ldr	r0, [pc, #36]	; (27e8 <system_clock_source_xosc32k_set_config+0xb0>)
    27c2:	4003      	ands	r3, r0
    27c4:	432b      	orrs	r3, r5
    27c6:	4021      	ands	r1, r4
    27c8:	0309      	lsls	r1, r1, #12
    27ca:	4808      	ldr	r0, [pc, #32]	; (27ec <system_clock_source_xosc32k_set_config+0xb4>)
    27cc:	4003      	ands	r3, r0
    27ce:	430b      	orrs	r3, r1
    27d0:	465a      	mov	r2, fp
    27d2:	8293      	strh	r3, [r2, #20]
}
    27d4:	bc3c      	pop	{r2, r3, r4, r5}
    27d6:	4690      	mov	r8, r2
    27d8:	4699      	mov	r9, r3
    27da:	46a2      	mov	sl, r4
    27dc:	46ab      	mov	fp, r5
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e0:	40000800 	.word	0x40000800
    27e4:	200000c0 	.word	0x200000c0
    27e8:	fffff8ff 	.word	0xfffff8ff
    27ec:	ffffefff 	.word	0xffffefff

000027f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    27f0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    27f2:	7a03      	ldrb	r3, [r0, #8]
    27f4:	069b      	lsls	r3, r3, #26
    27f6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    27f8:	8942      	ldrh	r2, [r0, #10]
    27fa:	0592      	lsls	r2, r2, #22
    27fc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    27fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2800:	4918      	ldr	r1, [pc, #96]	; (2864 <system_clock_source_dfll_set_config+0x74>)
    2802:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2804:	7983      	ldrb	r3, [r0, #6]
    2806:	79c2      	ldrb	r2, [r0, #7]
    2808:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    280a:	8842      	ldrh	r2, [r0, #2]
    280c:	8884      	ldrh	r4, [r0, #4]
    280e:	4322      	orrs	r2, r4
    2810:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2812:	7842      	ldrb	r2, [r0, #1]
    2814:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2816:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2818:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    281a:	7803      	ldrb	r3, [r0, #0]
    281c:	2b04      	cmp	r3, #4
    281e:	d011      	beq.n	2844 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2820:	2b20      	cmp	r3, #32
    2822:	d10e      	bne.n	2842 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2824:	7b03      	ldrb	r3, [r0, #12]
    2826:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2828:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    282a:	4313      	orrs	r3, r2
    282c:	89c2      	ldrh	r2, [r0, #14]
    282e:	0412      	lsls	r2, r2, #16
    2830:	490d      	ldr	r1, [pc, #52]	; (2868 <system_clock_source_dfll_set_config+0x78>)
    2832:	400a      	ands	r2, r1
    2834:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2836:	4a0b      	ldr	r2, [pc, #44]	; (2864 <system_clock_source_dfll_set_config+0x74>)
    2838:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    283a:	6811      	ldr	r1, [r2, #0]
    283c:	4b0b      	ldr	r3, [pc, #44]	; (286c <system_clock_source_dfll_set_config+0x7c>)
    283e:	430b      	orrs	r3, r1
    2840:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2842:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2844:	7b03      	ldrb	r3, [r0, #12]
    2846:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2848:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    284a:	4313      	orrs	r3, r2
    284c:	89c2      	ldrh	r2, [r0, #14]
    284e:	0412      	lsls	r2, r2, #16
    2850:	4905      	ldr	r1, [pc, #20]	; (2868 <system_clock_source_dfll_set_config+0x78>)
    2852:	400a      	ands	r2, r1
    2854:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2856:	4a03      	ldr	r2, [pc, #12]	; (2864 <system_clock_source_dfll_set_config+0x74>)
    2858:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    285a:	6813      	ldr	r3, [r2, #0]
    285c:	2104      	movs	r1, #4
    285e:	430b      	orrs	r3, r1
    2860:	6013      	str	r3, [r2, #0]
    2862:	e7ee      	b.n	2842 <system_clock_source_dfll_set_config+0x52>
    2864:	200000c0 	.word	0x200000c0
    2868:	03ff0000 	.word	0x03ff0000
    286c:	00000424 	.word	0x00000424

00002870 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2870:	2808      	cmp	r0, #8
    2872:	d803      	bhi.n	287c <system_clock_source_enable+0xc>
    2874:	0080      	lsls	r0, r0, #2
    2876:	4b25      	ldr	r3, [pc, #148]	; (290c <system_clock_source_enable+0x9c>)
    2878:	581b      	ldr	r3, [r3, r0]
    287a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    287c:	2017      	movs	r0, #23
    287e:	e044      	b.n	290a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2880:	4a23      	ldr	r2, [pc, #140]	; (2910 <system_clock_source_enable+0xa0>)
    2882:	6a13      	ldr	r3, [r2, #32]
    2884:	2102      	movs	r1, #2
    2886:	430b      	orrs	r3, r1
    2888:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    288a:	2000      	movs	r0, #0
    288c:	e03d      	b.n	290a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    288e:	4a20      	ldr	r2, [pc, #128]	; (2910 <system_clock_source_enable+0xa0>)
    2890:	6993      	ldr	r3, [r2, #24]
    2892:	2102      	movs	r1, #2
    2894:	430b      	orrs	r3, r1
    2896:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2898:	2000      	movs	r0, #0
		break;
    289a:	e036      	b.n	290a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    289c:	4a1c      	ldr	r2, [pc, #112]	; (2910 <system_clock_source_enable+0xa0>)
    289e:	8a13      	ldrh	r3, [r2, #16]
    28a0:	2102      	movs	r1, #2
    28a2:	430b      	orrs	r3, r1
    28a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    28a6:	2000      	movs	r0, #0
		break;
    28a8:	e02f      	b.n	290a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    28aa:	4a19      	ldr	r2, [pc, #100]	; (2910 <system_clock_source_enable+0xa0>)
    28ac:	8a93      	ldrh	r3, [r2, #20]
    28ae:	2102      	movs	r1, #2
    28b0:	430b      	orrs	r3, r1
    28b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    28b4:	2000      	movs	r0, #0
		break;
    28b6:	e028      	b.n	290a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    28b8:	4916      	ldr	r1, [pc, #88]	; (2914 <system_clock_source_enable+0xa4>)
    28ba:	680b      	ldr	r3, [r1, #0]
    28bc:	2202      	movs	r2, #2
    28be:	4313      	orrs	r3, r2
    28c0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    28c2:	4b13      	ldr	r3, [pc, #76]	; (2910 <system_clock_source_enable+0xa0>)
    28c4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28c6:	0019      	movs	r1, r3
    28c8:	320e      	adds	r2, #14
    28ca:	68cb      	ldr	r3, [r1, #12]
    28cc:	421a      	tst	r2, r3
    28ce:	d0fc      	beq.n	28ca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    28d0:	4a10      	ldr	r2, [pc, #64]	; (2914 <system_clock_source_enable+0xa4>)
    28d2:	6891      	ldr	r1, [r2, #8]
    28d4:	4b0e      	ldr	r3, [pc, #56]	; (2910 <system_clock_source_enable+0xa0>)
    28d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    28d8:	6852      	ldr	r2, [r2, #4]
    28da:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    28dc:	2200      	movs	r2, #0
    28de:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28e0:	0019      	movs	r1, r3
    28e2:	3210      	adds	r2, #16
    28e4:	68cb      	ldr	r3, [r1, #12]
    28e6:	421a      	tst	r2, r3
    28e8:	d0fc      	beq.n	28e4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    28ea:	4b0a      	ldr	r3, [pc, #40]	; (2914 <system_clock_source_enable+0xa4>)
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	b29b      	uxth	r3, r3
    28f0:	4a07      	ldr	r2, [pc, #28]	; (2910 <system_clock_source_enable+0xa0>)
    28f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    28f4:	2000      	movs	r0, #0
    28f6:	e008      	b.n	290a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    28f8:	4905      	ldr	r1, [pc, #20]	; (2910 <system_clock_source_enable+0xa0>)
    28fa:	2244      	movs	r2, #68	; 0x44
    28fc:	5c8b      	ldrb	r3, [r1, r2]
    28fe:	2002      	movs	r0, #2
    2900:	4303      	orrs	r3, r0
    2902:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2904:	2000      	movs	r0, #0
		break;
    2906:	e000      	b.n	290a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2908:	2000      	movs	r0, #0
}
    290a:	4770      	bx	lr
    290c:	0000528c 	.word	0x0000528c
    2910:	40000800 	.word	0x40000800
    2914:	200000c0 	.word	0x200000c0

00002918 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2918:	b5f0      	push	{r4, r5, r6, r7, lr}
    291a:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    291c:	22c2      	movs	r2, #194	; 0xc2
    291e:	00d2      	lsls	r2, r2, #3
    2920:	4b53      	ldr	r3, [pc, #332]	; (2a70 <system_clock_init+0x158>)
    2922:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2924:	4a53      	ldr	r2, [pc, #332]	; (2a74 <system_clock_init+0x15c>)
    2926:	6853      	ldr	r3, [r2, #4]
    2928:	211e      	movs	r1, #30
    292a:	438b      	bics	r3, r1
    292c:	391a      	subs	r1, #26
    292e:	430b      	orrs	r3, r1
    2930:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2932:	2202      	movs	r2, #2
    2934:	ab01      	add	r3, sp, #4
    2936:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2938:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    293a:	4d4f      	ldr	r5, [pc, #316]	; (2a78 <system_clock_init+0x160>)
    293c:	b2e0      	uxtb	r0, r4
    293e:	a901      	add	r1, sp, #4
    2940:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2942:	3401      	adds	r4, #1
    2944:	2c25      	cmp	r4, #37	; 0x25
    2946:	d1f9      	bne.n	293c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2948:	a80c      	add	r0, sp, #48	; 0x30
    294a:	2300      	movs	r3, #0
    294c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    294e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2950:	2280      	movs	r2, #128	; 0x80
    2952:	0212      	lsls	r2, r2, #8
    2954:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2956:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2958:	2201      	movs	r2, #1
    295a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    295c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    295e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2960:	3202      	adds	r2, #2
    2962:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2964:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2966:	4b45      	ldr	r3, [pc, #276]	; (2a7c <system_clock_init+0x164>)
    2968:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    296a:	2005      	movs	r0, #5
    296c:	4b44      	ldr	r3, [pc, #272]	; (2a80 <system_clock_init+0x168>)
    296e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2970:	493f      	ldr	r1, [pc, #252]	; (2a70 <system_clock_init+0x158>)
    2972:	2202      	movs	r2, #2
    2974:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2976:	421a      	tst	r2, r3
    2978:	d0fc      	beq.n	2974 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    297a:	493d      	ldr	r1, [pc, #244]	; (2a70 <system_clock_init+0x158>)
    297c:	8a8b      	ldrh	r3, [r1, #20]
    297e:	2280      	movs	r2, #128	; 0x80
    2980:	4313      	orrs	r3, r2
    2982:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    2984:	4c3f      	ldr	r4, [pc, #252]	; (2a84 <system_clock_init+0x16c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2986:	6823      	ldr	r3, [r4, #0]
    2988:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    298a:	698a      	ldr	r2, [r1, #24]
    298c:	0e5b      	lsrs	r3, r3, #25
    298e:	041b      	lsls	r3, r3, #16
    2990:	483d      	ldr	r0, [pc, #244]	; (2a88 <system_clock_init+0x170>)
    2992:	4002      	ands	r2, r0
    2994:	4313      	orrs	r3, r2
    2996:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2998:	a80a      	add	r0, sp, #40	; 0x28
    299a:	2301      	movs	r3, #1
    299c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    299e:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    29a0:	2500      	movs	r5, #0
    29a2:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    29a4:	7103      	strb	r3, [r0, #4]
	config->write_once          = false;
    29a6:	7145      	strb	r5, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    29a8:	3302      	adds	r3, #2
    29aa:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    29ac:	4b37      	ldr	r3, [pc, #220]	; (2a8c <system_clock_init+0x174>)
    29ae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    29b0:	2004      	movs	r0, #4
    29b2:	4b33      	ldr	r3, [pc, #204]	; (2a80 <system_clock_init+0x168>)
    29b4:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    29b6:	ab05      	add	r3, sp, #20
    29b8:	2200      	movs	r2, #0
    29ba:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    29bc:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    29be:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    29c0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    29c2:	213f      	movs	r1, #63	; 0x3f
    29c4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    29c6:	393b      	subs	r1, #59	; 0x3b
    29c8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    29ca:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    29cc:	6823      	ldr	r3, [r4, #0]
    29ce:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    29d0:	2b3f      	cmp	r3, #63	; 0x3f
    29d2:	d04a      	beq.n	2a6a <system_clock_init+0x152>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    29d4:	a805      	add	r0, sp, #20
    29d6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    29d8:	4b2d      	ldr	r3, [pc, #180]	; (2a90 <system_clock_init+0x178>)
    29da:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    29dc:	2307      	movs	r3, #7
    29de:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    29e0:	3338      	adds	r3, #56	; 0x38
    29e2:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    29e4:	4b2b      	ldr	r3, [pc, #172]	; (2a94 <system_clock_init+0x17c>)
    29e6:	4798      	blx	r3
	config->run_in_standby  = false;
    29e8:	a804      	add	r0, sp, #16
    29ea:	2500      	movs	r5, #0
    29ec:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    29ee:	2601      	movs	r6, #1
    29f0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    29f2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    29f4:	4b28      	ldr	r3, [pc, #160]	; (2a98 <system_clock_init+0x180>)
    29f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    29f8:	2006      	movs	r0, #6
    29fa:	4f21      	ldr	r7, [pc, #132]	; (2a80 <system_clock_init+0x168>)
    29fc:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    29fe:	4b27      	ldr	r3, [pc, #156]	; (2a9c <system_clock_init+0x184>)
    2a00:	4798      	blx	r3
	config->division_factor    = 1;
    2a02:	ac01      	add	r4, sp, #4
    2a04:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2a06:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2a08:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2a0a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2a0c:	2304      	movs	r3, #4
    2a0e:	7023      	strb	r3, [r4, #0]
    2a10:	0021      	movs	r1, r4
    2a12:	2001      	movs	r0, #1
    2a14:	4b22      	ldr	r3, [pc, #136]	; (2aa0 <system_clock_init+0x188>)
    2a16:	4798      	blx	r3
    2a18:	2001      	movs	r0, #1
    2a1a:	4b22      	ldr	r3, [pc, #136]	; (2aa4 <system_clock_init+0x18c>)
    2a1c:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2a1e:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2a20:	0021      	movs	r1, r4
    2a22:	2000      	movs	r0, #0
    2a24:	4b14      	ldr	r3, [pc, #80]	; (2a78 <system_clock_init+0x160>)
    2a26:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2a28:	2000      	movs	r0, #0
    2a2a:	4b1f      	ldr	r3, [pc, #124]	; (2aa8 <system_clock_init+0x190>)
    2a2c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2a2e:	2007      	movs	r0, #7
    2a30:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2a32:	490f      	ldr	r1, [pc, #60]	; (2a70 <system_clock_init+0x158>)
    2a34:	22d0      	movs	r2, #208	; 0xd0
    2a36:	68cb      	ldr	r3, [r1, #12]
    2a38:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2a3a:	2bd0      	cmp	r3, #208	; 0xd0
    2a3c:	d1fb      	bne.n	2a36 <system_clock_init+0x11e>
	PM->CPUSEL.reg = (uint32_t)divider;
    2a3e:	4a1b      	ldr	r2, [pc, #108]	; (2aac <system_clock_init+0x194>)
    2a40:	2300      	movs	r3, #0
    2a42:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2a44:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2a46:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2a48:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2a4a:	a901      	add	r1, sp, #4
    2a4c:	2201      	movs	r2, #1
    2a4e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2a50:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2a52:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2a54:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2a56:	3307      	adds	r3, #7
    2a58:	700b      	strb	r3, [r1, #0]
    2a5a:	2000      	movs	r0, #0
    2a5c:	4b10      	ldr	r3, [pc, #64]	; (2aa0 <system_clock_init+0x188>)
    2a5e:	4798      	blx	r3
    2a60:	2000      	movs	r0, #0
    2a62:	4b10      	ldr	r3, [pc, #64]	; (2aa4 <system_clock_init+0x18c>)
    2a64:	4798      	blx	r3
#endif
}
    2a66:	b011      	add	sp, #68	; 0x44
    2a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2a6a:	3b20      	subs	r3, #32
    2a6c:	e7b2      	b.n	29d4 <system_clock_init+0xbc>
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	40000800 	.word	0x40000800
    2a74:	41004000 	.word	0x41004000
    2a78:	00002ce9 	.word	0x00002ce9
    2a7c:	00002739 	.word	0x00002739
    2a80:	00002871 	.word	0x00002871
    2a84:	00806024 	.word	0x00806024
    2a88:	ff80ffff 	.word	0xff80ffff
    2a8c:	000026bd 	.word	0x000026bd
    2a90:	000005b9 	.word	0x000005b9
    2a94:	000027f1 	.word	0x000027f1
    2a98:	00002681 	.word	0x00002681
    2a9c:	00002ab1 	.word	0x00002ab1
    2aa0:	00002ad5 	.word	0x00002ad5
    2aa4:	00002b8d 	.word	0x00002b8d
    2aa8:	00002c5d 	.word	0x00002c5d
    2aac:	40000400 	.word	0x40000400

00002ab0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2ab0:	4a06      	ldr	r2, [pc, #24]	; (2acc <system_gclk_init+0x1c>)
    2ab2:	6993      	ldr	r3, [r2, #24]
    2ab4:	2108      	movs	r1, #8
    2ab6:	430b      	orrs	r3, r1
    2ab8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2aba:	2201      	movs	r2, #1
    2abc:	4b04      	ldr	r3, [pc, #16]	; (2ad0 <system_gclk_init+0x20>)
    2abe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2ac0:	0019      	movs	r1, r3
    2ac2:	780b      	ldrb	r3, [r1, #0]
    2ac4:	4213      	tst	r3, r2
    2ac6:	d1fc      	bne.n	2ac2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2ac8:	4770      	bx	lr
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	40000400 	.word	0x40000400
    2ad0:	40000c00 	.word	0x40000c00

00002ad4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2ad4:	b570      	push	{r4, r5, r6, lr}
    2ad6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2ad8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2ada:	780d      	ldrb	r5, [r1, #0]
    2adc:	022d      	lsls	r5, r5, #8
    2ade:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2ae0:	784b      	ldrb	r3, [r1, #1]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d002      	beq.n	2aec <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2ae6:	2380      	movs	r3, #128	; 0x80
    2ae8:	02db      	lsls	r3, r3, #11
    2aea:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2aec:	7a4b      	ldrb	r3, [r1, #9]
    2aee:	2b00      	cmp	r3, #0
    2af0:	d002      	beq.n	2af8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2af2:	2380      	movs	r3, #128	; 0x80
    2af4:	031b      	lsls	r3, r3, #12
    2af6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2af8:	6848      	ldr	r0, [r1, #4]
    2afa:	2801      	cmp	r0, #1
    2afc:	d910      	bls.n	2b20 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2afe:	1e43      	subs	r3, r0, #1
    2b00:	4218      	tst	r0, r3
    2b02:	d134      	bne.n	2b6e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2b04:	2802      	cmp	r0, #2
    2b06:	d930      	bls.n	2b6a <system_gclk_gen_set_config+0x96>
    2b08:	2302      	movs	r3, #2
    2b0a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2b0c:	3201      	adds	r2, #1
						mask <<= 1) {
    2b0e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2b10:	4298      	cmp	r0, r3
    2b12:	d8fb      	bhi.n	2b0c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2b14:	0212      	lsls	r2, r2, #8
    2b16:	4332      	orrs	r2, r6
    2b18:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2b1a:	2380      	movs	r3, #128	; 0x80
    2b1c:	035b      	lsls	r3, r3, #13
    2b1e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2b20:	7a0b      	ldrb	r3, [r1, #8]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d002      	beq.n	2b2c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2b26:	2380      	movs	r3, #128	; 0x80
    2b28:	039b      	lsls	r3, r3, #14
    2b2a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b2c:	4a13      	ldr	r2, [pc, #76]	; (2b7c <system_gclk_gen_set_config+0xa8>)
    2b2e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2b30:	b25b      	sxtb	r3, r3
    2b32:	2b00      	cmp	r3, #0
    2b34:	dbfb      	blt.n	2b2e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2b36:	4b12      	ldr	r3, [pc, #72]	; (2b80 <system_gclk_gen_set_config+0xac>)
    2b38:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2b3a:	4b12      	ldr	r3, [pc, #72]	; (2b84 <system_gclk_gen_set_config+0xb0>)
    2b3c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b3e:	4a0f      	ldr	r2, [pc, #60]	; (2b7c <system_gclk_gen_set_config+0xa8>)
    2b40:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2b42:	b25b      	sxtb	r3, r3
    2b44:	2b00      	cmp	r3, #0
    2b46:	dbfb      	blt.n	2b40 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2b48:	4b0c      	ldr	r3, [pc, #48]	; (2b7c <system_gclk_gen_set_config+0xa8>)
    2b4a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b4c:	001a      	movs	r2, r3
    2b4e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2b50:	b25b      	sxtb	r3, r3
    2b52:	2b00      	cmp	r3, #0
    2b54:	dbfb      	blt.n	2b4e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2b56:	4a09      	ldr	r2, [pc, #36]	; (2b7c <system_gclk_gen_set_config+0xa8>)
    2b58:	6853      	ldr	r3, [r2, #4]
    2b5a:	2180      	movs	r1, #128	; 0x80
    2b5c:	0249      	lsls	r1, r1, #9
    2b5e:	400b      	ands	r3, r1
    2b60:	431d      	orrs	r5, r3
    2b62:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2b64:	4b08      	ldr	r3, [pc, #32]	; (2b88 <system_gclk_gen_set_config+0xb4>)
    2b66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b68:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2b6a:	2200      	movs	r2, #0
    2b6c:	e7d2      	b.n	2b14 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2b6e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2b70:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2b72:	2380      	movs	r3, #128	; 0x80
    2b74:	029b      	lsls	r3, r3, #10
    2b76:	431d      	orrs	r5, r3
    2b78:	e7d2      	b.n	2b20 <system_gclk_gen_set_config+0x4c>
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	40000c00 	.word	0x40000c00
    2b80:	000014f9 	.word	0x000014f9
    2b84:	40000c08 	.word	0x40000c08
    2b88:	00001539 	.word	0x00001539

00002b8c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2b8c:	b510      	push	{r4, lr}
    2b8e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b90:	4a0b      	ldr	r2, [pc, #44]	; (2bc0 <system_gclk_gen_enable+0x34>)
    2b92:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b94:	b25b      	sxtb	r3, r3
    2b96:	2b00      	cmp	r3, #0
    2b98:	dbfb      	blt.n	2b92 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2b9a:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <system_gclk_gen_enable+0x38>)
    2b9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b9e:	4b0a      	ldr	r3, [pc, #40]	; (2bc8 <system_gclk_gen_enable+0x3c>)
    2ba0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ba2:	4a07      	ldr	r2, [pc, #28]	; (2bc0 <system_gclk_gen_enable+0x34>)
    2ba4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2ba6:	b25b      	sxtb	r3, r3
    2ba8:	2b00      	cmp	r3, #0
    2baa:	dbfb      	blt.n	2ba4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2bac:	4a04      	ldr	r2, [pc, #16]	; (2bc0 <system_gclk_gen_enable+0x34>)
    2bae:	6851      	ldr	r1, [r2, #4]
    2bb0:	2380      	movs	r3, #128	; 0x80
    2bb2:	025b      	lsls	r3, r3, #9
    2bb4:	430b      	orrs	r3, r1
    2bb6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2bb8:	4b04      	ldr	r3, [pc, #16]	; (2bcc <system_gclk_gen_enable+0x40>)
    2bba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2bbc:	bd10      	pop	{r4, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	40000c00 	.word	0x40000c00
    2bc4:	000014f9 	.word	0x000014f9
    2bc8:	40000c04 	.word	0x40000c04
    2bcc:	00001539 	.word	0x00001539

00002bd0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2bd0:	b570      	push	{r4, r5, r6, lr}
    2bd2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bd4:	4a1a      	ldr	r2, [pc, #104]	; (2c40 <system_gclk_gen_get_hz+0x70>)
    2bd6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2bd8:	b25b      	sxtb	r3, r3
    2bda:	2b00      	cmp	r3, #0
    2bdc:	dbfb      	blt.n	2bd6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2bde:	4b19      	ldr	r3, [pc, #100]	; (2c44 <system_gclk_gen_get_hz+0x74>)
    2be0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2be2:	4b19      	ldr	r3, [pc, #100]	; (2c48 <system_gclk_gen_get_hz+0x78>)
    2be4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2be6:	4a16      	ldr	r2, [pc, #88]	; (2c40 <system_gclk_gen_get_hz+0x70>)
    2be8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2bea:	b25b      	sxtb	r3, r3
    2bec:	2b00      	cmp	r3, #0
    2bee:	dbfb      	blt.n	2be8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2bf0:	4e13      	ldr	r6, [pc, #76]	; (2c40 <system_gclk_gen_get_hz+0x70>)
    2bf2:	6870      	ldr	r0, [r6, #4]
    2bf4:	04c0      	lsls	r0, r0, #19
    2bf6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2bf8:	4b14      	ldr	r3, [pc, #80]	; (2c4c <system_gclk_gen_get_hz+0x7c>)
    2bfa:	4798      	blx	r3
    2bfc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2bfe:	4b12      	ldr	r3, [pc, #72]	; (2c48 <system_gclk_gen_get_hz+0x78>)
    2c00:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2c02:	6876      	ldr	r6, [r6, #4]
    2c04:	02f6      	lsls	r6, r6, #11
    2c06:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2c08:	4b11      	ldr	r3, [pc, #68]	; (2c50 <system_gclk_gen_get_hz+0x80>)
    2c0a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c0c:	4a0c      	ldr	r2, [pc, #48]	; (2c40 <system_gclk_gen_get_hz+0x70>)
    2c0e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c10:	b25b      	sxtb	r3, r3
    2c12:	2b00      	cmp	r3, #0
    2c14:	dbfb      	blt.n	2c0e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2c16:	4b0a      	ldr	r3, [pc, #40]	; (2c40 <system_gclk_gen_get_hz+0x70>)
    2c18:	689c      	ldr	r4, [r3, #8]
    2c1a:	0224      	lsls	r4, r4, #8
    2c1c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2c1e:	4b0d      	ldr	r3, [pc, #52]	; (2c54 <system_gclk_gen_get_hz+0x84>)
    2c20:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2c22:	2e00      	cmp	r6, #0
    2c24:	d107      	bne.n	2c36 <system_gclk_gen_get_hz+0x66>
    2c26:	2c01      	cmp	r4, #1
    2c28:	d907      	bls.n	2c3a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2c2a:	0021      	movs	r1, r4
    2c2c:	0028      	movs	r0, r5
    2c2e:	4b0a      	ldr	r3, [pc, #40]	; (2c58 <system_gclk_gen_get_hz+0x88>)
    2c30:	4798      	blx	r3
    2c32:	0005      	movs	r5, r0
    2c34:	e001      	b.n	2c3a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2c36:	3401      	adds	r4, #1
    2c38:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2c3a:	0028      	movs	r0, r5
    2c3c:	bd70      	pop	{r4, r5, r6, pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	40000c00 	.word	0x40000c00
    2c44:	000014f9 	.word	0x000014f9
    2c48:	40000c04 	.word	0x40000c04
    2c4c:	000025ed 	.word	0x000025ed
    2c50:	40000c08 	.word	0x40000c08
    2c54:	00001539 	.word	0x00001539
    2c58:	00003751 	.word	0x00003751

00002c5c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2c5c:	b510      	push	{r4, lr}
    2c5e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2c60:	4b06      	ldr	r3, [pc, #24]	; (2c7c <system_gclk_chan_enable+0x20>)
    2c62:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c64:	4b06      	ldr	r3, [pc, #24]	; (2c80 <system_gclk_chan_enable+0x24>)
    2c66:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2c68:	4a06      	ldr	r2, [pc, #24]	; (2c84 <system_gclk_chan_enable+0x28>)
    2c6a:	8853      	ldrh	r3, [r2, #2]
    2c6c:	2180      	movs	r1, #128	; 0x80
    2c6e:	01c9      	lsls	r1, r1, #7
    2c70:	430b      	orrs	r3, r1
    2c72:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2c74:	4b04      	ldr	r3, [pc, #16]	; (2c88 <system_gclk_chan_enable+0x2c>)
    2c76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c78:	bd10      	pop	{r4, pc}
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	000014f9 	.word	0x000014f9
    2c80:	40000c02 	.word	0x40000c02
    2c84:	40000c00 	.word	0x40000c00
    2c88:	00001539 	.word	0x00001539

00002c8c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2c8c:	b510      	push	{r4, lr}
    2c8e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2c90:	4b0f      	ldr	r3, [pc, #60]	; (2cd0 <system_gclk_chan_disable+0x44>)
    2c92:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c94:	4b0f      	ldr	r3, [pc, #60]	; (2cd4 <system_gclk_chan_disable+0x48>)
    2c96:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2c98:	4a0f      	ldr	r2, [pc, #60]	; (2cd8 <system_gclk_chan_disable+0x4c>)
    2c9a:	8853      	ldrh	r3, [r2, #2]
    2c9c:	051b      	lsls	r3, r3, #20
    2c9e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2ca0:	8853      	ldrh	r3, [r2, #2]
    2ca2:	490e      	ldr	r1, [pc, #56]	; (2cdc <system_gclk_chan_disable+0x50>)
    2ca4:	400b      	ands	r3, r1
    2ca6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2ca8:	8853      	ldrh	r3, [r2, #2]
    2caa:	490d      	ldr	r1, [pc, #52]	; (2ce0 <system_gclk_chan_disable+0x54>)
    2cac:	400b      	ands	r3, r1
    2cae:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2cb0:	0011      	movs	r1, r2
    2cb2:	2280      	movs	r2, #128	; 0x80
    2cb4:	01d2      	lsls	r2, r2, #7
    2cb6:	884b      	ldrh	r3, [r1, #2]
    2cb8:	4213      	tst	r3, r2
    2cba:	d1fc      	bne.n	2cb6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2cbc:	4906      	ldr	r1, [pc, #24]	; (2cd8 <system_gclk_chan_disable+0x4c>)
    2cbe:	884a      	ldrh	r2, [r1, #2]
    2cc0:	0203      	lsls	r3, r0, #8
    2cc2:	4806      	ldr	r0, [pc, #24]	; (2cdc <system_gclk_chan_disable+0x50>)
    2cc4:	4002      	ands	r2, r0
    2cc6:	4313      	orrs	r3, r2
    2cc8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2cca:	4b06      	ldr	r3, [pc, #24]	; (2ce4 <system_gclk_chan_disable+0x58>)
    2ccc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2cce:	bd10      	pop	{r4, pc}
    2cd0:	000014f9 	.word	0x000014f9
    2cd4:	40000c02 	.word	0x40000c02
    2cd8:	40000c00 	.word	0x40000c00
    2cdc:	fffff0ff 	.word	0xfffff0ff
    2ce0:	ffffbfff 	.word	0xffffbfff
    2ce4:	00001539 	.word	0x00001539

00002ce8 <system_gclk_chan_set_config>:
{
    2ce8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2cea:	780c      	ldrb	r4, [r1, #0]
    2cec:	0224      	lsls	r4, r4, #8
    2cee:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2cf0:	4b02      	ldr	r3, [pc, #8]	; (2cfc <system_gclk_chan_set_config+0x14>)
    2cf2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2cf4:	b2a4      	uxth	r4, r4
    2cf6:	4b02      	ldr	r3, [pc, #8]	; (2d00 <system_gclk_chan_set_config+0x18>)
    2cf8:	805c      	strh	r4, [r3, #2]
}
    2cfa:	bd10      	pop	{r4, pc}
    2cfc:	00002c8d 	.word	0x00002c8d
    2d00:	40000c00 	.word	0x40000c00

00002d04 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2d04:	b510      	push	{r4, lr}
    2d06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d08:	4b06      	ldr	r3, [pc, #24]	; (2d24 <system_gclk_chan_get_hz+0x20>)
    2d0a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d0c:	4b06      	ldr	r3, [pc, #24]	; (2d28 <system_gclk_chan_get_hz+0x24>)
    2d0e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2d10:	4b06      	ldr	r3, [pc, #24]	; (2d2c <system_gclk_chan_get_hz+0x28>)
    2d12:	885c      	ldrh	r4, [r3, #2]
    2d14:	0524      	lsls	r4, r4, #20
    2d16:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2d18:	4b05      	ldr	r3, [pc, #20]	; (2d30 <system_gclk_chan_get_hz+0x2c>)
    2d1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2d1c:	0020      	movs	r0, r4
    2d1e:	4b05      	ldr	r3, [pc, #20]	; (2d34 <system_gclk_chan_get_hz+0x30>)
    2d20:	4798      	blx	r3
}
    2d22:	bd10      	pop	{r4, pc}
    2d24:	000014f9 	.word	0x000014f9
    2d28:	40000c02 	.word	0x40000c02
    2d2c:	40000c00 	.word	0x40000c00
    2d30:	00001539 	.word	0x00001539
    2d34:	00002bd1 	.word	0x00002bd1

00002d38 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2d38:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2d3a:	78d3      	ldrb	r3, [r2, #3]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d135      	bne.n	2dac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2d40:	7813      	ldrb	r3, [r2, #0]
    2d42:	2b80      	cmp	r3, #128	; 0x80
    2d44:	d029      	beq.n	2d9a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2d46:	061b      	lsls	r3, r3, #24
    2d48:	2480      	movs	r4, #128	; 0x80
    2d4a:	0264      	lsls	r4, r4, #9
    2d4c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2d4e:	7854      	ldrb	r4, [r2, #1]
    2d50:	2502      	movs	r5, #2
    2d52:	43ac      	bics	r4, r5
    2d54:	d106      	bne.n	2d64 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2d56:	7894      	ldrb	r4, [r2, #2]
    2d58:	2c00      	cmp	r4, #0
    2d5a:	d120      	bne.n	2d9e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2d5c:	2480      	movs	r4, #128	; 0x80
    2d5e:	02a4      	lsls	r4, r4, #10
    2d60:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2d62:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d64:	7854      	ldrb	r4, [r2, #1]
    2d66:	3c01      	subs	r4, #1
    2d68:	2c01      	cmp	r4, #1
    2d6a:	d91c      	bls.n	2da6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d6c:	040d      	lsls	r5, r1, #16
    2d6e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d70:	24a0      	movs	r4, #160	; 0xa0
    2d72:	05e4      	lsls	r4, r4, #23
    2d74:	432c      	orrs	r4, r5
    2d76:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d78:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d7a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d7c:	24d0      	movs	r4, #208	; 0xd0
    2d7e:	0624      	lsls	r4, r4, #24
    2d80:	432c      	orrs	r4, r5
    2d82:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d84:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2d86:	78d4      	ldrb	r4, [r2, #3]
    2d88:	2c00      	cmp	r4, #0
    2d8a:	d122      	bne.n	2dd2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2d8c:	035b      	lsls	r3, r3, #13
    2d8e:	d51c      	bpl.n	2dca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2d90:	7893      	ldrb	r3, [r2, #2]
    2d92:	2b01      	cmp	r3, #1
    2d94:	d01e      	beq.n	2dd4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2d96:	6141      	str	r1, [r0, #20]
    2d98:	e017      	b.n	2dca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2d9a:	2300      	movs	r3, #0
    2d9c:	e7d7      	b.n	2d4e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2d9e:	24c0      	movs	r4, #192	; 0xc0
    2da0:	02e4      	lsls	r4, r4, #11
    2da2:	4323      	orrs	r3, r4
    2da4:	e7dd      	b.n	2d62 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2da6:	4c0d      	ldr	r4, [pc, #52]	; (2ddc <_system_pinmux_config+0xa4>)
    2da8:	4023      	ands	r3, r4
    2daa:	e7df      	b.n	2d6c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2dac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2dae:	040c      	lsls	r4, r1, #16
    2db0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2db2:	23a0      	movs	r3, #160	; 0xa0
    2db4:	05db      	lsls	r3, r3, #23
    2db6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2db8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2dba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2dbc:	23d0      	movs	r3, #208	; 0xd0
    2dbe:	061b      	lsls	r3, r3, #24
    2dc0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2dc2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2dc4:	78d3      	ldrb	r3, [r2, #3]
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d103      	bne.n	2dd2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2dca:	7853      	ldrb	r3, [r2, #1]
    2dcc:	3b01      	subs	r3, #1
    2dce:	2b01      	cmp	r3, #1
    2dd0:	d902      	bls.n	2dd8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2dd2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2dd4:	6181      	str	r1, [r0, #24]
    2dd6:	e7f8      	b.n	2dca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2dd8:	6081      	str	r1, [r0, #8]
}
    2dda:	e7fa      	b.n	2dd2 <_system_pinmux_config+0x9a>
    2ddc:	fffbffff 	.word	0xfffbffff

00002de0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2de0:	b510      	push	{r4, lr}
    2de2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2de4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2de6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2de8:	2900      	cmp	r1, #0
    2dea:	d104      	bne.n	2df6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2dec:	0943      	lsrs	r3, r0, #5
    2dee:	01db      	lsls	r3, r3, #7
    2df0:	4905      	ldr	r1, [pc, #20]	; (2e08 <system_pinmux_pin_set_config+0x28>)
    2df2:	468c      	mov	ip, r1
    2df4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2df6:	241f      	movs	r4, #31
    2df8:	4020      	ands	r0, r4
    2dfa:	2101      	movs	r1, #1
    2dfc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2dfe:	0018      	movs	r0, r3
    2e00:	4b02      	ldr	r3, [pc, #8]	; (2e0c <system_pinmux_pin_set_config+0x2c>)
    2e02:	4798      	blx	r3
}
    2e04:	bd10      	pop	{r4, pc}
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	41004400 	.word	0x41004400
    2e0c:	00002d39 	.word	0x00002d39

00002e10 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2e10:	4770      	bx	lr
	...

00002e14 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2e14:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2e16:	4b05      	ldr	r3, [pc, #20]	; (2e2c <system_init+0x18>)
    2e18:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2e1a:	4b05      	ldr	r3, [pc, #20]	; (2e30 <system_init+0x1c>)
    2e1c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2e1e:	4b05      	ldr	r3, [pc, #20]	; (2e34 <system_init+0x20>)
    2e20:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2e22:	4b05      	ldr	r3, [pc, #20]	; (2e38 <system_init+0x24>)
    2e24:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2e26:	4b05      	ldr	r3, [pc, #20]	; (2e3c <system_init+0x28>)
    2e28:	4798      	blx	r3
}
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	00002919 	.word	0x00002919
    2e30:	00001569 	.word	0x00001569
    2e34:	00002e11 	.word	0x00002e11
    2e38:	0000160d 	.word	0x0000160d
    2e3c:	00002e11 	.word	0x00002e11

00002e40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2e40:	e7fe      	b.n	2e40 <Dummy_Handler>
	...

00002e44 <Reset_Handler>:
{
    2e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2e46:	4a2a      	ldr	r2, [pc, #168]	; (2ef0 <Reset_Handler+0xac>)
    2e48:	4b2a      	ldr	r3, [pc, #168]	; (2ef4 <Reset_Handler+0xb0>)
    2e4a:	429a      	cmp	r2, r3
    2e4c:	d011      	beq.n	2e72 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2e4e:	001a      	movs	r2, r3
    2e50:	4b29      	ldr	r3, [pc, #164]	; (2ef8 <Reset_Handler+0xb4>)
    2e52:	429a      	cmp	r2, r3
    2e54:	d20d      	bcs.n	2e72 <Reset_Handler+0x2e>
    2e56:	4a29      	ldr	r2, [pc, #164]	; (2efc <Reset_Handler+0xb8>)
    2e58:	3303      	adds	r3, #3
    2e5a:	1a9b      	subs	r3, r3, r2
    2e5c:	089b      	lsrs	r3, r3, #2
    2e5e:	3301      	adds	r3, #1
    2e60:	009b      	lsls	r3, r3, #2
    2e62:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2e64:	4823      	ldr	r0, [pc, #140]	; (2ef4 <Reset_Handler+0xb0>)
    2e66:	4922      	ldr	r1, [pc, #136]	; (2ef0 <Reset_Handler+0xac>)
    2e68:	588c      	ldr	r4, [r1, r2]
    2e6a:	5084      	str	r4, [r0, r2]
    2e6c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2e6e:	429a      	cmp	r2, r3
    2e70:	d1fa      	bne.n	2e68 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2e72:	4a23      	ldr	r2, [pc, #140]	; (2f00 <Reset_Handler+0xbc>)
    2e74:	4b23      	ldr	r3, [pc, #140]	; (2f04 <Reset_Handler+0xc0>)
    2e76:	429a      	cmp	r2, r3
    2e78:	d20a      	bcs.n	2e90 <Reset_Handler+0x4c>
    2e7a:	43d3      	mvns	r3, r2
    2e7c:	4921      	ldr	r1, [pc, #132]	; (2f04 <Reset_Handler+0xc0>)
    2e7e:	185b      	adds	r3, r3, r1
    2e80:	2103      	movs	r1, #3
    2e82:	438b      	bics	r3, r1
    2e84:	3304      	adds	r3, #4
    2e86:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2e88:	2100      	movs	r1, #0
    2e8a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2e8c:	4293      	cmp	r3, r2
    2e8e:	d1fc      	bne.n	2e8a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2e90:	4a1d      	ldr	r2, [pc, #116]	; (2f08 <Reset_Handler+0xc4>)
    2e92:	21ff      	movs	r1, #255	; 0xff
    2e94:	4b1d      	ldr	r3, [pc, #116]	; (2f0c <Reset_Handler+0xc8>)
    2e96:	438b      	bics	r3, r1
    2e98:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2e9a:	39fd      	subs	r1, #253	; 0xfd
    2e9c:	2390      	movs	r3, #144	; 0x90
    2e9e:	005b      	lsls	r3, r3, #1
    2ea0:	4a1b      	ldr	r2, [pc, #108]	; (2f10 <Reset_Handler+0xcc>)
    2ea2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2ea4:	4a1b      	ldr	r2, [pc, #108]	; (2f14 <Reset_Handler+0xd0>)
    2ea6:	78d3      	ldrb	r3, [r2, #3]
    2ea8:	2503      	movs	r5, #3
    2eaa:	43ab      	bics	r3, r5
    2eac:	2402      	movs	r4, #2
    2eae:	4323      	orrs	r3, r4
    2eb0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2eb2:	78d3      	ldrb	r3, [r2, #3]
    2eb4:	270c      	movs	r7, #12
    2eb6:	43bb      	bics	r3, r7
    2eb8:	2608      	movs	r6, #8
    2eba:	4333      	orrs	r3, r6
    2ebc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2ebe:	4b16      	ldr	r3, [pc, #88]	; (2f18 <Reset_Handler+0xd4>)
    2ec0:	7b98      	ldrb	r0, [r3, #14]
    2ec2:	2230      	movs	r2, #48	; 0x30
    2ec4:	4390      	bics	r0, r2
    2ec6:	2220      	movs	r2, #32
    2ec8:	4310      	orrs	r0, r2
    2eca:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2ecc:	7b99      	ldrb	r1, [r3, #14]
    2ece:	43b9      	bics	r1, r7
    2ed0:	4331      	orrs	r1, r6
    2ed2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2ed4:	7b9a      	ldrb	r2, [r3, #14]
    2ed6:	43aa      	bics	r2, r5
    2ed8:	4322      	orrs	r2, r4
    2eda:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2edc:	4a0f      	ldr	r2, [pc, #60]	; (2f1c <Reset_Handler+0xd8>)
    2ede:	6853      	ldr	r3, [r2, #4]
    2ee0:	2180      	movs	r1, #128	; 0x80
    2ee2:	430b      	orrs	r3, r1
    2ee4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2ee6:	4b0e      	ldr	r3, [pc, #56]	; (2f20 <Reset_Handler+0xdc>)
    2ee8:	4798      	blx	r3
        main();
    2eea:	4b0e      	ldr	r3, [pc, #56]	; (2f24 <Reset_Handler+0xe0>)
    2eec:	4798      	blx	r3
    2eee:	e7fe      	b.n	2eee <Reset_Handler+0xaa>
    2ef0:	000053d8 	.word	0x000053d8
    2ef4:	20000000 	.word	0x20000000
    2ef8:	20000070 	.word	0x20000070
    2efc:	20000004 	.word	0x20000004
    2f00:	20000070 	.word	0x20000070
    2f04:	20000618 	.word	0x20000618
    2f08:	e000ed00 	.word	0xe000ed00
    2f0c:	00000000 	.word	0x00000000
    2f10:	41007000 	.word	0x41007000
    2f14:	41005000 	.word	0x41005000
    2f18:	41004800 	.word	0x41004800
    2f1c:	41004000 	.word	0x41004000
    2f20:	000038bd 	.word	0x000038bd
    2f24:	00003219 	.word	0x00003219

00002f28 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f2a:	46c6      	mov	lr, r8
    2f2c:	b500      	push	{lr}
    2f2e:	000c      	movs	r4, r1
    2f30:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2f32:	2800      	cmp	r0, #0
    2f34:	d10f      	bne.n	2f56 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2f36:	2a00      	cmp	r2, #0
    2f38:	dd11      	ble.n	2f5e <_read+0x36>
    2f3a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2f3c:	4e09      	ldr	r6, [pc, #36]	; (2f64 <_read+0x3c>)
    2f3e:	4d0a      	ldr	r5, [pc, #40]	; (2f68 <_read+0x40>)
    2f40:	6830      	ldr	r0, [r6, #0]
    2f42:	0021      	movs	r1, r4
    2f44:	682b      	ldr	r3, [r5, #0]
    2f46:	4798      	blx	r3
		ptr++;
    2f48:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2f4a:	42bc      	cmp	r4, r7
    2f4c:	d1f8      	bne.n	2f40 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2f4e:	4640      	mov	r0, r8
    2f50:	bc04      	pop	{r2}
    2f52:	4690      	mov	r8, r2
    2f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2f56:	2301      	movs	r3, #1
    2f58:	425b      	negs	r3, r3
    2f5a:	4698      	mov	r8, r3
    2f5c:	e7f7      	b.n	2f4e <_read+0x26>
	for (; len > 0; --len) {
    2f5e:	4680      	mov	r8, r0
    2f60:	e7f5      	b.n	2f4e <_read+0x26>
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	20000610 	.word	0x20000610
    2f68:	20000608 	.word	0x20000608

00002f6c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f6e:	46c6      	mov	lr, r8
    2f70:	b500      	push	{lr}
    2f72:	000e      	movs	r6, r1
    2f74:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2f76:	3801      	subs	r0, #1
    2f78:	2802      	cmp	r0, #2
    2f7a:	d810      	bhi.n	2f9e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2f7c:	2a00      	cmp	r2, #0
    2f7e:	d011      	beq.n	2fa4 <_write+0x38>
    2f80:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2f82:	4b0c      	ldr	r3, [pc, #48]	; (2fb4 <_write+0x48>)
    2f84:	4698      	mov	r8, r3
    2f86:	4f0c      	ldr	r7, [pc, #48]	; (2fb8 <_write+0x4c>)
    2f88:	4643      	mov	r3, r8
    2f8a:	6818      	ldr	r0, [r3, #0]
    2f8c:	5d31      	ldrb	r1, [r6, r4]
    2f8e:	683b      	ldr	r3, [r7, #0]
    2f90:	4798      	blx	r3
    2f92:	2800      	cmp	r0, #0
    2f94:	db08      	blt.n	2fa8 <_write+0x3c>
			return -1;
		}
		++nChars;
    2f96:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2f98:	42a5      	cmp	r5, r4
    2f9a:	d1f5      	bne.n	2f88 <_write+0x1c>
    2f9c:	e006      	b.n	2fac <_write+0x40>
		return -1;
    2f9e:	2401      	movs	r4, #1
    2fa0:	4264      	negs	r4, r4
    2fa2:	e003      	b.n	2fac <_write+0x40>
	for (; len != 0; --len) {
    2fa4:	0014      	movs	r4, r2
    2fa6:	e001      	b.n	2fac <_write+0x40>
			return -1;
    2fa8:	2401      	movs	r4, #1
    2faa:	4264      	negs	r4, r4
	}
	return nChars;
}
    2fac:	0020      	movs	r0, r4
    2fae:	bc04      	pop	{r2}
    2fb0:	4690      	mov	r8, r2
    2fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fb4:	20000610 	.word	0x20000610
    2fb8:	2000060c 	.word	0x2000060c

00002fbc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2fbc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2fbe:	4a06      	ldr	r2, [pc, #24]	; (2fd8 <_sbrk+0x1c>)
    2fc0:	6812      	ldr	r2, [r2, #0]
    2fc2:	2a00      	cmp	r2, #0
    2fc4:	d004      	beq.n	2fd0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2fc6:	4a04      	ldr	r2, [pc, #16]	; (2fd8 <_sbrk+0x1c>)
    2fc8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2fca:	18c3      	adds	r3, r0, r3
    2fcc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2fce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2fd0:	4902      	ldr	r1, [pc, #8]	; (2fdc <_sbrk+0x20>)
    2fd2:	4a01      	ldr	r2, [pc, #4]	; (2fd8 <_sbrk+0x1c>)
    2fd4:	6011      	str	r1, [r2, #0]
    2fd6:	e7f6      	b.n	2fc6 <_sbrk+0xa>
    2fd8:	200000d8 	.word	0x200000d8
    2fdc:	20002618 	.word	0x20002618

00002fe0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2fe0:	2001      	movs	r0, #1
    2fe2:	4240      	negs	r0, r0
    2fe4:	4770      	bx	lr

00002fe6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2fe6:	2380      	movs	r3, #128	; 0x80
    2fe8:	019b      	lsls	r3, r3, #6
    2fea:	604b      	str	r3, [r1, #4]

	return 0;
}
    2fec:	2000      	movs	r0, #0
    2fee:	4770      	bx	lr

00002ff0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2ff0:	2001      	movs	r0, #1
    2ff2:	4770      	bx	lr

00002ff4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2ff4:	2000      	movs	r0, #0
    2ff6:	4770      	bx	lr

00002ff8 <usart_rx_complete_handler>:
	}
}

static void usart_rx_complete_handler(struct usart_module *const module)
{
	usart_pkt_received = 1;
    2ff8:	2201      	movs	r2, #1
    2ffa:	4b0a      	ldr	r3, [pc, #40]	; (3024 <usart_rx_complete_handler+0x2c>)
    2ffc:	701a      	strb	r2, [r3, #0]
	usart_pkt = (uint8_t *)(module->rx_buffer_ptr - schedule_rx_length);
    2ffe:	4b0a      	ldr	r3, [pc, #40]	; (3028 <usart_rx_complete_handler+0x30>)
    3000:	881a      	ldrh	r2, [r3, #0]
    3002:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3004:	1a9b      	subs	r3, r3, r2
    3006:	4a09      	ldr	r2, [pc, #36]	; (302c <usart_rx_complete_handler+0x34>)
    3008:	6013      	str	r3, [r2, #0]
	if (change_state) {
    300a:	4b09      	ldr	r3, [pc, #36]	; (3030 <usart_rx_complete_handler+0x38>)
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	2b00      	cmp	r3, #0
    3010:	d006      	beq.n	3020 <usart_rx_complete_handler+0x28>
		usart_prot_handler_status = new_state;
    3012:	4b08      	ldr	r3, [pc, #32]	; (3034 <usart_rx_complete_handler+0x3c>)
    3014:	781a      	ldrb	r2, [r3, #0]
    3016:	4b08      	ldr	r3, [pc, #32]	; (3038 <usart_rx_complete_handler+0x40>)
    3018:	701a      	strb	r2, [r3, #0]
		change_state = 0;
    301a:	2200      	movs	r2, #0
    301c:	4b04      	ldr	r3, [pc, #16]	; (3030 <usart_rx_complete_handler+0x38>)
    301e:	701a      	strb	r2, [r3, #0]
	}
}
    3020:	4770      	bx	lr
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	2000054c 	.word	0x2000054c
    3028:	2000011c 	.word	0x2000011c
    302c:	20000548 	.word	0x20000548
    3030:	20000110 	.word	0x20000110
    3034:	20000111 	.word	0x20000111
    3038:	2000054d 	.word	0x2000054d

0000303c <usart_tx_complete_handler>:
{
    303c:	b510      	push	{r4, lr}
	if (schedule_rx) {
    303e:	4b10      	ldr	r3, [pc, #64]	; (3080 <usart_tx_complete_handler+0x44>)
    3040:	781b      	ldrb	r3, [r3, #0]
    3042:	2b00      	cmp	r3, #0
    3044:	d00a      	beq.n	305c <usart_tx_complete_handler+0x20>
		if (schedule_rx_length == 1) {
    3046:	4b0f      	ldr	r3, [pc, #60]	; (3084 <usart_tx_complete_handler+0x48>)
    3048:	881a      	ldrh	r2, [r3, #0]
    304a:	2a01      	cmp	r2, #1
    304c:	d012      	beq.n	3074 <usart_tx_complete_handler+0x38>
			usart_read_buffer_job((struct usart_module *)module, (uint8_t *)schedule_rx_buffer, schedule_rx_length);
    304e:	4b0e      	ldr	r3, [pc, #56]	; (3088 <usart_tx_complete_handler+0x4c>)
    3050:	6819      	ldr	r1, [r3, #0]
    3052:	4b0e      	ldr	r3, [pc, #56]	; (308c <usart_tx_complete_handler+0x50>)
    3054:	4798      	blx	r3
		schedule_rx = 0;
    3056:	2200      	movs	r2, #0
    3058:	4b09      	ldr	r3, [pc, #36]	; (3080 <usart_tx_complete_handler+0x44>)
    305a:	701a      	strb	r2, [r3, #0]
	if (change_state) {
    305c:	4b0c      	ldr	r3, [pc, #48]	; (3090 <usart_tx_complete_handler+0x54>)
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	2b00      	cmp	r3, #0
    3062:	d006      	beq.n	3072 <usart_tx_complete_handler+0x36>
		usart_prot_handler_status = new_state;
    3064:	4b0b      	ldr	r3, [pc, #44]	; (3094 <usart_tx_complete_handler+0x58>)
    3066:	781a      	ldrb	r2, [r3, #0]
    3068:	4b0b      	ldr	r3, [pc, #44]	; (3098 <usart_tx_complete_handler+0x5c>)
    306a:	701a      	strb	r2, [r3, #0]
		change_state = 0;
    306c:	2200      	movs	r2, #0
    306e:	4b08      	ldr	r3, [pc, #32]	; (3090 <usart_tx_complete_handler+0x54>)
    3070:	701a      	strb	r2, [r3, #0]
}
    3072:	bd10      	pop	{r4, pc}
			usart_read_job((struct usart_module *)module, schedule_rx_buffer);
    3074:	4b04      	ldr	r3, [pc, #16]	; (3088 <usart_tx_complete_handler+0x4c>)
    3076:	6819      	ldr	r1, [r3, #0]
    3078:	4b08      	ldr	r3, [pc, #32]	; (309c <usart_tx_complete_handler+0x60>)
    307a:	4798      	blx	r3
    307c:	e7eb      	b.n	3056 <usart_tx_complete_handler+0x1a>
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	20000114 	.word	0x20000114
    3084:	2000011c 	.word	0x2000011c
    3088:	20000118 	.word	0x20000118
    308c:	00002439 	.word	0x00002439
    3090:	20000110 	.word	0x20000110
    3094:	20000111 	.word	0x20000111
    3098:	2000054d 	.word	0x2000054d
    309c:	00002409 	.word	0x00002409

000030a0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    30a0:	b570      	push	{r4, r5, r6, lr}
    30a2:	b082      	sub	sp, #8
    30a4:	0005      	movs	r5, r0
    30a6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    30a8:	2200      	movs	r2, #0
    30aa:	466b      	mov	r3, sp
    30ac:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    30ae:	4c06      	ldr	r4, [pc, #24]	; (30c8 <usart_serial_getchar+0x28>)
    30b0:	466b      	mov	r3, sp
    30b2:	1d99      	adds	r1, r3, #6
    30b4:	0028      	movs	r0, r5
    30b6:	47a0      	blx	r4
    30b8:	2800      	cmp	r0, #0
    30ba:	d1f9      	bne.n	30b0 <usart_serial_getchar+0x10>

	*c = temp;
    30bc:	466b      	mov	r3, sp
    30be:	3306      	adds	r3, #6
    30c0:	881b      	ldrh	r3, [r3, #0]
    30c2:	7033      	strb	r3, [r6, #0]
}
    30c4:	b002      	add	sp, #8
    30c6:	bd70      	pop	{r4, r5, r6, pc}
    30c8:	000022df 	.word	0x000022df

000030cc <usart_serial_putchar>:
{
    30cc:	b570      	push	{r4, r5, r6, lr}
    30ce:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    30d0:	b28c      	uxth	r4, r1
    30d2:	4e03      	ldr	r6, [pc, #12]	; (30e0 <usart_serial_putchar+0x14>)
    30d4:	0021      	movs	r1, r4
    30d6:	0028      	movs	r0, r5
    30d8:	47b0      	blx	r6
    30da:	2800      	cmp	r0, #0
    30dc:	d1fa      	bne.n	30d4 <usart_serial_putchar+0x8>
}
    30de:	bd70      	pop	{r4, r5, r6, pc}
    30e0:	000022b9 	.word	0x000022b9

000030e4 <configure_console>:
 * \brief Configure UART console.
 *
 * \param baud UART baudrate to use.
 */
static void configure_console(uint32_t baud)
{
    30e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30e6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    30e8:	2380      	movs	r3, #128	; 0x80
    30ea:	05db      	lsls	r3, r3, #23
    30ec:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    30ee:	2300      	movs	r3, #0
    30f0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    30f2:	22ff      	movs	r2, #255	; 0xff
    30f4:	4669      	mov	r1, sp
    30f6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    30f8:	2200      	movs	r2, #0
    30fa:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    30fc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    30fe:	2501      	movs	r5, #1
    3100:	2124      	movs	r1, #36	; 0x24
    3102:	466c      	mov	r4, sp
    3104:	5465      	strb	r5, [r4, r1]
	config->transmitter_enable = true;
    3106:	3101      	adds	r1, #1
    3108:	5465      	strb	r5, [r4, r1]
	config->clock_polarity_inverted = false;
    310a:	3101      	adds	r1, #1
    310c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    310e:	3101      	adds	r1, #1
    3110:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3112:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3114:	3105      	adds	r1, #5
    3116:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3118:	3101      	adds	r1, #1
    311a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    311c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    311e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3120:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3122:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3124:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3126:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    3128:	2313      	movs	r3, #19
    312a:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    312c:	7762      	strb	r2, [r4, #29]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    312e:	2380      	movs	r3, #128	; 0x80
    3130:	035b      	lsls	r3, r3, #13
    3132:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    3134:	4b24      	ldr	r3, [pc, #144]	; (31c8 <configure_console+0xe4>)
    3136:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    3138:	4b24      	ldr	r3, [pc, #144]	; (31cc <configure_console+0xe8>)
    313a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    313c:	2301      	movs	r3, #1
    313e:	425b      	negs	r3, r3
    3140:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    3142:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = baud;
    3144:	9008      	str	r0, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3146:	4c22      	ldr	r4, [pc, #136]	; (31d0 <configure_console+0xec>)
    3148:	4b22      	ldr	r3, [pc, #136]	; (31d4 <configure_console+0xf0>)
    314a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    314c:	4a22      	ldr	r2, [pc, #136]	; (31d8 <configure_console+0xf4>)
    314e:	4b23      	ldr	r3, [pc, #140]	; (31dc <configure_console+0xf8>)
    3150:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3152:	4a23      	ldr	r2, [pc, #140]	; (31e0 <configure_console+0xfc>)
    3154:	4b23      	ldr	r3, [pc, #140]	; (31e4 <configure_console+0x100>)
    3156:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3158:	466a      	mov	r2, sp
    315a:	4923      	ldr	r1, [pc, #140]	; (31e8 <configure_console+0x104>)
    315c:	0020      	movs	r0, r4
    315e:	4b23      	ldr	r3, [pc, #140]	; (31ec <configure_console+0x108>)
    3160:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3162:	4f23      	ldr	r7, [pc, #140]	; (31f0 <configure_console+0x10c>)
    3164:	683b      	ldr	r3, [r7, #0]
    3166:	6898      	ldr	r0, [r3, #8]
    3168:	2100      	movs	r1, #0
    316a:	4e22      	ldr	r6, [pc, #136]	; (31f4 <configure_console+0x110>)
    316c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    316e:	683b      	ldr	r3, [r7, #0]
    3170:	6858      	ldr	r0, [r3, #4]
    3172:	2100      	movs	r1, #0
    3174:	47b0      	blx	r6
	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
	usart_register_callback(&cdc_uart_module, usart_rx_complete_handler, USART_CALLBACK_BUFFER_RECEIVED);
    3176:	2201      	movs	r2, #1
    3178:	491f      	ldr	r1, [pc, #124]	; (31f8 <configure_console+0x114>)
    317a:	0020      	movs	r0, r4
    317c:	4e1f      	ldr	r6, [pc, #124]	; (31fc <configure_console+0x118>)
    317e:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, usart_tx_complete_handler, USART_CALLBACK_BUFFER_TRANSMITTED);
    3180:	2200      	movs	r2, #0
    3182:	491f      	ldr	r1, [pc, #124]	; (3200 <configure_console+0x11c>)
    3184:	0020      	movs	r0, r4
    3186:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3188:	2231      	movs	r2, #49	; 0x31
    318a:	5ca3      	ldrb	r3, [r4, r2]
    318c:	2103      	movs	r1, #3
    318e:	430b      	orrs	r3, r1
    3190:	54a3      	strb	r3, [r4, r2]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3192:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3194:	0030      	movs	r0, r6
    3196:	4b1b      	ldr	r3, [pc, #108]	; (3204 <configure_console+0x120>)
    3198:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    319a:	231f      	movs	r3, #31
    319c:	4018      	ands	r0, r3
    319e:	4085      	lsls	r5, r0
    31a0:	4b19      	ldr	r3, [pc, #100]	; (3208 <configure_console+0x124>)
    31a2:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    31a4:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    31a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    31a8:	2b00      	cmp	r3, #0
    31aa:	d1fc      	bne.n	31a6 <configure_console+0xc2>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    31ac:	6833      	ldr	r3, [r6, #0]
    31ae:	2202      	movs	r2, #2
    31b0:	4313      	orrs	r3, r2
    31b2:	6033      	str	r3, [r6, #0]
	usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable(&cdc_uart_module);
	schedule_rx_length = 1;
    31b4:	3a01      	subs	r2, #1
    31b6:	4b15      	ldr	r3, [pc, #84]	; (320c <configure_console+0x128>)
    31b8:	801a      	strh	r2, [r3, #0]
	usart_read_job(&cdc_uart_module, &usart_cmd_recv_buffer[0]);
    31ba:	4915      	ldr	r1, [pc, #84]	; (3210 <configure_console+0x12c>)
    31bc:	4804      	ldr	r0, [pc, #16]	; (31d0 <configure_console+0xec>)
    31be:	4b15      	ldr	r3, [pc, #84]	; (3214 <configure_console+0x130>)
    31c0:	4798      	blx	r3
}
    31c2:	b011      	add	sp, #68	; 0x44
    31c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	00220003 	.word	0x00220003
    31cc:	00230003 	.word	0x00230003
    31d0:	200000dc 	.word	0x200000dc
    31d4:	20000610 	.word	0x20000610
    31d8:	000030cd 	.word	0x000030cd
    31dc:	2000060c 	.word	0x2000060c
    31e0:	000030a1 	.word	0x000030a1
    31e4:	20000608 	.word	0x20000608
    31e8:	42001c00 	.word	0x42001c00
    31ec:	00001f7d 	.word	0x00001f7d
    31f0:	2000000c 	.word	0x2000000c
    31f4:	00003be1 	.word	0x00003be1
    31f8:	00002ff9 	.word	0x00002ff9
    31fc:	000023d5 	.word	0x000023d5
    3200:	0000303d 	.word	0x0000303d
    3204:	00001a51 	.word	0x00001a51
    3208:	e000e100 	.word	0xe000e100
    320c:	2000011c 	.word	0x2000011c
    3210:	20000134 	.word	0x20000134
    3214:	00002409 	.word	0x00002409

00003218 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
	{
    3218:	b5f0      	push	{r4, r5, r6, r7, lr}
    321a:	46c6      	mov	lr, r8
    321c:	b500      	push	{lr}
    321e:	b084      	sub	sp, #16
	/* Initialize the system. */
	system_init();
    3220:	4bc8      	ldr	r3, [pc, #800]	; (3544 <main+0x32c>)
    3222:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console(CONF_STDIO_BAUDRATE);
    3224:	20e1      	movs	r0, #225	; 0xe1
    3226:	0240      	lsls	r0, r0, #9
    3228:	4bc7      	ldr	r3, [pc, #796]	; (3548 <main+0x330>)
    322a:	4798      	blx	r3

	/* Initialize WINC IOs. */
	nm_bsp_init();
    322c:	4bc7      	ldr	r3, [pc, #796]	; (354c <main+0x334>)
    322e:	4798      	blx	r3
	ret = m2m_wifi_download_mode();
    3230:	4bc7      	ldr	r3, [pc, #796]	; (3550 <main+0x338>)
    3232:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    3234:	2800      	cmp	r0, #0
    3236:	d000      	beq.n	323a <main+0x22>
    3238:	e252      	b.n	36e0 <main+0x4c8>
		if (usart_pkt_received) {
    323a:	4dc6      	ldr	r5, [pc, #792]	; (3554 <main+0x33c>)
				usart_cmd_recv_buffer_u8[4] = 0xFF;
    323c:	4bc6      	ldr	r3, [pc, #792]	; (3558 <main+0x340>)
    323e:	4698      	mov	r8, r3
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
    3240:	3304      	adds	r3, #4
    3242:	9301      	str	r3, [sp, #4]
    3244:	e1d1      	b.n	35ea <main+0x3d2>
			usart_pkt_received = 0;
    3246:	2200      	movs	r2, #0
    3248:	4bc2      	ldr	r3, [pc, #776]	; (3554 <main+0x33c>)
    324a:	701a      	strb	r2, [r3, #0]
	switch (usart_prot_handler_status) {
    324c:	4bc3      	ldr	r3, [pc, #780]	; (355c <main+0x344>)
    324e:	781a      	ldrb	r2, [r3, #0]
    3250:	2a04      	cmp	r2, #4
    3252:	d900      	bls.n	3256 <main+0x3e>
    3254:	e117      	b.n	3486 <main+0x26e>
    3256:	0093      	lsls	r3, r2, #2
    3258:	4ac1      	ldr	r2, [pc, #772]	; (3560 <main+0x348>)
    325a:	58d3      	ldr	r3, [r2, r3]
    325c:	469f      	mov	pc, r3
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
    325e:	4bc1      	ldr	r3, [pc, #772]	; (3564 <main+0x34c>)
    3260:	881b      	ldrh	r3, [r3, #0]
    3262:	2b01      	cmp	r3, #1
    3264:	d011      	beq.n	328a <main+0x72>
			usart_cmd_recv_buffer[0] = 0xFF;
    3266:	4bbc      	ldr	r3, [pc, #752]	; (3558 <main+0x340>)
    3268:	22ff      	movs	r2, #255	; 0xff
    326a:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    326c:	4abe      	ldr	r2, [pc, #760]	; (3568 <main+0x350>)
    326e:	6013      	str	r3, [r2, #0]
			schedule_rx_length = 1;
    3270:	2201      	movs	r2, #1
    3272:	4bbc      	ldr	r3, [pc, #752]	; (3564 <main+0x34c>)
    3274:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
    3276:	4bbd      	ldr	r3, [pc, #756]	; (356c <main+0x354>)
    3278:	701a      	strb	r2, [r3, #0]
			uartdata = 0xEA;
    327a:	ab02      	add	r3, sp, #8
    327c:	1d99      	adds	r1, r3, #6
    327e:	23ea      	movs	r3, #234	; 0xea
    3280:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    3282:	48bb      	ldr	r0, [pc, #748]	; (3570 <main+0x358>)
    3284:	4bbb      	ldr	r3, [pc, #748]	; (3574 <main+0x35c>)
    3286:	4798      	blx	r3
    3288:	e1b3      	b.n	35f2 <main+0x3da>
			if ((usart_pkt[0] == 0x12)) {
    328a:	4bbb      	ldr	r3, [pc, #748]	; (3578 <main+0x360>)
    328c:	681b      	ldr	r3, [r3, #0]
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	2b12      	cmp	r3, #18
    3292:	d00e      	beq.n	32b2 <main+0x9a>
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3294:	49b0      	ldr	r1, [pc, #704]	; (3558 <main+0x340>)
    3296:	4ab4      	ldr	r2, [pc, #720]	; (3568 <main+0x350>)
    3298:	6011      	str	r1, [r2, #0]
				schedule_rx_length = 1;
    329a:	2101      	movs	r1, #1
    329c:	4ab1      	ldr	r2, [pc, #708]	; (3564 <main+0x34c>)
    329e:	8011      	strh	r1, [r2, #0]
				schedule_rx = 1;
    32a0:	4ab2      	ldr	r2, [pc, #712]	; (356c <main+0x354>)
    32a2:	7011      	strb	r1, [r2, #0]
				uartdata = usart_pkt[0];
    32a4:	aa02      	add	r2, sp, #8
    32a6:	1d91      	adds	r1, r2, #6
    32a8:	800b      	strh	r3, [r1, #0]
				usart_write_job(module, &uartdata);
    32aa:	48b1      	ldr	r0, [pc, #708]	; (3570 <main+0x358>)
    32ac:	4bb1      	ldr	r3, [pc, #708]	; (3574 <main+0x35c>)
    32ae:	4798      	blx	r3
    32b0:	e19f      	b.n	35f2 <main+0x3da>
				usart_prot_handler_status = WAIT_SYNC;
    32b2:	3b11      	subs	r3, #17
    32b4:	4aa9      	ldr	r2, [pc, #676]	; (355c <main+0x344>)
    32b6:	7013      	strb	r3, [r2, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
    32b8:	4aa7      	ldr	r2, [pc, #668]	; (3558 <main+0x340>)
    32ba:	21ff      	movs	r1, #255	; 0xff
    32bc:	8011      	strh	r1, [r2, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    32be:	49aa      	ldr	r1, [pc, #680]	; (3568 <main+0x350>)
    32c0:	600a      	str	r2, [r1, #0]
				schedule_rx_length = 1;
    32c2:	4aa8      	ldr	r2, [pc, #672]	; (3564 <main+0x34c>)
    32c4:	8013      	strh	r3, [r2, #0]
				schedule_rx = 1;
    32c6:	4ba9      	ldr	r3, [pc, #676]	; (356c <main+0x354>)
    32c8:	2201      	movs	r2, #1
    32ca:	701a      	strb	r2, [r3, #0]
				uartdata = 0x5B;
    32cc:	ab02      	add	r3, sp, #8
    32ce:	1d99      	adds	r1, r3, #6
    32d0:	235b      	movs	r3, #91	; 0x5b
    32d2:	800b      	strh	r3, [r1, #0]
				usart_write_job(module, &uartdata);
    32d4:	48a6      	ldr	r0, [pc, #664]	; (3570 <main+0x358>)
    32d6:	4ba7      	ldr	r3, [pc, #668]	; (3574 <main+0x35c>)
    32d8:	4798      	blx	r3
    32da:	e18a      	b.n	35f2 <main+0x3da>
			if (usart_pkt[0] == 0xA5) {
    32dc:	4ba6      	ldr	r3, [pc, #664]	; (3578 <main+0x360>)
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	781b      	ldrb	r3, [r3, #0]
    32e2:	2ba5      	cmp	r3, #165	; 0xa5
    32e4:	d017      	beq.n	3316 <main+0xfe>
			} else if (usart_pkt[0] == 0x12) {
    32e6:	2b12      	cmp	r3, #18
    32e8:	d023      	beq.n	3332 <main+0x11a>
				if (!uart_reconfigure) {
    32ea:	4ba4      	ldr	r3, [pc, #656]	; (357c <main+0x364>)
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d131      	bne.n	3356 <main+0x13e>
					uartdata = 0x5A;
    32f2:	ab02      	add	r3, sp, #8
    32f4:	1d99      	adds	r1, r3, #6
    32f6:	235a      	movs	r3, #90	; 0x5a
    32f8:	800b      	strh	r3, [r1, #0]
					usart_cmd_recv_buffer[0] = 0xFF;
    32fa:	4b97      	ldr	r3, [pc, #604]	; (3558 <main+0x340>)
    32fc:	22ff      	movs	r2, #255	; 0xff
    32fe:	801a      	strh	r2, [r3, #0]
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3300:	4a99      	ldr	r2, [pc, #612]	; (3568 <main+0x350>)
    3302:	6013      	str	r3, [r2, #0]
					schedule_rx_length = 1;
    3304:	2201      	movs	r2, #1
    3306:	4b97      	ldr	r3, [pc, #604]	; (3564 <main+0x34c>)
    3308:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
    330a:	4b98      	ldr	r3, [pc, #608]	; (356c <main+0x354>)
    330c:	701a      	strb	r2, [r3, #0]
					usart_write_job(module, &uartdata);
    330e:	4898      	ldr	r0, [pc, #608]	; (3570 <main+0x358>)
    3310:	4b98      	ldr	r3, [pc, #608]	; (3574 <main+0x35c>)
    3312:	4798      	blx	r3
    3314:	e16d      	b.n	35f2 <main+0x3da>
				usart_prot_handler_status = WAITING;
    3316:	2202      	movs	r2, #2
    3318:	4b90      	ldr	r3, [pc, #576]	; (355c <main+0x344>)
    331a:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer_u8[4] = 0xFF;
    331c:	23ff      	movs	r3, #255	; 0xff
    331e:	4642      	mov	r2, r8
    3320:	7113      	strb	r3, [r2, #4]
				schedule_rx_length = 1;
    3322:	2201      	movs	r2, #1
    3324:	4b8f      	ldr	r3, [pc, #572]	; (3564 <main+0x34c>)
    3326:	801a      	strh	r2, [r3, #0]
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
    3328:	9901      	ldr	r1, [sp, #4]
    332a:	4891      	ldr	r0, [pc, #580]	; (3570 <main+0x358>)
    332c:	4b94      	ldr	r3, [pc, #592]	; (3580 <main+0x368>)
    332e:	4798      	blx	r3
    3330:	e15f      	b.n	35f2 <main+0x3da>
				uartdata = 0x5B;
    3332:	ab02      	add	r3, sp, #8
    3334:	1d99      	adds	r1, r3, #6
    3336:	235b      	movs	r3, #91	; 0x5b
    3338:	800b      	strh	r3, [r1, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
    333a:	4b87      	ldr	r3, [pc, #540]	; (3558 <main+0x340>)
    333c:	22ff      	movs	r2, #255	; 0xff
    333e:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3340:	4a89      	ldr	r2, [pc, #548]	; (3568 <main+0x350>)
    3342:	6013      	str	r3, [r2, #0]
				schedule_rx_length = 1;
    3344:	2201      	movs	r2, #1
    3346:	4b87      	ldr	r3, [pc, #540]	; (3564 <main+0x34c>)
    3348:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    334a:	4b88      	ldr	r3, [pc, #544]	; (356c <main+0x354>)
    334c:	701a      	strb	r2, [r3, #0]
				usart_write_job(module, &uartdata);
    334e:	4888      	ldr	r0, [pc, #544]	; (3570 <main+0x358>)
    3350:	4b88      	ldr	r3, [pc, #544]	; (3574 <main+0x35c>)
    3352:	4798      	blx	r3
    3354:	e14d      	b.n	35f2 <main+0x3da>
					schedule_rx_length = 1;
    3356:	2201      	movs	r2, #1
    3358:	4b82      	ldr	r3, [pc, #520]	; (3564 <main+0x34c>)
    335a:	801a      	strh	r2, [r3, #0]
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
    335c:	497e      	ldr	r1, [pc, #504]	; (3558 <main+0x340>)
    335e:	4884      	ldr	r0, [pc, #528]	; (3570 <main+0x358>)
    3360:	4b87      	ldr	r3, [pc, #540]	; (3580 <main+0x368>)
    3362:	4798      	blx	r3
    3364:	e145      	b.n	35f2 <main+0x3da>
			usart_prot_handler_status = COLLECTING_HDR;
    3366:	2203      	movs	r2, #3
    3368:	4b7c      	ldr	r3, [pc, #496]	; (355c <main+0x344>)
    336a:	701a      	strb	r2, [r3, #0]
			uart_cmd_buf = usart_pkt;
    336c:	4b82      	ldr	r3, [pc, #520]	; (3578 <main+0x360>)
    336e:	681a      	ldr	r2, [r3, #0]
    3370:	4b84      	ldr	r3, [pc, #528]	; (3584 <main+0x36c>)
    3372:	601a      	str	r2, [r3, #0]
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 1);
    3374:	220b      	movs	r2, #11
    3376:	4b7b      	ldr	r3, [pc, #492]	; (3564 <main+0x34c>)
    3378:	801a      	strh	r2, [r3, #0]
			usart_read_buffer_job(module, (uint8_t *)module->rx_buffer_ptr, (USART_CMD_HDR_LENGTH - 1));
    337a:	487d      	ldr	r0, [pc, #500]	; (3570 <main+0x358>)
    337c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    337e:	4b82      	ldr	r3, [pc, #520]	; (3588 <main+0x370>)
    3380:	4798      	blx	r3
    3382:	e136      	b.n	35f2 <main+0x3da>
				checksum ^= *(((uint8_t *)uart_cmd_buf) + i);
    3384:	4b7f      	ldr	r3, [pc, #508]	; (3584 <main+0x36c>)
    3386:	681c      	ldr	r4, [r3, #0]
    3388:	0023      	movs	r3, r4
    338a:	0021      	movs	r1, r4
    338c:	310c      	adds	r1, #12
    338e:	2000      	movs	r0, #0
    3390:	e000      	b.n	3394 <main+0x17c>
    3392:	0010      	movs	r0, r2
    3394:	781f      	ldrb	r7, [r3, #0]
    3396:	003a      	movs	r2, r7
    3398:	4042      	eors	r2, r0
    339a:	b2d2      	uxtb	r2, r2
    339c:	3301      	adds	r3, #1
			for (i = 0; i < (USART_CMD_HDR_LENGTH); i++) {
    339e:	428b      	cmp	r3, r1
    33a0:	d1f7      	bne.n	3392 <main+0x17a>
			if (checksum != 0) {
    33a2:	4287      	cmp	r7, r0
    33a4:	d11b      	bne.n	33de <main+0x1c6>
				memcpy(&uart_cmd, uart_cmd_buf, sizeof(uart_cmd_hdr));
    33a6:	4f79      	ldr	r7, [pc, #484]	; (358c <main+0x374>)
    33a8:	220c      	movs	r2, #12
    33aa:	0021      	movs	r1, r4
    33ac:	0038      	movs	r0, r7
    33ae:	4b78      	ldr	r3, [pc, #480]	; (3590 <main+0x378>)
    33b0:	4798      	blx	r3
				if ((uart_cmd.cmd & 0xFF) == WRITE_BUFF) {
    33b2:	683a      	ldr	r2, [r7, #0]
    33b4:	783b      	ldrb	r3, [r7, #0]
    33b6:	2b03      	cmp	r3, #3
    33b8:	d026      	beq.n	3408 <main+0x1f0>
				} else if ((uart_cmd.cmd & 0xFF) == WRITE_REG) {
    33ba:	2b01      	cmp	r3, #1
    33bc:	d03a      	beq.n	3434 <main+0x21c>
					serial_command_pending = 1;
    33be:	2301      	movs	r3, #1
    33c0:	4a74      	ldr	r2, [pc, #464]	; (3594 <main+0x37c>)
    33c2:	7013      	strb	r3, [r2, #0]
					change_state = 1;
    33c4:	4a74      	ldr	r2, [pc, #464]	; (3598 <main+0x380>)
    33c6:	7013      	strb	r3, [r2, #0]
					new_state = PROCESSING;
    33c8:	2205      	movs	r2, #5
    33ca:	4b74      	ldr	r3, [pc, #464]	; (359c <main+0x384>)
    33cc:	701a      	strb	r2, [r3, #0]
					uartdata = 0xAC;
    33ce:	ab02      	add	r3, sp, #8
    33d0:	1d99      	adds	r1, r3, #6
    33d2:	23ac      	movs	r3, #172	; 0xac
    33d4:	800b      	strh	r3, [r1, #0]
					usart_write_job(module, &uartdata);
    33d6:	4866      	ldr	r0, [pc, #408]	; (3570 <main+0x358>)
    33d8:	4b66      	ldr	r3, [pc, #408]	; (3574 <main+0x35c>)
    33da:	4798      	blx	r3
    33dc:	e109      	b.n	35f2 <main+0x3da>
				usart_prot_handler_status = WAIT_SYNC;
    33de:	2301      	movs	r3, #1
    33e0:	4a5e      	ldr	r2, [pc, #376]	; (355c <main+0x344>)
    33e2:	7013      	strb	r3, [r2, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
    33e4:	4a5c      	ldr	r2, [pc, #368]	; (3558 <main+0x340>)
    33e6:	21ff      	movs	r1, #255	; 0xff
    33e8:	8011      	strh	r1, [r2, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    33ea:	495f      	ldr	r1, [pc, #380]	; (3568 <main+0x350>)
    33ec:	600a      	str	r2, [r1, #0]
				schedule_rx_length = 1;
    33ee:	4a5d      	ldr	r2, [pc, #372]	; (3564 <main+0x34c>)
    33f0:	8013      	strh	r3, [r2, #0]
				schedule_rx = 1;
    33f2:	4b5e      	ldr	r3, [pc, #376]	; (356c <main+0x354>)
    33f4:	2201      	movs	r2, #1
    33f6:	701a      	strb	r2, [r3, #0]
				uartdata = 0x5A;
    33f8:	ab02      	add	r3, sp, #8
    33fa:	1d99      	adds	r1, r3, #6
    33fc:	235a      	movs	r3, #90	; 0x5a
    33fe:	800b      	strh	r3, [r1, #0]
				usart_write_job(module, &uartdata);
    3400:	485b      	ldr	r0, [pc, #364]	; (3570 <main+0x358>)
    3402:	4b5c      	ldr	r3, [pc, #368]	; (3574 <main+0x35c>)
    3404:	4798      	blx	r3
    3406:	e0f4      	b.n	35f2 <main+0x3da>
					usart_prot_handler_status = COLLECTING_PAYLOAD;
    3408:	2104      	movs	r1, #4
    340a:	4b54      	ldr	r3, [pc, #336]	; (355c <main+0x344>)
    340c:	7019      	strb	r1, [r3, #0]
					payload_length = (uart_cmd.cmd >> 16) & 0xFFFF;
    340e:	0c12      	lsrs	r2, r2, #16
    3410:	4b63      	ldr	r3, [pc, #396]	; (35a0 <main+0x388>)
    3412:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
    3414:	3903      	subs	r1, #3
    3416:	4b55      	ldr	r3, [pc, #340]	; (356c <main+0x354>)
    3418:	7019      	strb	r1, [r3, #0]
					schedule_rx_buffer = &usart_payload_buffer[0];
    341a:	4962      	ldr	r1, [pc, #392]	; (35a4 <main+0x38c>)
    341c:	4b52      	ldr	r3, [pc, #328]	; (3568 <main+0x350>)
    341e:	6019      	str	r1, [r3, #0]
					schedule_rx_length = payload_length;
    3420:	4b50      	ldr	r3, [pc, #320]	; (3564 <main+0x34c>)
    3422:	801a      	strh	r2, [r3, #0]
					uartdata = 0xAC;
    3424:	ab02      	add	r3, sp, #8
    3426:	1d99      	adds	r1, r3, #6
    3428:	23ac      	movs	r3, #172	; 0xac
    342a:	800b      	strh	r3, [r1, #0]
					usart_write_job(module, &uartdata);
    342c:	4850      	ldr	r0, [pc, #320]	; (3570 <main+0x358>)
    342e:	4b51      	ldr	r3, [pc, #324]	; (3574 <main+0x35c>)
    3430:	4798      	blx	r3
    3432:	e0de      	b.n	35f2 <main+0x3da>
					serial_command_pending = 1;
    3434:	2201      	movs	r2, #1
    3436:	4b57      	ldr	r3, [pc, #348]	; (3594 <main+0x37c>)
    3438:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = PROCESSING;
    343a:	3204      	adds	r2, #4
    343c:	4b47      	ldr	r3, [pc, #284]	; (355c <main+0x344>)
    343e:	701a      	strb	r2, [r3, #0]
    3440:	e0d7      	b.n	35f2 <main+0x3da>
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
    3442:	4b48      	ldr	r3, [pc, #288]	; (3564 <main+0x34c>)
    3444:	881a      	ldrh	r2, [r3, #0]
    3446:	4b56      	ldr	r3, [pc, #344]	; (35a0 <main+0x388>)
    3448:	881b      	ldrh	r3, [r3, #0]
    344a:	429a      	cmp	r2, r3
    344c:	d014      	beq.n	3478 <main+0x260>
			usart_prot_handler_status = WAIT_SYNC;
    344e:	2201      	movs	r2, #1
    3450:	4b42      	ldr	r3, [pc, #264]	; (355c <main+0x344>)
    3452:	701a      	strb	r2, [r3, #0]
			uartdata = 0x5A;
    3454:	ab02      	add	r3, sp, #8
    3456:	1d99      	adds	r1, r3, #6
    3458:	235a      	movs	r3, #90	; 0x5a
    345a:	800b      	strh	r3, [r1, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
    345c:	4b3e      	ldr	r3, [pc, #248]	; (3558 <main+0x340>)
    345e:	20ff      	movs	r0, #255	; 0xff
    3460:	8018      	strh	r0, [r3, #0]
			schedule_rx_length = 1;
    3462:	4840      	ldr	r0, [pc, #256]	; (3564 <main+0x34c>)
    3464:	8002      	strh	r2, [r0, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3466:	4a40      	ldr	r2, [pc, #256]	; (3568 <main+0x350>)
    3468:	6013      	str	r3, [r2, #0]
			schedule_rx = 1;
    346a:	4b40      	ldr	r3, [pc, #256]	; (356c <main+0x354>)
    346c:	2201      	movs	r2, #1
    346e:	701a      	strb	r2, [r3, #0]
			usart_write_job(module, &uartdata);
    3470:	483f      	ldr	r0, [pc, #252]	; (3570 <main+0x358>)
    3472:	4b40      	ldr	r3, [pc, #256]	; (3574 <main+0x35c>)
    3474:	4798      	blx	r3
    3476:	e0bc      	b.n	35f2 <main+0x3da>
			serial_command_pending = 1;
    3478:	2201      	movs	r2, #1
    347a:	4b46      	ldr	r3, [pc, #280]	; (3594 <main+0x37c>)
    347c:	701a      	strb	r2, [r3, #0]
			usart_prot_handler_status = PROCESSING;
    347e:	3204      	adds	r2, #4
    3480:	4b36      	ldr	r3, [pc, #216]	; (355c <main+0x344>)
    3482:	701a      	strb	r2, [r3, #0]
    3484:	e0b5      	b.n	35f2 <main+0x3da>
		usart_prot_handler_status = WAIT_SYNC;
    3486:	2201      	movs	r2, #1
    3488:	4b34      	ldr	r3, [pc, #208]	; (355c <main+0x344>)
    348a:	701a      	strb	r2, [r3, #0]
    348c:	e0b1      	b.n	35f2 <main+0x3da>
			usart_err_on_reception = 0;
    348e:	2200      	movs	r2, #0
    3490:	4b45      	ldr	r3, [pc, #276]	; (35a8 <main+0x390>)
    3492:	701a      	strb	r2, [r3, #0]
	switch (usart_prot_handler_status) {
    3494:	4b31      	ldr	r3, [pc, #196]	; (355c <main+0x344>)
    3496:	781a      	ldrb	r2, [r3, #0]
    3498:	2a04      	cmp	r2, #4
    349a:	d84e      	bhi.n	353a <main+0x322>
    349c:	0093      	lsls	r3, r2, #2
    349e:	4a43      	ldr	r2, [pc, #268]	; (35ac <main+0x394>)
    34a0:	58d3      	ldr	r3, [r2, r3]
    34a2:	469f      	mov	pc, r3
			usart_cmd_recv_buffer[0] = 0xFF;
    34a4:	4b2c      	ldr	r3, [pc, #176]	; (3558 <main+0x340>)
    34a6:	22ff      	movs	r2, #255	; 0xff
    34a8:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    34aa:	4a2f      	ldr	r2, [pc, #188]	; (3568 <main+0x350>)
    34ac:	6013      	str	r3, [r2, #0]
			schedule_rx_length = 1;
    34ae:	2201      	movs	r2, #1
    34b0:	4b2c      	ldr	r3, [pc, #176]	; (3564 <main+0x34c>)
    34b2:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
    34b4:	4b2d      	ldr	r3, [pc, #180]	; (356c <main+0x354>)
    34b6:	701a      	strb	r2, [r3, #0]
			uartdata = 0xEA;
    34b8:	ab02      	add	r3, sp, #8
    34ba:	1d99      	adds	r1, r3, #6
    34bc:	23ea      	movs	r3, #234	; 0xea
    34be:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    34c0:	482b      	ldr	r0, [pc, #172]	; (3570 <main+0x358>)
    34c2:	4b2c      	ldr	r3, [pc, #176]	; (3574 <main+0x35c>)
    34c4:	4798      	blx	r3
    34c6:	e099      	b.n	35fc <main+0x3e4>
			usart_prot_handler_status = WAIT_SYNC;
    34c8:	2301      	movs	r3, #1
    34ca:	4a24      	ldr	r2, [pc, #144]	; (355c <main+0x344>)
    34cc:	7013      	strb	r3, [r2, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    34ce:	4922      	ldr	r1, [pc, #136]	; (3558 <main+0x340>)
    34d0:	4a25      	ldr	r2, [pc, #148]	; (3568 <main+0x350>)
    34d2:	6011      	str	r1, [r2, #0]
			schedule_rx = 1;
    34d4:	4a25      	ldr	r2, [pc, #148]	; (356c <main+0x354>)
    34d6:	7013      	strb	r3, [r2, #0]
			schedule_rx_length = 1;
    34d8:	4a22      	ldr	r2, [pc, #136]	; (3564 <main+0x34c>)
    34da:	8013      	strh	r3, [r2, #0]
			uartdata = 0xEA;
    34dc:	ab02      	add	r3, sp, #8
    34de:	1d99      	adds	r1, r3, #6
    34e0:	23ea      	movs	r3, #234	; 0xea
    34e2:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    34e4:	4822      	ldr	r0, [pc, #136]	; (3570 <main+0x358>)
    34e6:	4b23      	ldr	r3, [pc, #140]	; (3574 <main+0x35c>)
    34e8:	4798      	blx	r3
    34ea:	e087      	b.n	35fc <main+0x3e4>
			usart_prot_handler_status = WAIT_SYNC;
    34ec:	2301      	movs	r3, #1
    34ee:	4a1b      	ldr	r2, [pc, #108]	; (355c <main+0x344>)
    34f0:	7013      	strb	r3, [r2, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    34f2:	4919      	ldr	r1, [pc, #100]	; (3558 <main+0x340>)
    34f4:	4a1c      	ldr	r2, [pc, #112]	; (3568 <main+0x350>)
    34f6:	6011      	str	r1, [r2, #0]
			schedule_rx = 1;
    34f8:	4a1c      	ldr	r2, [pc, #112]	; (356c <main+0x354>)
    34fa:	7013      	strb	r3, [r2, #0]
			schedule_rx_length = 1;
    34fc:	4a19      	ldr	r2, [pc, #100]	; (3564 <main+0x34c>)
    34fe:	8013      	strh	r3, [r2, #0]
			uartdata = 0xEA;
    3500:	ab02      	add	r3, sp, #8
    3502:	1d99      	adds	r1, r3, #6
    3504:	23ea      	movs	r3, #234	; 0xea
    3506:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    3508:	4819      	ldr	r0, [pc, #100]	; (3570 <main+0x358>)
    350a:	4b1a      	ldr	r3, [pc, #104]	; (3574 <main+0x35c>)
    350c:	4798      	blx	r3
    350e:	e075      	b.n	35fc <main+0x3e4>
			usart_prot_handler_status = WAIT_SYNC;
    3510:	2201      	movs	r2, #1
    3512:	4b12      	ldr	r3, [pc, #72]	; (355c <main+0x344>)
    3514:	701a      	strb	r2, [r3, #0]
			uartdata = 0xEA;
    3516:	ab02      	add	r3, sp, #8
    3518:	1d99      	adds	r1, r3, #6
    351a:	23ea      	movs	r3, #234	; 0xea
    351c:	800b      	strh	r3, [r1, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
    351e:	4b0e      	ldr	r3, [pc, #56]	; (3558 <main+0x340>)
    3520:	20ff      	movs	r0, #255	; 0xff
    3522:	8018      	strh	r0, [r3, #0]
			schedule_rx_length = 1;
    3524:	480f      	ldr	r0, [pc, #60]	; (3564 <main+0x34c>)
    3526:	8002      	strh	r2, [r0, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3528:	4a0f      	ldr	r2, [pc, #60]	; (3568 <main+0x350>)
    352a:	6013      	str	r3, [r2, #0]
			schedule_rx = 1;
    352c:	4b0f      	ldr	r3, [pc, #60]	; (356c <main+0x354>)
    352e:	2201      	movs	r2, #1
    3530:	701a      	strb	r2, [r3, #0]
			usart_write_job(module, &uartdata);
    3532:	480f      	ldr	r0, [pc, #60]	; (3570 <main+0x358>)
    3534:	4b0f      	ldr	r3, [pc, #60]	; (3574 <main+0x35c>)
    3536:	4798      	blx	r3
    3538:	e060      	b.n	35fc <main+0x3e4>
		usart_prot_handler_status = WAIT_SYNC;
    353a:	2201      	movs	r2, #1
    353c:	4b07      	ldr	r3, [pc, #28]	; (355c <main+0x344>)
    353e:	701a      	strb	r2, [r3, #0]
    3540:	e05c      	b.n	35fc <main+0x3e4>
    3542:	46c0      	nop			; (mov r8, r8)
    3544:	00002e15 	.word	0x00002e15
    3548:	000030e5 	.word	0x000030e5
    354c:	00000181 	.word	0x00000181
    3550:	00000495 	.word	0x00000495
    3554:	2000054c 	.word	0x2000054c
    3558:	20000134 	.word	0x20000134
    355c:	2000054d 	.word	0x2000054d
    3560:	000052b0 	.word	0x000052b0
    3564:	2000011c 	.word	0x2000011c
    3568:	20000118 	.word	0x20000118
    356c:	20000114 	.word	0x20000114
    3570:	200000dc 	.word	0x200000dc
    3574:	000023ed 	.word	0x000023ed
    3578:	20000548 	.word	0x20000548
    357c:	20000130 	.word	0x20000130
    3580:	00002409 	.word	0x00002409
    3584:	2000012c 	.word	0x2000012c
    3588:	00002439 	.word	0x00002439
    358c:	20000120 	.word	0x20000120
    3590:	00003919 	.word	0x00003919
    3594:	2000011e 	.word	0x2000011e
    3598:	20000110 	.word	0x20000110
    359c:	20000111 	.word	0x20000111
    35a0:	20000112 	.word	0x20000112
    35a4:	20000148 	.word	0x20000148
    35a8:	20000144 	.word	0x20000144
    35ac:	000052c4 	.word	0x000052c4
				temp = nm_read_reg(uart_cmd.addr);
    35b0:	4b4f      	ldr	r3, [pc, #316]	; (36f0 <main+0x4d8>)
    35b2:	6858      	ldr	r0, [r3, #4]
    35b4:	4b4f      	ldr	r3, [pc, #316]	; (36f4 <main+0x4dc>)
    35b6:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    35b8:	4a4f      	ldr	r2, [pc, #316]	; (36f8 <main+0x4e0>)
    35ba:	4b50      	ldr	r3, [pc, #320]	; (36fc <main+0x4e4>)
    35bc:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    35be:	2201      	movs	r2, #1
    35c0:	4b4f      	ldr	r3, [pc, #316]	; (3700 <main+0x4e8>)
    35c2:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    35c4:	4b4f      	ldr	r3, [pc, #316]	; (3704 <main+0x4ec>)
    35c6:	701a      	strb	r2, [r3, #0]
				usart_prot_handler_status = WAIT_SYNC;
    35c8:	4b4f      	ldr	r3, [pc, #316]	; (3708 <main+0x4f0>)
    35ca:	701a      	strb	r2, [r3, #0]
		tx_data[i] = tx_data[j];
    35cc:	494f      	ldr	r1, [pc, #316]	; (370c <main+0x4f4>)
				usart_tx_buffer[3] = (uint8)(temp >> 24);
    35ce:	0e03      	lsrs	r3, r0, #24
    35d0:	700b      	strb	r3, [r1, #0]
				usart_tx_buffer[0] = (uint8)(temp >> 0);
    35d2:	70c8      	strb	r0, [r1, #3]
				usart_tx_buffer[2] = (uint8)(temp >> 16);
    35d4:	0c03      	lsrs	r3, r0, #16
    35d6:	704b      	strb	r3, [r1, #1]
				usart_tx_buffer[1] = (uint8)(temp >> 8);
    35d8:	0a00      	lsrs	r0, r0, #8
    35da:	7088      	strb	r0, [r1, #2]
	usart_write_buffer_job(module, tx_data, length);
    35dc:	2204      	movs	r2, #4
    35de:	484c      	ldr	r0, [pc, #304]	; (3710 <main+0x4f8>)
    35e0:	4b4c      	ldr	r3, [pc, #304]	; (3714 <main+0x4fc>)
    35e2:	4798      	blx	r3
			serial_command_pending = 0;
    35e4:	2200      	movs	r2, #0
    35e6:	4b4c      	ldr	r3, [pc, #304]	; (3718 <main+0x500>)
    35e8:	701a      	strb	r2, [r3, #0]
		if (usart_pkt_received) {
    35ea:	782b      	ldrb	r3, [r5, #0]
    35ec:	2b00      	cmp	r3, #0
    35ee:	d000      	beq.n	35f2 <main+0x3da>
    35f0:	e629      	b.n	3246 <main+0x2e>
		if (usart_err_on_reception) {
    35f2:	4b4a      	ldr	r3, [pc, #296]	; (371c <main+0x504>)
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	2b00      	cmp	r3, #0
    35f8:	d000      	beq.n	35fc <main+0x3e4>
    35fa:	e748      	b.n	348e <main+0x276>
		if (serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
    35fc:	4b46      	ldr	r3, [pc, #280]	; (3718 <main+0x500>)
    35fe:	781b      	ldrb	r3, [r3, #0]
    3600:	2b00      	cmp	r3, #0
    3602:	d0f2      	beq.n	35ea <main+0x3d2>
    3604:	4b40      	ldr	r3, [pc, #256]	; (3708 <main+0x4f0>)
    3606:	781b      	ldrb	r3, [r3, #0]
    3608:	2b05      	cmp	r3, #5
    360a:	d1ee      	bne.n	35ea <main+0x3d2>
			switch ((uart_cmd.cmd) & 0xFF) {
    360c:	4b38      	ldr	r3, [pc, #224]	; (36f0 <main+0x4d8>)
    360e:	681a      	ldr	r2, [r3, #0]
    3610:	781b      	ldrb	r3, [r3, #0]
    3612:	2b05      	cmp	r3, #5
    3614:	d8e6      	bhi.n	35e4 <main+0x3cc>
    3616:	009b      	lsls	r3, r3, #2
    3618:	4941      	ldr	r1, [pc, #260]	; (3720 <main+0x508>)
    361a:	58cb      	ldr	r3, [r1, r3]
    361c:	469f      	mov	pc, r3
				nm_write_reg(uart_cmd.addr, uart_cmd.val);
    361e:	4b34      	ldr	r3, [pc, #208]	; (36f0 <main+0x4d8>)
    3620:	6899      	ldr	r1, [r3, #8]
    3622:	6858      	ldr	r0, [r3, #4]
    3624:	4b3f      	ldr	r3, [pc, #252]	; (3724 <main+0x50c>)
    3626:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3628:	4a33      	ldr	r2, [pc, #204]	; (36f8 <main+0x4e0>)
    362a:	4b34      	ldr	r3, [pc, #208]	; (36fc <main+0x4e4>)
    362c:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    362e:	2201      	movs	r2, #1
    3630:	4b33      	ldr	r3, [pc, #204]	; (3700 <main+0x4e8>)
    3632:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    3634:	4b33      	ldr	r3, [pc, #204]	; (3704 <main+0x4ec>)
    3636:	701a      	strb	r2, [r3, #0]
				uartdata = 0xAC;
    3638:	a903      	add	r1, sp, #12
    363a:	23ac      	movs	r3, #172	; 0xac
    363c:	800b      	strh	r3, [r1, #0]
				usart_prot_handler_status = WAIT_SYNC;
    363e:	4b32      	ldr	r3, [pc, #200]	; (3708 <main+0x4f0>)
    3640:	701a      	strb	r2, [r3, #0]
				usart_write_job(&cdc_uart_module, &uartdata);
    3642:	4833      	ldr	r0, [pc, #204]	; (3710 <main+0x4f8>)
    3644:	4b38      	ldr	r3, [pc, #224]	; (3728 <main+0x510>)
    3646:	4798      	blx	r3
    3648:	e7cc      	b.n	35e4 <main+0x3cc>
				nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
    364a:	0c12      	lsrs	r2, r2, #16
    364c:	4f37      	ldr	r7, [pc, #220]	; (372c <main+0x514>)
    364e:	4c28      	ldr	r4, [pc, #160]	; (36f0 <main+0x4d8>)
    3650:	0039      	movs	r1, r7
    3652:	6860      	ldr	r0, [r4, #4]
    3654:	4b36      	ldr	r3, [pc, #216]	; (3730 <main+0x518>)
    3656:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3658:	4a27      	ldr	r2, [pc, #156]	; (36f8 <main+0x4e0>)
    365a:	4b28      	ldr	r3, [pc, #160]	; (36fc <main+0x4e4>)
    365c:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    365e:	2201      	movs	r2, #1
    3660:	4b27      	ldr	r3, [pc, #156]	; (3700 <main+0x4e8>)
    3662:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    3664:	4b27      	ldr	r3, [pc, #156]	; (3704 <main+0x4ec>)
    3666:	701a      	strb	r2, [r3, #0]
				usart_prot_handler_status = WAIT_SYNC;
    3668:	4b27      	ldr	r3, [pc, #156]	; (3708 <main+0x4f0>)
    366a:	701a      	strb	r2, [r3, #0]
				usart_write_buffer_job(&cdc_uart_module, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
    366c:	8862      	ldrh	r2, [r4, #2]
    366e:	0039      	movs	r1, r7
    3670:	4827      	ldr	r0, [pc, #156]	; (3710 <main+0x4f8>)
    3672:	4b28      	ldr	r3, [pc, #160]	; (3714 <main+0x4fc>)
    3674:	4798      	blx	r3
    3676:	e7b5      	b.n	35e4 <main+0x3cc>
				nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
    3678:	0c12      	lsrs	r2, r2, #16
    367a:	4b1d      	ldr	r3, [pc, #116]	; (36f0 <main+0x4d8>)
    367c:	6858      	ldr	r0, [r3, #4]
    367e:	492b      	ldr	r1, [pc, #172]	; (372c <main+0x514>)
    3680:	4b2c      	ldr	r3, [pc, #176]	; (3734 <main+0x51c>)
    3682:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3684:	4a1c      	ldr	r2, [pc, #112]	; (36f8 <main+0x4e0>)
    3686:	4b1d      	ldr	r3, [pc, #116]	; (36fc <main+0x4e4>)
    3688:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    368a:	2201      	movs	r2, #1
    368c:	4b1c      	ldr	r3, [pc, #112]	; (3700 <main+0x4e8>)
    368e:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    3690:	4b1c      	ldr	r3, [pc, #112]	; (3704 <main+0x4ec>)
    3692:	701a      	strb	r2, [r3, #0]
				uartdata = 0xAC;
    3694:	a903      	add	r1, sp, #12
    3696:	23ac      	movs	r3, #172	; 0xac
    3698:	800b      	strh	r3, [r1, #0]
				usart_prot_handler_status = WAIT_SYNC;
    369a:	4b1b      	ldr	r3, [pc, #108]	; (3708 <main+0x4f0>)
    369c:	701a      	strb	r2, [r3, #0]
				usart_write_job(&cdc_uart_module, &uartdata);
    369e:	481c      	ldr	r0, [pc, #112]	; (3710 <main+0x4f8>)
    36a0:	4b21      	ldr	r3, [pc, #132]	; (3728 <main+0x510>)
    36a2:	4798      	blx	r3
    36a4:	e79e      	b.n	35e4 <main+0x3cc>
				usart_prot_handler_status = WAIT_SYNC;
    36a6:	2701      	movs	r7, #1
    36a8:	4b17      	ldr	r3, [pc, #92]	; (3708 <main+0x4f0>)
    36aa:	701f      	strb	r7, [r3, #0]
				uart_reconfigure = 1;
    36ac:	4b22      	ldr	r3, [pc, #136]	; (3738 <main+0x520>)
    36ae:	701f      	strb	r7, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    36b0:	4e17      	ldr	r6, [pc, #92]	; (3710 <main+0x4f8>)
    36b2:	6834      	ldr	r4, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    36b4:	0020      	movs	r0, r4
    36b6:	4b21      	ldr	r3, [pc, #132]	; (373c <main+0x524>)
    36b8:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    36ba:	231f      	movs	r3, #31
    36bc:	4018      	ands	r0, r3
    36be:	4087      	lsls	r7, r0
    36c0:	3361      	adds	r3, #97	; 0x61
    36c2:	4a1f      	ldr	r2, [pc, #124]	; (3740 <main+0x528>)
    36c4:	50d7      	str	r7, [r2, r3]
	SercomUsart *const usart_hw = &(module->hw->USART);
    36c6:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    36c8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    36ca:	2b00      	cmp	r3, #0
    36cc:	d1fc      	bne.n	36c8 <main+0x4b0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    36ce:	6823      	ldr	r3, [r4, #0]
    36d0:	2202      	movs	r2, #2
    36d2:	4393      	bics	r3, r2
    36d4:	6023      	str	r3, [r4, #0]
				configure_console(uart_cmd.val);
    36d6:	4b06      	ldr	r3, [pc, #24]	; (36f0 <main+0x4d8>)
    36d8:	6898      	ldr	r0, [r3, #8]
    36da:	4b1a      	ldr	r3, [pc, #104]	; (3744 <main+0x52c>)
    36dc:	4798      	blx	r3
    36de:	e781      	b.n	35e4 <main+0x3cc>
		puts("Failed to put the WiFi Chip in download mode!\n");
    36e0:	4819      	ldr	r0, [pc, #100]	; (3748 <main+0x530>)
    36e2:	4b1a      	ldr	r3, [pc, #104]	; (374c <main+0x534>)
    36e4:	4798      	blx	r3

	/* Enter WiFi firmware download mode. */
	enter_wifi_firmware_download();

	return 0;
}
    36e6:	2000      	movs	r0, #0
    36e8:	b004      	add	sp, #16
    36ea:	bc04      	pop	{r2}
    36ec:	4690      	mov	r8, r2
    36ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36f0:	20000120 	.word	0x20000120
    36f4:	00000795 	.word	0x00000795
    36f8:	20000134 	.word	0x20000134
    36fc:	20000118 	.word	0x20000118
    3700:	2000011c 	.word	0x2000011c
    3704:	20000114 	.word	0x20000114
    3708:	2000054d 	.word	0x2000054d
    370c:	20000550 	.word	0x20000550
    3710:	200000dc 	.word	0x200000dc
    3714:	00002419 	.word	0x00002419
    3718:	2000011e 	.word	0x2000011e
    371c:	20000144 	.word	0x20000144
    3720:	000052d8 	.word	0x000052d8
    3724:	000007ad 	.word	0x000007ad
    3728:	000023ed 	.word	0x000023ed
    372c:	20000148 	.word	0x20000148
    3730:	000007b9 	.word	0x000007b9
    3734:	00000821 	.word	0x00000821
    3738:	20000130 	.word	0x20000130
    373c:	00001a51 	.word	0x00001a51
    3740:	e000e100 	.word	0xe000e100
    3744:	000030e5 	.word	0x000030e5
    3748:	000052f0 	.word	0x000052f0
    374c:	00003ba9 	.word	0x00003ba9

00003750 <__udivsi3>:
    3750:	2200      	movs	r2, #0
    3752:	0843      	lsrs	r3, r0, #1
    3754:	428b      	cmp	r3, r1
    3756:	d374      	bcc.n	3842 <__udivsi3+0xf2>
    3758:	0903      	lsrs	r3, r0, #4
    375a:	428b      	cmp	r3, r1
    375c:	d35f      	bcc.n	381e <__udivsi3+0xce>
    375e:	0a03      	lsrs	r3, r0, #8
    3760:	428b      	cmp	r3, r1
    3762:	d344      	bcc.n	37ee <__udivsi3+0x9e>
    3764:	0b03      	lsrs	r3, r0, #12
    3766:	428b      	cmp	r3, r1
    3768:	d328      	bcc.n	37bc <__udivsi3+0x6c>
    376a:	0c03      	lsrs	r3, r0, #16
    376c:	428b      	cmp	r3, r1
    376e:	d30d      	bcc.n	378c <__udivsi3+0x3c>
    3770:	22ff      	movs	r2, #255	; 0xff
    3772:	0209      	lsls	r1, r1, #8
    3774:	ba12      	rev	r2, r2
    3776:	0c03      	lsrs	r3, r0, #16
    3778:	428b      	cmp	r3, r1
    377a:	d302      	bcc.n	3782 <__udivsi3+0x32>
    377c:	1212      	asrs	r2, r2, #8
    377e:	0209      	lsls	r1, r1, #8
    3780:	d065      	beq.n	384e <__udivsi3+0xfe>
    3782:	0b03      	lsrs	r3, r0, #12
    3784:	428b      	cmp	r3, r1
    3786:	d319      	bcc.n	37bc <__udivsi3+0x6c>
    3788:	e000      	b.n	378c <__udivsi3+0x3c>
    378a:	0a09      	lsrs	r1, r1, #8
    378c:	0bc3      	lsrs	r3, r0, #15
    378e:	428b      	cmp	r3, r1
    3790:	d301      	bcc.n	3796 <__udivsi3+0x46>
    3792:	03cb      	lsls	r3, r1, #15
    3794:	1ac0      	subs	r0, r0, r3
    3796:	4152      	adcs	r2, r2
    3798:	0b83      	lsrs	r3, r0, #14
    379a:	428b      	cmp	r3, r1
    379c:	d301      	bcc.n	37a2 <__udivsi3+0x52>
    379e:	038b      	lsls	r3, r1, #14
    37a0:	1ac0      	subs	r0, r0, r3
    37a2:	4152      	adcs	r2, r2
    37a4:	0b43      	lsrs	r3, r0, #13
    37a6:	428b      	cmp	r3, r1
    37a8:	d301      	bcc.n	37ae <__udivsi3+0x5e>
    37aa:	034b      	lsls	r3, r1, #13
    37ac:	1ac0      	subs	r0, r0, r3
    37ae:	4152      	adcs	r2, r2
    37b0:	0b03      	lsrs	r3, r0, #12
    37b2:	428b      	cmp	r3, r1
    37b4:	d301      	bcc.n	37ba <__udivsi3+0x6a>
    37b6:	030b      	lsls	r3, r1, #12
    37b8:	1ac0      	subs	r0, r0, r3
    37ba:	4152      	adcs	r2, r2
    37bc:	0ac3      	lsrs	r3, r0, #11
    37be:	428b      	cmp	r3, r1
    37c0:	d301      	bcc.n	37c6 <__udivsi3+0x76>
    37c2:	02cb      	lsls	r3, r1, #11
    37c4:	1ac0      	subs	r0, r0, r3
    37c6:	4152      	adcs	r2, r2
    37c8:	0a83      	lsrs	r3, r0, #10
    37ca:	428b      	cmp	r3, r1
    37cc:	d301      	bcc.n	37d2 <__udivsi3+0x82>
    37ce:	028b      	lsls	r3, r1, #10
    37d0:	1ac0      	subs	r0, r0, r3
    37d2:	4152      	adcs	r2, r2
    37d4:	0a43      	lsrs	r3, r0, #9
    37d6:	428b      	cmp	r3, r1
    37d8:	d301      	bcc.n	37de <__udivsi3+0x8e>
    37da:	024b      	lsls	r3, r1, #9
    37dc:	1ac0      	subs	r0, r0, r3
    37de:	4152      	adcs	r2, r2
    37e0:	0a03      	lsrs	r3, r0, #8
    37e2:	428b      	cmp	r3, r1
    37e4:	d301      	bcc.n	37ea <__udivsi3+0x9a>
    37e6:	020b      	lsls	r3, r1, #8
    37e8:	1ac0      	subs	r0, r0, r3
    37ea:	4152      	adcs	r2, r2
    37ec:	d2cd      	bcs.n	378a <__udivsi3+0x3a>
    37ee:	09c3      	lsrs	r3, r0, #7
    37f0:	428b      	cmp	r3, r1
    37f2:	d301      	bcc.n	37f8 <__udivsi3+0xa8>
    37f4:	01cb      	lsls	r3, r1, #7
    37f6:	1ac0      	subs	r0, r0, r3
    37f8:	4152      	adcs	r2, r2
    37fa:	0983      	lsrs	r3, r0, #6
    37fc:	428b      	cmp	r3, r1
    37fe:	d301      	bcc.n	3804 <__udivsi3+0xb4>
    3800:	018b      	lsls	r3, r1, #6
    3802:	1ac0      	subs	r0, r0, r3
    3804:	4152      	adcs	r2, r2
    3806:	0943      	lsrs	r3, r0, #5
    3808:	428b      	cmp	r3, r1
    380a:	d301      	bcc.n	3810 <__udivsi3+0xc0>
    380c:	014b      	lsls	r3, r1, #5
    380e:	1ac0      	subs	r0, r0, r3
    3810:	4152      	adcs	r2, r2
    3812:	0903      	lsrs	r3, r0, #4
    3814:	428b      	cmp	r3, r1
    3816:	d301      	bcc.n	381c <__udivsi3+0xcc>
    3818:	010b      	lsls	r3, r1, #4
    381a:	1ac0      	subs	r0, r0, r3
    381c:	4152      	adcs	r2, r2
    381e:	08c3      	lsrs	r3, r0, #3
    3820:	428b      	cmp	r3, r1
    3822:	d301      	bcc.n	3828 <__udivsi3+0xd8>
    3824:	00cb      	lsls	r3, r1, #3
    3826:	1ac0      	subs	r0, r0, r3
    3828:	4152      	adcs	r2, r2
    382a:	0883      	lsrs	r3, r0, #2
    382c:	428b      	cmp	r3, r1
    382e:	d301      	bcc.n	3834 <__udivsi3+0xe4>
    3830:	008b      	lsls	r3, r1, #2
    3832:	1ac0      	subs	r0, r0, r3
    3834:	4152      	adcs	r2, r2
    3836:	0843      	lsrs	r3, r0, #1
    3838:	428b      	cmp	r3, r1
    383a:	d301      	bcc.n	3840 <__udivsi3+0xf0>
    383c:	004b      	lsls	r3, r1, #1
    383e:	1ac0      	subs	r0, r0, r3
    3840:	4152      	adcs	r2, r2
    3842:	1a41      	subs	r1, r0, r1
    3844:	d200      	bcs.n	3848 <__udivsi3+0xf8>
    3846:	4601      	mov	r1, r0
    3848:	4152      	adcs	r2, r2
    384a:	4610      	mov	r0, r2
    384c:	4770      	bx	lr
    384e:	e7ff      	b.n	3850 <__udivsi3+0x100>
    3850:	b501      	push	{r0, lr}
    3852:	2000      	movs	r0, #0
    3854:	f000 f806 	bl	3864 <__aeabi_idiv0>
    3858:	bd02      	pop	{r1, pc}
    385a:	46c0      	nop			; (mov r8, r8)

0000385c <__aeabi_uidivmod>:
    385c:	2900      	cmp	r1, #0
    385e:	d0f7      	beq.n	3850 <__udivsi3+0x100>
    3860:	e776      	b.n	3750 <__udivsi3>
    3862:	4770      	bx	lr

00003864 <__aeabi_idiv0>:
    3864:	4770      	bx	lr
    3866:	46c0      	nop			; (mov r8, r8)

00003868 <__aeabi_lmul>:
    3868:	b5f0      	push	{r4, r5, r6, r7, lr}
    386a:	46ce      	mov	lr, r9
    386c:	4647      	mov	r7, r8
    386e:	0415      	lsls	r5, r2, #16
    3870:	0c2d      	lsrs	r5, r5, #16
    3872:	002e      	movs	r6, r5
    3874:	b580      	push	{r7, lr}
    3876:	0407      	lsls	r7, r0, #16
    3878:	0c14      	lsrs	r4, r2, #16
    387a:	0c3f      	lsrs	r7, r7, #16
    387c:	4699      	mov	r9, r3
    387e:	0c03      	lsrs	r3, r0, #16
    3880:	437e      	muls	r6, r7
    3882:	435d      	muls	r5, r3
    3884:	4367      	muls	r7, r4
    3886:	4363      	muls	r3, r4
    3888:	197f      	adds	r7, r7, r5
    388a:	0c34      	lsrs	r4, r6, #16
    388c:	19e4      	adds	r4, r4, r7
    388e:	469c      	mov	ip, r3
    3890:	42a5      	cmp	r5, r4
    3892:	d903      	bls.n	389c <__aeabi_lmul+0x34>
    3894:	2380      	movs	r3, #128	; 0x80
    3896:	025b      	lsls	r3, r3, #9
    3898:	4698      	mov	r8, r3
    389a:	44c4      	add	ip, r8
    389c:	464b      	mov	r3, r9
    389e:	4351      	muls	r1, r2
    38a0:	4343      	muls	r3, r0
    38a2:	0436      	lsls	r6, r6, #16
    38a4:	0c36      	lsrs	r6, r6, #16
    38a6:	0c25      	lsrs	r5, r4, #16
    38a8:	0424      	lsls	r4, r4, #16
    38aa:	4465      	add	r5, ip
    38ac:	19a4      	adds	r4, r4, r6
    38ae:	1859      	adds	r1, r3, r1
    38b0:	1949      	adds	r1, r1, r5
    38b2:	0020      	movs	r0, r4
    38b4:	bc0c      	pop	{r2, r3}
    38b6:	4690      	mov	r8, r2
    38b8:	4699      	mov	r9, r3
    38ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000038bc <__libc_init_array>:
    38bc:	b570      	push	{r4, r5, r6, lr}
    38be:	2600      	movs	r6, #0
    38c0:	4d0c      	ldr	r5, [pc, #48]	; (38f4 <__libc_init_array+0x38>)
    38c2:	4c0d      	ldr	r4, [pc, #52]	; (38f8 <__libc_init_array+0x3c>)
    38c4:	1b64      	subs	r4, r4, r5
    38c6:	10a4      	asrs	r4, r4, #2
    38c8:	42a6      	cmp	r6, r4
    38ca:	d109      	bne.n	38e0 <__libc_init_array+0x24>
    38cc:	2600      	movs	r6, #0
    38ce:	f001 fd73 	bl	53b8 <_init>
    38d2:	4d0a      	ldr	r5, [pc, #40]	; (38fc <__libc_init_array+0x40>)
    38d4:	4c0a      	ldr	r4, [pc, #40]	; (3900 <__libc_init_array+0x44>)
    38d6:	1b64      	subs	r4, r4, r5
    38d8:	10a4      	asrs	r4, r4, #2
    38da:	42a6      	cmp	r6, r4
    38dc:	d105      	bne.n	38ea <__libc_init_array+0x2e>
    38de:	bd70      	pop	{r4, r5, r6, pc}
    38e0:	00b3      	lsls	r3, r6, #2
    38e2:	58eb      	ldr	r3, [r5, r3]
    38e4:	4798      	blx	r3
    38e6:	3601      	adds	r6, #1
    38e8:	e7ee      	b.n	38c8 <__libc_init_array+0xc>
    38ea:	00b3      	lsls	r3, r6, #2
    38ec:	58eb      	ldr	r3, [r5, r3]
    38ee:	4798      	blx	r3
    38f0:	3601      	adds	r6, #1
    38f2:	e7f2      	b.n	38da <__libc_init_array+0x1e>
    38f4:	000053c4 	.word	0x000053c4
    38f8:	000053c4 	.word	0x000053c4
    38fc:	000053c4 	.word	0x000053c4
    3900:	000053c8 	.word	0x000053c8

00003904 <malloc>:
    3904:	b510      	push	{r4, lr}
    3906:	4b03      	ldr	r3, [pc, #12]	; (3914 <malloc+0x10>)
    3908:	0001      	movs	r1, r0
    390a:	6818      	ldr	r0, [r3, #0]
    390c:	f000 f860 	bl	39d0 <_malloc_r>
    3910:	bd10      	pop	{r4, pc}
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	2000000c 	.word	0x2000000c

00003918 <memcpy>:
    3918:	2300      	movs	r3, #0
    391a:	b510      	push	{r4, lr}
    391c:	429a      	cmp	r2, r3
    391e:	d100      	bne.n	3922 <memcpy+0xa>
    3920:	bd10      	pop	{r4, pc}
    3922:	5ccc      	ldrb	r4, [r1, r3]
    3924:	54c4      	strb	r4, [r0, r3]
    3926:	3301      	adds	r3, #1
    3928:	e7f8      	b.n	391c <memcpy+0x4>

0000392a <memset>:
    392a:	0003      	movs	r3, r0
    392c:	1882      	adds	r2, r0, r2
    392e:	4293      	cmp	r3, r2
    3930:	d100      	bne.n	3934 <memset+0xa>
    3932:	4770      	bx	lr
    3934:	7019      	strb	r1, [r3, #0]
    3936:	3301      	adds	r3, #1
    3938:	e7f9      	b.n	392e <memset+0x4>
	...

0000393c <_free_r>:
    393c:	b570      	push	{r4, r5, r6, lr}
    393e:	0005      	movs	r5, r0
    3940:	2900      	cmp	r1, #0
    3942:	d010      	beq.n	3966 <_free_r+0x2a>
    3944:	1f0c      	subs	r4, r1, #4
    3946:	6823      	ldr	r3, [r4, #0]
    3948:	2b00      	cmp	r3, #0
    394a:	da00      	bge.n	394e <_free_r+0x12>
    394c:	18e4      	adds	r4, r4, r3
    394e:	0028      	movs	r0, r5
    3950:	f000 fcc2 	bl	42d8 <__malloc_lock>
    3954:	4a1d      	ldr	r2, [pc, #116]	; (39cc <_free_r+0x90>)
    3956:	6813      	ldr	r3, [r2, #0]
    3958:	2b00      	cmp	r3, #0
    395a:	d105      	bne.n	3968 <_free_r+0x2c>
    395c:	6063      	str	r3, [r4, #4]
    395e:	6014      	str	r4, [r2, #0]
    3960:	0028      	movs	r0, r5
    3962:	f000 fcba 	bl	42da <__malloc_unlock>
    3966:	bd70      	pop	{r4, r5, r6, pc}
    3968:	42a3      	cmp	r3, r4
    396a:	d909      	bls.n	3980 <_free_r+0x44>
    396c:	6821      	ldr	r1, [r4, #0]
    396e:	1860      	adds	r0, r4, r1
    3970:	4283      	cmp	r3, r0
    3972:	d1f3      	bne.n	395c <_free_r+0x20>
    3974:	6818      	ldr	r0, [r3, #0]
    3976:	685b      	ldr	r3, [r3, #4]
    3978:	1841      	adds	r1, r0, r1
    397a:	6021      	str	r1, [r4, #0]
    397c:	e7ee      	b.n	395c <_free_r+0x20>
    397e:	0013      	movs	r3, r2
    3980:	685a      	ldr	r2, [r3, #4]
    3982:	2a00      	cmp	r2, #0
    3984:	d001      	beq.n	398a <_free_r+0x4e>
    3986:	42a2      	cmp	r2, r4
    3988:	d9f9      	bls.n	397e <_free_r+0x42>
    398a:	6819      	ldr	r1, [r3, #0]
    398c:	1858      	adds	r0, r3, r1
    398e:	42a0      	cmp	r0, r4
    3990:	d10b      	bne.n	39aa <_free_r+0x6e>
    3992:	6820      	ldr	r0, [r4, #0]
    3994:	1809      	adds	r1, r1, r0
    3996:	1858      	adds	r0, r3, r1
    3998:	6019      	str	r1, [r3, #0]
    399a:	4282      	cmp	r2, r0
    399c:	d1e0      	bne.n	3960 <_free_r+0x24>
    399e:	6810      	ldr	r0, [r2, #0]
    39a0:	6852      	ldr	r2, [r2, #4]
    39a2:	1841      	adds	r1, r0, r1
    39a4:	6019      	str	r1, [r3, #0]
    39a6:	605a      	str	r2, [r3, #4]
    39a8:	e7da      	b.n	3960 <_free_r+0x24>
    39aa:	42a0      	cmp	r0, r4
    39ac:	d902      	bls.n	39b4 <_free_r+0x78>
    39ae:	230c      	movs	r3, #12
    39b0:	602b      	str	r3, [r5, #0]
    39b2:	e7d5      	b.n	3960 <_free_r+0x24>
    39b4:	6821      	ldr	r1, [r4, #0]
    39b6:	1860      	adds	r0, r4, r1
    39b8:	4282      	cmp	r2, r0
    39ba:	d103      	bne.n	39c4 <_free_r+0x88>
    39bc:	6810      	ldr	r0, [r2, #0]
    39be:	6852      	ldr	r2, [r2, #4]
    39c0:	1841      	adds	r1, r0, r1
    39c2:	6021      	str	r1, [r4, #0]
    39c4:	6062      	str	r2, [r4, #4]
    39c6:	605c      	str	r4, [r3, #4]
    39c8:	e7ca      	b.n	3960 <_free_r+0x24>
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	20000560 	.word	0x20000560

000039d0 <_malloc_r>:
    39d0:	2303      	movs	r3, #3
    39d2:	b570      	push	{r4, r5, r6, lr}
    39d4:	1ccd      	adds	r5, r1, #3
    39d6:	439d      	bics	r5, r3
    39d8:	3508      	adds	r5, #8
    39da:	0006      	movs	r6, r0
    39dc:	2d0c      	cmp	r5, #12
    39de:	d21e      	bcs.n	3a1e <_malloc_r+0x4e>
    39e0:	250c      	movs	r5, #12
    39e2:	42a9      	cmp	r1, r5
    39e4:	d81d      	bhi.n	3a22 <_malloc_r+0x52>
    39e6:	0030      	movs	r0, r6
    39e8:	f000 fc76 	bl	42d8 <__malloc_lock>
    39ec:	4a25      	ldr	r2, [pc, #148]	; (3a84 <_malloc_r+0xb4>)
    39ee:	6814      	ldr	r4, [r2, #0]
    39f0:	0021      	movs	r1, r4
    39f2:	2900      	cmp	r1, #0
    39f4:	d119      	bne.n	3a2a <_malloc_r+0x5a>
    39f6:	4c24      	ldr	r4, [pc, #144]	; (3a88 <_malloc_r+0xb8>)
    39f8:	6823      	ldr	r3, [r4, #0]
    39fa:	2b00      	cmp	r3, #0
    39fc:	d103      	bne.n	3a06 <_malloc_r+0x36>
    39fe:	0030      	movs	r0, r6
    3a00:	f000 f8dc 	bl	3bbc <_sbrk_r>
    3a04:	6020      	str	r0, [r4, #0]
    3a06:	0029      	movs	r1, r5
    3a08:	0030      	movs	r0, r6
    3a0a:	f000 f8d7 	bl	3bbc <_sbrk_r>
    3a0e:	1c43      	adds	r3, r0, #1
    3a10:	d12c      	bne.n	3a6c <_malloc_r+0x9c>
    3a12:	230c      	movs	r3, #12
    3a14:	0030      	movs	r0, r6
    3a16:	6033      	str	r3, [r6, #0]
    3a18:	f000 fc5f 	bl	42da <__malloc_unlock>
    3a1c:	e003      	b.n	3a26 <_malloc_r+0x56>
    3a1e:	2d00      	cmp	r5, #0
    3a20:	dadf      	bge.n	39e2 <_malloc_r+0x12>
    3a22:	230c      	movs	r3, #12
    3a24:	6033      	str	r3, [r6, #0]
    3a26:	2000      	movs	r0, #0
    3a28:	bd70      	pop	{r4, r5, r6, pc}
    3a2a:	680b      	ldr	r3, [r1, #0]
    3a2c:	1b5b      	subs	r3, r3, r5
    3a2e:	d41a      	bmi.n	3a66 <_malloc_r+0x96>
    3a30:	2b0b      	cmp	r3, #11
    3a32:	d903      	bls.n	3a3c <_malloc_r+0x6c>
    3a34:	600b      	str	r3, [r1, #0]
    3a36:	18cc      	adds	r4, r1, r3
    3a38:	6025      	str	r5, [r4, #0]
    3a3a:	e003      	b.n	3a44 <_malloc_r+0x74>
    3a3c:	428c      	cmp	r4, r1
    3a3e:	d10e      	bne.n	3a5e <_malloc_r+0x8e>
    3a40:	6863      	ldr	r3, [r4, #4]
    3a42:	6013      	str	r3, [r2, #0]
    3a44:	0030      	movs	r0, r6
    3a46:	f000 fc48 	bl	42da <__malloc_unlock>
    3a4a:	0020      	movs	r0, r4
    3a4c:	2207      	movs	r2, #7
    3a4e:	300b      	adds	r0, #11
    3a50:	1d23      	adds	r3, r4, #4
    3a52:	4390      	bics	r0, r2
    3a54:	1ac3      	subs	r3, r0, r3
    3a56:	d0e7      	beq.n	3a28 <_malloc_r+0x58>
    3a58:	425a      	negs	r2, r3
    3a5a:	50e2      	str	r2, [r4, r3]
    3a5c:	e7e4      	b.n	3a28 <_malloc_r+0x58>
    3a5e:	684b      	ldr	r3, [r1, #4]
    3a60:	6063      	str	r3, [r4, #4]
    3a62:	000c      	movs	r4, r1
    3a64:	e7ee      	b.n	3a44 <_malloc_r+0x74>
    3a66:	000c      	movs	r4, r1
    3a68:	6849      	ldr	r1, [r1, #4]
    3a6a:	e7c2      	b.n	39f2 <_malloc_r+0x22>
    3a6c:	2303      	movs	r3, #3
    3a6e:	1cc4      	adds	r4, r0, #3
    3a70:	439c      	bics	r4, r3
    3a72:	42a0      	cmp	r0, r4
    3a74:	d0e0      	beq.n	3a38 <_malloc_r+0x68>
    3a76:	1a21      	subs	r1, r4, r0
    3a78:	0030      	movs	r0, r6
    3a7a:	f000 f89f 	bl	3bbc <_sbrk_r>
    3a7e:	1c43      	adds	r3, r0, #1
    3a80:	d1da      	bne.n	3a38 <_malloc_r+0x68>
    3a82:	e7c6      	b.n	3a12 <_malloc_r+0x42>
    3a84:	20000560 	.word	0x20000560
    3a88:	20000564 	.word	0x20000564

00003a8c <iprintf>:
    3a8c:	b40f      	push	{r0, r1, r2, r3}
    3a8e:	4b0b      	ldr	r3, [pc, #44]	; (3abc <iprintf+0x30>)
    3a90:	b513      	push	{r0, r1, r4, lr}
    3a92:	681c      	ldr	r4, [r3, #0]
    3a94:	2c00      	cmp	r4, #0
    3a96:	d005      	beq.n	3aa4 <iprintf+0x18>
    3a98:	69a3      	ldr	r3, [r4, #24]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d102      	bne.n	3aa4 <iprintf+0x18>
    3a9e:	0020      	movs	r0, r4
    3aa0:	f000 fb18 	bl	40d4 <__sinit>
    3aa4:	ab05      	add	r3, sp, #20
    3aa6:	9a04      	ldr	r2, [sp, #16]
    3aa8:	68a1      	ldr	r1, [r4, #8]
    3aaa:	0020      	movs	r0, r4
    3aac:	9301      	str	r3, [sp, #4]
    3aae:	f000 fc3d 	bl	432c <_vfiprintf_r>
    3ab2:	bc16      	pop	{r1, r2, r4}
    3ab4:	bc08      	pop	{r3}
    3ab6:	b004      	add	sp, #16
    3ab8:	4718      	bx	r3
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	2000000c 	.word	0x2000000c

00003ac0 <putchar>:
    3ac0:	4b08      	ldr	r3, [pc, #32]	; (3ae4 <putchar+0x24>)
    3ac2:	b570      	push	{r4, r5, r6, lr}
    3ac4:	681c      	ldr	r4, [r3, #0]
    3ac6:	0005      	movs	r5, r0
    3ac8:	2c00      	cmp	r4, #0
    3aca:	d005      	beq.n	3ad8 <putchar+0x18>
    3acc:	69a3      	ldr	r3, [r4, #24]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d102      	bne.n	3ad8 <putchar+0x18>
    3ad2:	0020      	movs	r0, r4
    3ad4:	f000 fafe 	bl	40d4 <__sinit>
    3ad8:	0029      	movs	r1, r5
    3ada:	68a2      	ldr	r2, [r4, #8]
    3adc:	0020      	movs	r0, r4
    3ade:	f000 fec9 	bl	4874 <_putc_r>
    3ae2:	bd70      	pop	{r4, r5, r6, pc}
    3ae4:	2000000c 	.word	0x2000000c

00003ae8 <_puts_r>:
    3ae8:	b570      	push	{r4, r5, r6, lr}
    3aea:	0005      	movs	r5, r0
    3aec:	000e      	movs	r6, r1
    3aee:	2800      	cmp	r0, #0
    3af0:	d004      	beq.n	3afc <_puts_r+0x14>
    3af2:	6983      	ldr	r3, [r0, #24]
    3af4:	2b00      	cmp	r3, #0
    3af6:	d101      	bne.n	3afc <_puts_r+0x14>
    3af8:	f000 faec 	bl	40d4 <__sinit>
    3afc:	69ab      	ldr	r3, [r5, #24]
    3afe:	68ac      	ldr	r4, [r5, #8]
    3b00:	2b00      	cmp	r3, #0
    3b02:	d102      	bne.n	3b0a <_puts_r+0x22>
    3b04:	0028      	movs	r0, r5
    3b06:	f000 fae5 	bl	40d4 <__sinit>
    3b0a:	4b24      	ldr	r3, [pc, #144]	; (3b9c <_puts_r+0xb4>)
    3b0c:	429c      	cmp	r4, r3
    3b0e:	d10f      	bne.n	3b30 <_puts_r+0x48>
    3b10:	686c      	ldr	r4, [r5, #4]
    3b12:	89a3      	ldrh	r3, [r4, #12]
    3b14:	071b      	lsls	r3, r3, #28
    3b16:	d502      	bpl.n	3b1e <_puts_r+0x36>
    3b18:	6923      	ldr	r3, [r4, #16]
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d120      	bne.n	3b60 <_puts_r+0x78>
    3b1e:	0021      	movs	r1, r4
    3b20:	0028      	movs	r0, r5
    3b22:	f000 f969 	bl	3df8 <__swsetup_r>
    3b26:	2800      	cmp	r0, #0
    3b28:	d01a      	beq.n	3b60 <_puts_r+0x78>
    3b2a:	2001      	movs	r0, #1
    3b2c:	4240      	negs	r0, r0
    3b2e:	bd70      	pop	{r4, r5, r6, pc}
    3b30:	4b1b      	ldr	r3, [pc, #108]	; (3ba0 <_puts_r+0xb8>)
    3b32:	429c      	cmp	r4, r3
    3b34:	d101      	bne.n	3b3a <_puts_r+0x52>
    3b36:	68ac      	ldr	r4, [r5, #8]
    3b38:	e7eb      	b.n	3b12 <_puts_r+0x2a>
    3b3a:	4b1a      	ldr	r3, [pc, #104]	; (3ba4 <_puts_r+0xbc>)
    3b3c:	429c      	cmp	r4, r3
    3b3e:	d1e8      	bne.n	3b12 <_puts_r+0x2a>
    3b40:	68ec      	ldr	r4, [r5, #12]
    3b42:	e7e6      	b.n	3b12 <_puts_r+0x2a>
    3b44:	3b01      	subs	r3, #1
    3b46:	3601      	adds	r6, #1
    3b48:	60a3      	str	r3, [r4, #8]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	da04      	bge.n	3b58 <_puts_r+0x70>
    3b4e:	69a2      	ldr	r2, [r4, #24]
    3b50:	4293      	cmp	r3, r2
    3b52:	db16      	blt.n	3b82 <_puts_r+0x9a>
    3b54:	290a      	cmp	r1, #10
    3b56:	d014      	beq.n	3b82 <_puts_r+0x9a>
    3b58:	6823      	ldr	r3, [r4, #0]
    3b5a:	1c5a      	adds	r2, r3, #1
    3b5c:	6022      	str	r2, [r4, #0]
    3b5e:	7019      	strb	r1, [r3, #0]
    3b60:	7831      	ldrb	r1, [r6, #0]
    3b62:	68a3      	ldr	r3, [r4, #8]
    3b64:	2900      	cmp	r1, #0
    3b66:	d1ed      	bne.n	3b44 <_puts_r+0x5c>
    3b68:	3b01      	subs	r3, #1
    3b6a:	60a3      	str	r3, [r4, #8]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	da0f      	bge.n	3b90 <_puts_r+0xa8>
    3b70:	0022      	movs	r2, r4
    3b72:	310a      	adds	r1, #10
    3b74:	0028      	movs	r0, r5
    3b76:	f000 f8e9 	bl	3d4c <__swbuf_r>
    3b7a:	1c43      	adds	r3, r0, #1
    3b7c:	d0d5      	beq.n	3b2a <_puts_r+0x42>
    3b7e:	200a      	movs	r0, #10
    3b80:	e7d5      	b.n	3b2e <_puts_r+0x46>
    3b82:	0022      	movs	r2, r4
    3b84:	0028      	movs	r0, r5
    3b86:	f000 f8e1 	bl	3d4c <__swbuf_r>
    3b8a:	1c43      	adds	r3, r0, #1
    3b8c:	d1e8      	bne.n	3b60 <_puts_r+0x78>
    3b8e:	e7cc      	b.n	3b2a <_puts_r+0x42>
    3b90:	200a      	movs	r0, #10
    3b92:	6823      	ldr	r3, [r4, #0]
    3b94:	1c5a      	adds	r2, r3, #1
    3b96:	6022      	str	r2, [r4, #0]
    3b98:	7018      	strb	r0, [r3, #0]
    3b9a:	e7c8      	b.n	3b2e <_puts_r+0x46>
    3b9c:	00005344 	.word	0x00005344
    3ba0:	00005364 	.word	0x00005364
    3ba4:	00005324 	.word	0x00005324

00003ba8 <puts>:
    3ba8:	b510      	push	{r4, lr}
    3baa:	4b03      	ldr	r3, [pc, #12]	; (3bb8 <puts+0x10>)
    3bac:	0001      	movs	r1, r0
    3bae:	6818      	ldr	r0, [r3, #0]
    3bb0:	f7ff ff9a 	bl	3ae8 <_puts_r>
    3bb4:	bd10      	pop	{r4, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	2000000c 	.word	0x2000000c

00003bbc <_sbrk_r>:
    3bbc:	2300      	movs	r3, #0
    3bbe:	b570      	push	{r4, r5, r6, lr}
    3bc0:	4c06      	ldr	r4, [pc, #24]	; (3bdc <_sbrk_r+0x20>)
    3bc2:	0005      	movs	r5, r0
    3bc4:	0008      	movs	r0, r1
    3bc6:	6023      	str	r3, [r4, #0]
    3bc8:	f7ff f9f8 	bl	2fbc <_sbrk>
    3bcc:	1c43      	adds	r3, r0, #1
    3bce:	d103      	bne.n	3bd8 <_sbrk_r+0x1c>
    3bd0:	6823      	ldr	r3, [r4, #0]
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d000      	beq.n	3bd8 <_sbrk_r+0x1c>
    3bd6:	602b      	str	r3, [r5, #0]
    3bd8:	bd70      	pop	{r4, r5, r6, pc}
    3bda:	46c0      	nop			; (mov r8, r8)
    3bdc:	20000614 	.word	0x20000614

00003be0 <setbuf>:
    3be0:	424a      	negs	r2, r1
    3be2:	414a      	adcs	r2, r1
    3be4:	2380      	movs	r3, #128	; 0x80
    3be6:	b510      	push	{r4, lr}
    3be8:	0052      	lsls	r2, r2, #1
    3bea:	00db      	lsls	r3, r3, #3
    3bec:	f000 f802 	bl	3bf4 <setvbuf>
    3bf0:	bd10      	pop	{r4, pc}
	...

00003bf4 <setvbuf>:
    3bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bf6:	001d      	movs	r5, r3
    3bf8:	4b4f      	ldr	r3, [pc, #316]	; (3d38 <setvbuf+0x144>)
    3bfa:	b085      	sub	sp, #20
    3bfc:	681e      	ldr	r6, [r3, #0]
    3bfe:	0004      	movs	r4, r0
    3c00:	000f      	movs	r7, r1
    3c02:	9200      	str	r2, [sp, #0]
    3c04:	2e00      	cmp	r6, #0
    3c06:	d005      	beq.n	3c14 <setvbuf+0x20>
    3c08:	69b3      	ldr	r3, [r6, #24]
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d102      	bne.n	3c14 <setvbuf+0x20>
    3c0e:	0030      	movs	r0, r6
    3c10:	f000 fa60 	bl	40d4 <__sinit>
    3c14:	4b49      	ldr	r3, [pc, #292]	; (3d3c <setvbuf+0x148>)
    3c16:	429c      	cmp	r4, r3
    3c18:	d150      	bne.n	3cbc <setvbuf+0xc8>
    3c1a:	6874      	ldr	r4, [r6, #4]
    3c1c:	9b00      	ldr	r3, [sp, #0]
    3c1e:	2b02      	cmp	r3, #2
    3c20:	d005      	beq.n	3c2e <setvbuf+0x3a>
    3c22:	2b01      	cmp	r3, #1
    3c24:	d900      	bls.n	3c28 <setvbuf+0x34>
    3c26:	e084      	b.n	3d32 <setvbuf+0x13e>
    3c28:	2d00      	cmp	r5, #0
    3c2a:	da00      	bge.n	3c2e <setvbuf+0x3a>
    3c2c:	e081      	b.n	3d32 <setvbuf+0x13e>
    3c2e:	0021      	movs	r1, r4
    3c30:	0030      	movs	r0, r6
    3c32:	f000 f9e1 	bl	3ff8 <_fflush_r>
    3c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3c38:	2900      	cmp	r1, #0
    3c3a:	d008      	beq.n	3c4e <setvbuf+0x5a>
    3c3c:	0023      	movs	r3, r4
    3c3e:	3344      	adds	r3, #68	; 0x44
    3c40:	4299      	cmp	r1, r3
    3c42:	d002      	beq.n	3c4a <setvbuf+0x56>
    3c44:	0030      	movs	r0, r6
    3c46:	f7ff fe79 	bl	393c <_free_r>
    3c4a:	2300      	movs	r3, #0
    3c4c:	6363      	str	r3, [r4, #52]	; 0x34
    3c4e:	2300      	movs	r3, #0
    3c50:	61a3      	str	r3, [r4, #24]
    3c52:	6063      	str	r3, [r4, #4]
    3c54:	89a3      	ldrh	r3, [r4, #12]
    3c56:	061b      	lsls	r3, r3, #24
    3c58:	d503      	bpl.n	3c62 <setvbuf+0x6e>
    3c5a:	6921      	ldr	r1, [r4, #16]
    3c5c:	0030      	movs	r0, r6
    3c5e:	f7ff fe6d 	bl	393c <_free_r>
    3c62:	89a3      	ldrh	r3, [r4, #12]
    3c64:	4a36      	ldr	r2, [pc, #216]	; (3d40 <setvbuf+0x14c>)
    3c66:	4013      	ands	r3, r2
    3c68:	81a3      	strh	r3, [r4, #12]
    3c6a:	9b00      	ldr	r3, [sp, #0]
    3c6c:	2b02      	cmp	r3, #2
    3c6e:	d05a      	beq.n	3d26 <setvbuf+0x132>
    3c70:	ab03      	add	r3, sp, #12
    3c72:	aa02      	add	r2, sp, #8
    3c74:	0021      	movs	r1, r4
    3c76:	0030      	movs	r0, r6
    3c78:	f000 fac2 	bl	4200 <__swhatbuf_r>
    3c7c:	89a3      	ldrh	r3, [r4, #12]
    3c7e:	4318      	orrs	r0, r3
    3c80:	81a0      	strh	r0, [r4, #12]
    3c82:	2d00      	cmp	r5, #0
    3c84:	d124      	bne.n	3cd0 <setvbuf+0xdc>
    3c86:	9d02      	ldr	r5, [sp, #8]
    3c88:	0028      	movs	r0, r5
    3c8a:	f7ff fe3b 	bl	3904 <malloc>
    3c8e:	9501      	str	r5, [sp, #4]
    3c90:	1e07      	subs	r7, r0, #0
    3c92:	d142      	bne.n	3d1a <setvbuf+0x126>
    3c94:	9b02      	ldr	r3, [sp, #8]
    3c96:	9301      	str	r3, [sp, #4]
    3c98:	42ab      	cmp	r3, r5
    3c9a:	d139      	bne.n	3d10 <setvbuf+0x11c>
    3c9c:	2001      	movs	r0, #1
    3c9e:	4240      	negs	r0, r0
    3ca0:	2302      	movs	r3, #2
    3ca2:	89a2      	ldrh	r2, [r4, #12]
    3ca4:	4313      	orrs	r3, r2
    3ca6:	81a3      	strh	r3, [r4, #12]
    3ca8:	2300      	movs	r3, #0
    3caa:	60a3      	str	r3, [r4, #8]
    3cac:	0023      	movs	r3, r4
    3cae:	3347      	adds	r3, #71	; 0x47
    3cb0:	6023      	str	r3, [r4, #0]
    3cb2:	6123      	str	r3, [r4, #16]
    3cb4:	2301      	movs	r3, #1
    3cb6:	6163      	str	r3, [r4, #20]
    3cb8:	b005      	add	sp, #20
    3cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cbc:	4b21      	ldr	r3, [pc, #132]	; (3d44 <setvbuf+0x150>)
    3cbe:	429c      	cmp	r4, r3
    3cc0:	d101      	bne.n	3cc6 <setvbuf+0xd2>
    3cc2:	68b4      	ldr	r4, [r6, #8]
    3cc4:	e7aa      	b.n	3c1c <setvbuf+0x28>
    3cc6:	4b20      	ldr	r3, [pc, #128]	; (3d48 <setvbuf+0x154>)
    3cc8:	429c      	cmp	r4, r3
    3cca:	d1a7      	bne.n	3c1c <setvbuf+0x28>
    3ccc:	68f4      	ldr	r4, [r6, #12]
    3cce:	e7a5      	b.n	3c1c <setvbuf+0x28>
    3cd0:	2f00      	cmp	r7, #0
    3cd2:	d0d9      	beq.n	3c88 <setvbuf+0x94>
    3cd4:	69b3      	ldr	r3, [r6, #24]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d102      	bne.n	3ce0 <setvbuf+0xec>
    3cda:	0030      	movs	r0, r6
    3cdc:	f000 f9fa 	bl	40d4 <__sinit>
    3ce0:	9b00      	ldr	r3, [sp, #0]
    3ce2:	2b01      	cmp	r3, #1
    3ce4:	d103      	bne.n	3cee <setvbuf+0xfa>
    3ce6:	89a3      	ldrh	r3, [r4, #12]
    3ce8:	9a00      	ldr	r2, [sp, #0]
    3cea:	431a      	orrs	r2, r3
    3cec:	81a2      	strh	r2, [r4, #12]
    3cee:	2008      	movs	r0, #8
    3cf0:	89a3      	ldrh	r3, [r4, #12]
    3cf2:	6027      	str	r7, [r4, #0]
    3cf4:	6127      	str	r7, [r4, #16]
    3cf6:	6165      	str	r5, [r4, #20]
    3cf8:	4018      	ands	r0, r3
    3cfa:	d018      	beq.n	3d2e <setvbuf+0x13a>
    3cfc:	2001      	movs	r0, #1
    3cfe:	4018      	ands	r0, r3
    3d00:	2300      	movs	r3, #0
    3d02:	4298      	cmp	r0, r3
    3d04:	d011      	beq.n	3d2a <setvbuf+0x136>
    3d06:	426d      	negs	r5, r5
    3d08:	60a3      	str	r3, [r4, #8]
    3d0a:	61a5      	str	r5, [r4, #24]
    3d0c:	0018      	movs	r0, r3
    3d0e:	e7d3      	b.n	3cb8 <setvbuf+0xc4>
    3d10:	9801      	ldr	r0, [sp, #4]
    3d12:	f7ff fdf7 	bl	3904 <malloc>
    3d16:	1e07      	subs	r7, r0, #0
    3d18:	d0c0      	beq.n	3c9c <setvbuf+0xa8>
    3d1a:	2380      	movs	r3, #128	; 0x80
    3d1c:	89a2      	ldrh	r2, [r4, #12]
    3d1e:	9d01      	ldr	r5, [sp, #4]
    3d20:	4313      	orrs	r3, r2
    3d22:	81a3      	strh	r3, [r4, #12]
    3d24:	e7d6      	b.n	3cd4 <setvbuf+0xe0>
    3d26:	2000      	movs	r0, #0
    3d28:	e7ba      	b.n	3ca0 <setvbuf+0xac>
    3d2a:	60a5      	str	r5, [r4, #8]
    3d2c:	e7c4      	b.n	3cb8 <setvbuf+0xc4>
    3d2e:	60a0      	str	r0, [r4, #8]
    3d30:	e7c2      	b.n	3cb8 <setvbuf+0xc4>
    3d32:	2001      	movs	r0, #1
    3d34:	4240      	negs	r0, r0
    3d36:	e7bf      	b.n	3cb8 <setvbuf+0xc4>
    3d38:	2000000c 	.word	0x2000000c
    3d3c:	00005344 	.word	0x00005344
    3d40:	fffff35c 	.word	0xfffff35c
    3d44:	00005364 	.word	0x00005364
    3d48:	00005324 	.word	0x00005324

00003d4c <__swbuf_r>:
    3d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d4e:	0005      	movs	r5, r0
    3d50:	000e      	movs	r6, r1
    3d52:	0014      	movs	r4, r2
    3d54:	2800      	cmp	r0, #0
    3d56:	d004      	beq.n	3d62 <__swbuf_r+0x16>
    3d58:	6983      	ldr	r3, [r0, #24]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d101      	bne.n	3d62 <__swbuf_r+0x16>
    3d5e:	f000 f9b9 	bl	40d4 <__sinit>
    3d62:	4b22      	ldr	r3, [pc, #136]	; (3dec <__swbuf_r+0xa0>)
    3d64:	429c      	cmp	r4, r3
    3d66:	d12d      	bne.n	3dc4 <__swbuf_r+0x78>
    3d68:	686c      	ldr	r4, [r5, #4]
    3d6a:	69a3      	ldr	r3, [r4, #24]
    3d6c:	60a3      	str	r3, [r4, #8]
    3d6e:	89a3      	ldrh	r3, [r4, #12]
    3d70:	071b      	lsls	r3, r3, #28
    3d72:	d531      	bpl.n	3dd8 <__swbuf_r+0x8c>
    3d74:	6923      	ldr	r3, [r4, #16]
    3d76:	2b00      	cmp	r3, #0
    3d78:	d02e      	beq.n	3dd8 <__swbuf_r+0x8c>
    3d7a:	6823      	ldr	r3, [r4, #0]
    3d7c:	6922      	ldr	r2, [r4, #16]
    3d7e:	b2f7      	uxtb	r7, r6
    3d80:	1a98      	subs	r0, r3, r2
    3d82:	6963      	ldr	r3, [r4, #20]
    3d84:	b2f6      	uxtb	r6, r6
    3d86:	4298      	cmp	r0, r3
    3d88:	db05      	blt.n	3d96 <__swbuf_r+0x4a>
    3d8a:	0021      	movs	r1, r4
    3d8c:	0028      	movs	r0, r5
    3d8e:	f000 f933 	bl	3ff8 <_fflush_r>
    3d92:	2800      	cmp	r0, #0
    3d94:	d126      	bne.n	3de4 <__swbuf_r+0x98>
    3d96:	68a3      	ldr	r3, [r4, #8]
    3d98:	3001      	adds	r0, #1
    3d9a:	3b01      	subs	r3, #1
    3d9c:	60a3      	str	r3, [r4, #8]
    3d9e:	6823      	ldr	r3, [r4, #0]
    3da0:	1c5a      	adds	r2, r3, #1
    3da2:	6022      	str	r2, [r4, #0]
    3da4:	701f      	strb	r7, [r3, #0]
    3da6:	6963      	ldr	r3, [r4, #20]
    3da8:	4298      	cmp	r0, r3
    3daa:	d004      	beq.n	3db6 <__swbuf_r+0x6a>
    3dac:	89a3      	ldrh	r3, [r4, #12]
    3dae:	07db      	lsls	r3, r3, #31
    3db0:	d51a      	bpl.n	3de8 <__swbuf_r+0x9c>
    3db2:	2e0a      	cmp	r6, #10
    3db4:	d118      	bne.n	3de8 <__swbuf_r+0x9c>
    3db6:	0021      	movs	r1, r4
    3db8:	0028      	movs	r0, r5
    3dba:	f000 f91d 	bl	3ff8 <_fflush_r>
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d012      	beq.n	3de8 <__swbuf_r+0x9c>
    3dc2:	e00f      	b.n	3de4 <__swbuf_r+0x98>
    3dc4:	4b0a      	ldr	r3, [pc, #40]	; (3df0 <__swbuf_r+0xa4>)
    3dc6:	429c      	cmp	r4, r3
    3dc8:	d101      	bne.n	3dce <__swbuf_r+0x82>
    3dca:	68ac      	ldr	r4, [r5, #8]
    3dcc:	e7cd      	b.n	3d6a <__swbuf_r+0x1e>
    3dce:	4b09      	ldr	r3, [pc, #36]	; (3df4 <__swbuf_r+0xa8>)
    3dd0:	429c      	cmp	r4, r3
    3dd2:	d1ca      	bne.n	3d6a <__swbuf_r+0x1e>
    3dd4:	68ec      	ldr	r4, [r5, #12]
    3dd6:	e7c8      	b.n	3d6a <__swbuf_r+0x1e>
    3dd8:	0021      	movs	r1, r4
    3dda:	0028      	movs	r0, r5
    3ddc:	f000 f80c 	bl	3df8 <__swsetup_r>
    3de0:	2800      	cmp	r0, #0
    3de2:	d0ca      	beq.n	3d7a <__swbuf_r+0x2e>
    3de4:	2601      	movs	r6, #1
    3de6:	4276      	negs	r6, r6
    3de8:	0030      	movs	r0, r6
    3dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dec:	00005344 	.word	0x00005344
    3df0:	00005364 	.word	0x00005364
    3df4:	00005324 	.word	0x00005324

00003df8 <__swsetup_r>:
    3df8:	4b36      	ldr	r3, [pc, #216]	; (3ed4 <__swsetup_r+0xdc>)
    3dfa:	b570      	push	{r4, r5, r6, lr}
    3dfc:	681d      	ldr	r5, [r3, #0]
    3dfe:	0006      	movs	r6, r0
    3e00:	000c      	movs	r4, r1
    3e02:	2d00      	cmp	r5, #0
    3e04:	d005      	beq.n	3e12 <__swsetup_r+0x1a>
    3e06:	69ab      	ldr	r3, [r5, #24]
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d102      	bne.n	3e12 <__swsetup_r+0x1a>
    3e0c:	0028      	movs	r0, r5
    3e0e:	f000 f961 	bl	40d4 <__sinit>
    3e12:	4b31      	ldr	r3, [pc, #196]	; (3ed8 <__swsetup_r+0xe0>)
    3e14:	429c      	cmp	r4, r3
    3e16:	d10f      	bne.n	3e38 <__swsetup_r+0x40>
    3e18:	686c      	ldr	r4, [r5, #4]
    3e1a:	230c      	movs	r3, #12
    3e1c:	5ee2      	ldrsh	r2, [r4, r3]
    3e1e:	b293      	uxth	r3, r2
    3e20:	0719      	lsls	r1, r3, #28
    3e22:	d42d      	bmi.n	3e80 <__swsetup_r+0x88>
    3e24:	06d9      	lsls	r1, r3, #27
    3e26:	d411      	bmi.n	3e4c <__swsetup_r+0x54>
    3e28:	2309      	movs	r3, #9
    3e2a:	2001      	movs	r0, #1
    3e2c:	6033      	str	r3, [r6, #0]
    3e2e:	3337      	adds	r3, #55	; 0x37
    3e30:	4313      	orrs	r3, r2
    3e32:	81a3      	strh	r3, [r4, #12]
    3e34:	4240      	negs	r0, r0
    3e36:	bd70      	pop	{r4, r5, r6, pc}
    3e38:	4b28      	ldr	r3, [pc, #160]	; (3edc <__swsetup_r+0xe4>)
    3e3a:	429c      	cmp	r4, r3
    3e3c:	d101      	bne.n	3e42 <__swsetup_r+0x4a>
    3e3e:	68ac      	ldr	r4, [r5, #8]
    3e40:	e7eb      	b.n	3e1a <__swsetup_r+0x22>
    3e42:	4b27      	ldr	r3, [pc, #156]	; (3ee0 <__swsetup_r+0xe8>)
    3e44:	429c      	cmp	r4, r3
    3e46:	d1e8      	bne.n	3e1a <__swsetup_r+0x22>
    3e48:	68ec      	ldr	r4, [r5, #12]
    3e4a:	e7e6      	b.n	3e1a <__swsetup_r+0x22>
    3e4c:	075b      	lsls	r3, r3, #29
    3e4e:	d513      	bpl.n	3e78 <__swsetup_r+0x80>
    3e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e52:	2900      	cmp	r1, #0
    3e54:	d008      	beq.n	3e68 <__swsetup_r+0x70>
    3e56:	0023      	movs	r3, r4
    3e58:	3344      	adds	r3, #68	; 0x44
    3e5a:	4299      	cmp	r1, r3
    3e5c:	d002      	beq.n	3e64 <__swsetup_r+0x6c>
    3e5e:	0030      	movs	r0, r6
    3e60:	f7ff fd6c 	bl	393c <_free_r>
    3e64:	2300      	movs	r3, #0
    3e66:	6363      	str	r3, [r4, #52]	; 0x34
    3e68:	2224      	movs	r2, #36	; 0x24
    3e6a:	89a3      	ldrh	r3, [r4, #12]
    3e6c:	4393      	bics	r3, r2
    3e6e:	81a3      	strh	r3, [r4, #12]
    3e70:	2300      	movs	r3, #0
    3e72:	6063      	str	r3, [r4, #4]
    3e74:	6923      	ldr	r3, [r4, #16]
    3e76:	6023      	str	r3, [r4, #0]
    3e78:	2308      	movs	r3, #8
    3e7a:	89a2      	ldrh	r2, [r4, #12]
    3e7c:	4313      	orrs	r3, r2
    3e7e:	81a3      	strh	r3, [r4, #12]
    3e80:	6923      	ldr	r3, [r4, #16]
    3e82:	2b00      	cmp	r3, #0
    3e84:	d10b      	bne.n	3e9e <__swsetup_r+0xa6>
    3e86:	21a0      	movs	r1, #160	; 0xa0
    3e88:	2280      	movs	r2, #128	; 0x80
    3e8a:	89a3      	ldrh	r3, [r4, #12]
    3e8c:	0089      	lsls	r1, r1, #2
    3e8e:	0092      	lsls	r2, r2, #2
    3e90:	400b      	ands	r3, r1
    3e92:	4293      	cmp	r3, r2
    3e94:	d003      	beq.n	3e9e <__swsetup_r+0xa6>
    3e96:	0021      	movs	r1, r4
    3e98:	0030      	movs	r0, r6
    3e9a:	f000 f9d9 	bl	4250 <__smakebuf_r>
    3e9e:	2301      	movs	r3, #1
    3ea0:	89a2      	ldrh	r2, [r4, #12]
    3ea2:	4013      	ands	r3, r2
    3ea4:	d011      	beq.n	3eca <__swsetup_r+0xd2>
    3ea6:	2300      	movs	r3, #0
    3ea8:	60a3      	str	r3, [r4, #8]
    3eaa:	6963      	ldr	r3, [r4, #20]
    3eac:	425b      	negs	r3, r3
    3eae:	61a3      	str	r3, [r4, #24]
    3eb0:	2000      	movs	r0, #0
    3eb2:	6923      	ldr	r3, [r4, #16]
    3eb4:	4283      	cmp	r3, r0
    3eb6:	d1be      	bne.n	3e36 <__swsetup_r+0x3e>
    3eb8:	230c      	movs	r3, #12
    3eba:	5ee2      	ldrsh	r2, [r4, r3]
    3ebc:	0613      	lsls	r3, r2, #24
    3ebe:	d5ba      	bpl.n	3e36 <__swsetup_r+0x3e>
    3ec0:	2340      	movs	r3, #64	; 0x40
    3ec2:	4313      	orrs	r3, r2
    3ec4:	81a3      	strh	r3, [r4, #12]
    3ec6:	3801      	subs	r0, #1
    3ec8:	e7b5      	b.n	3e36 <__swsetup_r+0x3e>
    3eca:	0792      	lsls	r2, r2, #30
    3ecc:	d400      	bmi.n	3ed0 <__swsetup_r+0xd8>
    3ece:	6963      	ldr	r3, [r4, #20]
    3ed0:	60a3      	str	r3, [r4, #8]
    3ed2:	e7ed      	b.n	3eb0 <__swsetup_r+0xb8>
    3ed4:	2000000c 	.word	0x2000000c
    3ed8:	00005344 	.word	0x00005344
    3edc:	00005364 	.word	0x00005364
    3ee0:	00005324 	.word	0x00005324

00003ee4 <__sflush_r>:
    3ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ee6:	898a      	ldrh	r2, [r1, #12]
    3ee8:	0005      	movs	r5, r0
    3eea:	000c      	movs	r4, r1
    3eec:	0713      	lsls	r3, r2, #28
    3eee:	d460      	bmi.n	3fb2 <__sflush_r+0xce>
    3ef0:	684b      	ldr	r3, [r1, #4]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	dc04      	bgt.n	3f00 <__sflush_r+0x1c>
    3ef6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3ef8:	2b00      	cmp	r3, #0
    3efa:	dc01      	bgt.n	3f00 <__sflush_r+0x1c>
    3efc:	2000      	movs	r0, #0
    3efe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3f00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3f02:	2f00      	cmp	r7, #0
    3f04:	d0fa      	beq.n	3efc <__sflush_r+0x18>
    3f06:	2300      	movs	r3, #0
    3f08:	682e      	ldr	r6, [r5, #0]
    3f0a:	602b      	str	r3, [r5, #0]
    3f0c:	2380      	movs	r3, #128	; 0x80
    3f0e:	015b      	lsls	r3, r3, #5
    3f10:	401a      	ands	r2, r3
    3f12:	d034      	beq.n	3f7e <__sflush_r+0x9a>
    3f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3f16:	89a3      	ldrh	r3, [r4, #12]
    3f18:	075b      	lsls	r3, r3, #29
    3f1a:	d506      	bpl.n	3f2a <__sflush_r+0x46>
    3f1c:	6863      	ldr	r3, [r4, #4]
    3f1e:	1ac0      	subs	r0, r0, r3
    3f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3f22:	2b00      	cmp	r3, #0
    3f24:	d001      	beq.n	3f2a <__sflush_r+0x46>
    3f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3f28:	1ac0      	subs	r0, r0, r3
    3f2a:	0002      	movs	r2, r0
    3f2c:	6a21      	ldr	r1, [r4, #32]
    3f2e:	2300      	movs	r3, #0
    3f30:	0028      	movs	r0, r5
    3f32:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3f34:	47b8      	blx	r7
    3f36:	89a1      	ldrh	r1, [r4, #12]
    3f38:	1c43      	adds	r3, r0, #1
    3f3a:	d106      	bne.n	3f4a <__sflush_r+0x66>
    3f3c:	682b      	ldr	r3, [r5, #0]
    3f3e:	2b1d      	cmp	r3, #29
    3f40:	d831      	bhi.n	3fa6 <__sflush_r+0xc2>
    3f42:	4a2c      	ldr	r2, [pc, #176]	; (3ff4 <__sflush_r+0x110>)
    3f44:	40da      	lsrs	r2, r3
    3f46:	07d3      	lsls	r3, r2, #31
    3f48:	d52d      	bpl.n	3fa6 <__sflush_r+0xc2>
    3f4a:	2300      	movs	r3, #0
    3f4c:	6063      	str	r3, [r4, #4]
    3f4e:	6923      	ldr	r3, [r4, #16]
    3f50:	6023      	str	r3, [r4, #0]
    3f52:	04cb      	lsls	r3, r1, #19
    3f54:	d505      	bpl.n	3f62 <__sflush_r+0x7e>
    3f56:	1c43      	adds	r3, r0, #1
    3f58:	d102      	bne.n	3f60 <__sflush_r+0x7c>
    3f5a:	682b      	ldr	r3, [r5, #0]
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d100      	bne.n	3f62 <__sflush_r+0x7e>
    3f60:	6560      	str	r0, [r4, #84]	; 0x54
    3f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3f64:	602e      	str	r6, [r5, #0]
    3f66:	2900      	cmp	r1, #0
    3f68:	d0c8      	beq.n	3efc <__sflush_r+0x18>
    3f6a:	0023      	movs	r3, r4
    3f6c:	3344      	adds	r3, #68	; 0x44
    3f6e:	4299      	cmp	r1, r3
    3f70:	d002      	beq.n	3f78 <__sflush_r+0x94>
    3f72:	0028      	movs	r0, r5
    3f74:	f7ff fce2 	bl	393c <_free_r>
    3f78:	2000      	movs	r0, #0
    3f7a:	6360      	str	r0, [r4, #52]	; 0x34
    3f7c:	e7bf      	b.n	3efe <__sflush_r+0x1a>
    3f7e:	2301      	movs	r3, #1
    3f80:	6a21      	ldr	r1, [r4, #32]
    3f82:	0028      	movs	r0, r5
    3f84:	47b8      	blx	r7
    3f86:	1c43      	adds	r3, r0, #1
    3f88:	d1c5      	bne.n	3f16 <__sflush_r+0x32>
    3f8a:	682b      	ldr	r3, [r5, #0]
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	d0c2      	beq.n	3f16 <__sflush_r+0x32>
    3f90:	2b1d      	cmp	r3, #29
    3f92:	d001      	beq.n	3f98 <__sflush_r+0xb4>
    3f94:	2b16      	cmp	r3, #22
    3f96:	d101      	bne.n	3f9c <__sflush_r+0xb8>
    3f98:	602e      	str	r6, [r5, #0]
    3f9a:	e7af      	b.n	3efc <__sflush_r+0x18>
    3f9c:	2340      	movs	r3, #64	; 0x40
    3f9e:	89a2      	ldrh	r2, [r4, #12]
    3fa0:	4313      	orrs	r3, r2
    3fa2:	81a3      	strh	r3, [r4, #12]
    3fa4:	e7ab      	b.n	3efe <__sflush_r+0x1a>
    3fa6:	2340      	movs	r3, #64	; 0x40
    3fa8:	430b      	orrs	r3, r1
    3faa:	2001      	movs	r0, #1
    3fac:	81a3      	strh	r3, [r4, #12]
    3fae:	4240      	negs	r0, r0
    3fb0:	e7a5      	b.n	3efe <__sflush_r+0x1a>
    3fb2:	690f      	ldr	r7, [r1, #16]
    3fb4:	2f00      	cmp	r7, #0
    3fb6:	d0a1      	beq.n	3efc <__sflush_r+0x18>
    3fb8:	680b      	ldr	r3, [r1, #0]
    3fba:	600f      	str	r7, [r1, #0]
    3fbc:	1bdb      	subs	r3, r3, r7
    3fbe:	9301      	str	r3, [sp, #4]
    3fc0:	2300      	movs	r3, #0
    3fc2:	0792      	lsls	r2, r2, #30
    3fc4:	d100      	bne.n	3fc8 <__sflush_r+0xe4>
    3fc6:	694b      	ldr	r3, [r1, #20]
    3fc8:	60a3      	str	r3, [r4, #8]
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	dc00      	bgt.n	3fd2 <__sflush_r+0xee>
    3fd0:	e794      	b.n	3efc <__sflush_r+0x18>
    3fd2:	9b01      	ldr	r3, [sp, #4]
    3fd4:	003a      	movs	r2, r7
    3fd6:	6a21      	ldr	r1, [r4, #32]
    3fd8:	0028      	movs	r0, r5
    3fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3fdc:	47b0      	blx	r6
    3fde:	2800      	cmp	r0, #0
    3fe0:	dc03      	bgt.n	3fea <__sflush_r+0x106>
    3fe2:	2340      	movs	r3, #64	; 0x40
    3fe4:	89a2      	ldrh	r2, [r4, #12]
    3fe6:	4313      	orrs	r3, r2
    3fe8:	e7df      	b.n	3faa <__sflush_r+0xc6>
    3fea:	9b01      	ldr	r3, [sp, #4]
    3fec:	183f      	adds	r7, r7, r0
    3fee:	1a1b      	subs	r3, r3, r0
    3ff0:	9301      	str	r3, [sp, #4]
    3ff2:	e7ea      	b.n	3fca <__sflush_r+0xe6>
    3ff4:	20400001 	.word	0x20400001

00003ff8 <_fflush_r>:
    3ff8:	690b      	ldr	r3, [r1, #16]
    3ffa:	b570      	push	{r4, r5, r6, lr}
    3ffc:	0005      	movs	r5, r0
    3ffe:	000c      	movs	r4, r1
    4000:	2b00      	cmp	r3, #0
    4002:	d101      	bne.n	4008 <_fflush_r+0x10>
    4004:	2000      	movs	r0, #0
    4006:	bd70      	pop	{r4, r5, r6, pc}
    4008:	2800      	cmp	r0, #0
    400a:	d004      	beq.n	4016 <_fflush_r+0x1e>
    400c:	6983      	ldr	r3, [r0, #24]
    400e:	2b00      	cmp	r3, #0
    4010:	d101      	bne.n	4016 <_fflush_r+0x1e>
    4012:	f000 f85f 	bl	40d4 <__sinit>
    4016:	4b0b      	ldr	r3, [pc, #44]	; (4044 <_fflush_r+0x4c>)
    4018:	429c      	cmp	r4, r3
    401a:	d109      	bne.n	4030 <_fflush_r+0x38>
    401c:	686c      	ldr	r4, [r5, #4]
    401e:	220c      	movs	r2, #12
    4020:	5ea3      	ldrsh	r3, [r4, r2]
    4022:	2b00      	cmp	r3, #0
    4024:	d0ee      	beq.n	4004 <_fflush_r+0xc>
    4026:	0021      	movs	r1, r4
    4028:	0028      	movs	r0, r5
    402a:	f7ff ff5b 	bl	3ee4 <__sflush_r>
    402e:	e7ea      	b.n	4006 <_fflush_r+0xe>
    4030:	4b05      	ldr	r3, [pc, #20]	; (4048 <_fflush_r+0x50>)
    4032:	429c      	cmp	r4, r3
    4034:	d101      	bne.n	403a <_fflush_r+0x42>
    4036:	68ac      	ldr	r4, [r5, #8]
    4038:	e7f1      	b.n	401e <_fflush_r+0x26>
    403a:	4b04      	ldr	r3, [pc, #16]	; (404c <_fflush_r+0x54>)
    403c:	429c      	cmp	r4, r3
    403e:	d1ee      	bne.n	401e <_fflush_r+0x26>
    4040:	68ec      	ldr	r4, [r5, #12]
    4042:	e7ec      	b.n	401e <_fflush_r+0x26>
    4044:	00005344 	.word	0x00005344
    4048:	00005364 	.word	0x00005364
    404c:	00005324 	.word	0x00005324

00004050 <_cleanup_r>:
    4050:	b510      	push	{r4, lr}
    4052:	4902      	ldr	r1, [pc, #8]	; (405c <_cleanup_r+0xc>)
    4054:	f000 f8b2 	bl	41bc <_fwalk_reent>
    4058:	bd10      	pop	{r4, pc}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	00003ff9 	.word	0x00003ff9

00004060 <std.isra.0>:
    4060:	2300      	movs	r3, #0
    4062:	b510      	push	{r4, lr}
    4064:	0004      	movs	r4, r0
    4066:	6003      	str	r3, [r0, #0]
    4068:	6043      	str	r3, [r0, #4]
    406a:	6083      	str	r3, [r0, #8]
    406c:	8181      	strh	r1, [r0, #12]
    406e:	6643      	str	r3, [r0, #100]	; 0x64
    4070:	81c2      	strh	r2, [r0, #14]
    4072:	6103      	str	r3, [r0, #16]
    4074:	6143      	str	r3, [r0, #20]
    4076:	6183      	str	r3, [r0, #24]
    4078:	0019      	movs	r1, r3
    407a:	2208      	movs	r2, #8
    407c:	305c      	adds	r0, #92	; 0x5c
    407e:	f7ff fc54 	bl	392a <memset>
    4082:	4b05      	ldr	r3, [pc, #20]	; (4098 <std.isra.0+0x38>)
    4084:	6224      	str	r4, [r4, #32]
    4086:	6263      	str	r3, [r4, #36]	; 0x24
    4088:	4b04      	ldr	r3, [pc, #16]	; (409c <std.isra.0+0x3c>)
    408a:	62a3      	str	r3, [r4, #40]	; 0x28
    408c:	4b04      	ldr	r3, [pc, #16]	; (40a0 <std.isra.0+0x40>)
    408e:	62e3      	str	r3, [r4, #44]	; 0x2c
    4090:	4b04      	ldr	r3, [pc, #16]	; (40a4 <std.isra.0+0x44>)
    4092:	6323      	str	r3, [r4, #48]	; 0x30
    4094:	bd10      	pop	{r4, pc}
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	000048e1 	.word	0x000048e1
    409c:	00004909 	.word	0x00004909
    40a0:	00004941 	.word	0x00004941
    40a4:	0000496d 	.word	0x0000496d

000040a8 <__sfmoreglue>:
    40a8:	b570      	push	{r4, r5, r6, lr}
    40aa:	2568      	movs	r5, #104	; 0x68
    40ac:	1e4a      	subs	r2, r1, #1
    40ae:	4355      	muls	r5, r2
    40b0:	000e      	movs	r6, r1
    40b2:	0029      	movs	r1, r5
    40b4:	3174      	adds	r1, #116	; 0x74
    40b6:	f7ff fc8b 	bl	39d0 <_malloc_r>
    40ba:	1e04      	subs	r4, r0, #0
    40bc:	d008      	beq.n	40d0 <__sfmoreglue+0x28>
    40be:	2100      	movs	r1, #0
    40c0:	002a      	movs	r2, r5
    40c2:	6001      	str	r1, [r0, #0]
    40c4:	6046      	str	r6, [r0, #4]
    40c6:	300c      	adds	r0, #12
    40c8:	60a0      	str	r0, [r4, #8]
    40ca:	3268      	adds	r2, #104	; 0x68
    40cc:	f7ff fc2d 	bl	392a <memset>
    40d0:	0020      	movs	r0, r4
    40d2:	bd70      	pop	{r4, r5, r6, pc}

000040d4 <__sinit>:
    40d4:	6983      	ldr	r3, [r0, #24]
    40d6:	b513      	push	{r0, r1, r4, lr}
    40d8:	0004      	movs	r4, r0
    40da:	2b00      	cmp	r3, #0
    40dc:	d128      	bne.n	4130 <__sinit+0x5c>
    40de:	6483      	str	r3, [r0, #72]	; 0x48
    40e0:	64c3      	str	r3, [r0, #76]	; 0x4c
    40e2:	6503      	str	r3, [r0, #80]	; 0x50
    40e4:	4b13      	ldr	r3, [pc, #76]	; (4134 <__sinit+0x60>)
    40e6:	4a14      	ldr	r2, [pc, #80]	; (4138 <__sinit+0x64>)
    40e8:	681b      	ldr	r3, [r3, #0]
    40ea:	6282      	str	r2, [r0, #40]	; 0x28
    40ec:	9301      	str	r3, [sp, #4]
    40ee:	4298      	cmp	r0, r3
    40f0:	d101      	bne.n	40f6 <__sinit+0x22>
    40f2:	2301      	movs	r3, #1
    40f4:	6183      	str	r3, [r0, #24]
    40f6:	0020      	movs	r0, r4
    40f8:	f000 f820 	bl	413c <__sfp>
    40fc:	6060      	str	r0, [r4, #4]
    40fe:	0020      	movs	r0, r4
    4100:	f000 f81c 	bl	413c <__sfp>
    4104:	60a0      	str	r0, [r4, #8]
    4106:	0020      	movs	r0, r4
    4108:	f000 f818 	bl	413c <__sfp>
    410c:	2200      	movs	r2, #0
    410e:	60e0      	str	r0, [r4, #12]
    4110:	2104      	movs	r1, #4
    4112:	6860      	ldr	r0, [r4, #4]
    4114:	f7ff ffa4 	bl	4060 <std.isra.0>
    4118:	2201      	movs	r2, #1
    411a:	2109      	movs	r1, #9
    411c:	68a0      	ldr	r0, [r4, #8]
    411e:	f7ff ff9f 	bl	4060 <std.isra.0>
    4122:	2202      	movs	r2, #2
    4124:	2112      	movs	r1, #18
    4126:	68e0      	ldr	r0, [r4, #12]
    4128:	f7ff ff9a 	bl	4060 <std.isra.0>
    412c:	2301      	movs	r3, #1
    412e:	61a3      	str	r3, [r4, #24]
    4130:	bd13      	pop	{r0, r1, r4, pc}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	00005320 	.word	0x00005320
    4138:	00004051 	.word	0x00004051

0000413c <__sfp>:
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413e:	4b1e      	ldr	r3, [pc, #120]	; (41b8 <__sfp+0x7c>)
    4140:	0007      	movs	r7, r0
    4142:	681e      	ldr	r6, [r3, #0]
    4144:	69b3      	ldr	r3, [r6, #24]
    4146:	2b00      	cmp	r3, #0
    4148:	d102      	bne.n	4150 <__sfp+0x14>
    414a:	0030      	movs	r0, r6
    414c:	f7ff ffc2 	bl	40d4 <__sinit>
    4150:	3648      	adds	r6, #72	; 0x48
    4152:	68b4      	ldr	r4, [r6, #8]
    4154:	6873      	ldr	r3, [r6, #4]
    4156:	3b01      	subs	r3, #1
    4158:	d504      	bpl.n	4164 <__sfp+0x28>
    415a:	6833      	ldr	r3, [r6, #0]
    415c:	2b00      	cmp	r3, #0
    415e:	d007      	beq.n	4170 <__sfp+0x34>
    4160:	6836      	ldr	r6, [r6, #0]
    4162:	e7f6      	b.n	4152 <__sfp+0x16>
    4164:	220c      	movs	r2, #12
    4166:	5ea5      	ldrsh	r5, [r4, r2]
    4168:	2d00      	cmp	r5, #0
    416a:	d00d      	beq.n	4188 <__sfp+0x4c>
    416c:	3468      	adds	r4, #104	; 0x68
    416e:	e7f2      	b.n	4156 <__sfp+0x1a>
    4170:	2104      	movs	r1, #4
    4172:	0038      	movs	r0, r7
    4174:	f7ff ff98 	bl	40a8 <__sfmoreglue>
    4178:	6030      	str	r0, [r6, #0]
    417a:	2800      	cmp	r0, #0
    417c:	d1f0      	bne.n	4160 <__sfp+0x24>
    417e:	230c      	movs	r3, #12
    4180:	0004      	movs	r4, r0
    4182:	603b      	str	r3, [r7, #0]
    4184:	0020      	movs	r0, r4
    4186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4188:	2301      	movs	r3, #1
    418a:	0020      	movs	r0, r4
    418c:	425b      	negs	r3, r3
    418e:	81e3      	strh	r3, [r4, #14]
    4190:	3302      	adds	r3, #2
    4192:	81a3      	strh	r3, [r4, #12]
    4194:	6665      	str	r5, [r4, #100]	; 0x64
    4196:	6025      	str	r5, [r4, #0]
    4198:	60a5      	str	r5, [r4, #8]
    419a:	6065      	str	r5, [r4, #4]
    419c:	6125      	str	r5, [r4, #16]
    419e:	6165      	str	r5, [r4, #20]
    41a0:	61a5      	str	r5, [r4, #24]
    41a2:	2208      	movs	r2, #8
    41a4:	0029      	movs	r1, r5
    41a6:	305c      	adds	r0, #92	; 0x5c
    41a8:	f7ff fbbf 	bl	392a <memset>
    41ac:	6365      	str	r5, [r4, #52]	; 0x34
    41ae:	63a5      	str	r5, [r4, #56]	; 0x38
    41b0:	64a5      	str	r5, [r4, #72]	; 0x48
    41b2:	64e5      	str	r5, [r4, #76]	; 0x4c
    41b4:	e7e6      	b.n	4184 <__sfp+0x48>
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	00005320 	.word	0x00005320

000041bc <_fwalk_reent>:
    41bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    41be:	0004      	movs	r4, r0
    41c0:	0007      	movs	r7, r0
    41c2:	2600      	movs	r6, #0
    41c4:	9101      	str	r1, [sp, #4]
    41c6:	3448      	adds	r4, #72	; 0x48
    41c8:	2c00      	cmp	r4, #0
    41ca:	d101      	bne.n	41d0 <_fwalk_reent+0x14>
    41cc:	0030      	movs	r0, r6
    41ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    41d0:	6863      	ldr	r3, [r4, #4]
    41d2:	68a5      	ldr	r5, [r4, #8]
    41d4:	9300      	str	r3, [sp, #0]
    41d6:	9b00      	ldr	r3, [sp, #0]
    41d8:	3b01      	subs	r3, #1
    41da:	9300      	str	r3, [sp, #0]
    41dc:	d501      	bpl.n	41e2 <_fwalk_reent+0x26>
    41de:	6824      	ldr	r4, [r4, #0]
    41e0:	e7f2      	b.n	41c8 <_fwalk_reent+0xc>
    41e2:	89ab      	ldrh	r3, [r5, #12]
    41e4:	2b01      	cmp	r3, #1
    41e6:	d908      	bls.n	41fa <_fwalk_reent+0x3e>
    41e8:	220e      	movs	r2, #14
    41ea:	5eab      	ldrsh	r3, [r5, r2]
    41ec:	3301      	adds	r3, #1
    41ee:	d004      	beq.n	41fa <_fwalk_reent+0x3e>
    41f0:	0029      	movs	r1, r5
    41f2:	0038      	movs	r0, r7
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	4798      	blx	r3
    41f8:	4306      	orrs	r6, r0
    41fa:	3568      	adds	r5, #104	; 0x68
    41fc:	e7eb      	b.n	41d6 <_fwalk_reent+0x1a>
	...

00004200 <__swhatbuf_r>:
    4200:	b570      	push	{r4, r5, r6, lr}
    4202:	000e      	movs	r6, r1
    4204:	001d      	movs	r5, r3
    4206:	230e      	movs	r3, #14
    4208:	5ec9      	ldrsh	r1, [r1, r3]
    420a:	b090      	sub	sp, #64	; 0x40
    420c:	0014      	movs	r4, r2
    420e:	2900      	cmp	r1, #0
    4210:	da07      	bge.n	4222 <__swhatbuf_r+0x22>
    4212:	2300      	movs	r3, #0
    4214:	602b      	str	r3, [r5, #0]
    4216:	89b3      	ldrh	r3, [r6, #12]
    4218:	061b      	lsls	r3, r3, #24
    421a:	d411      	bmi.n	4240 <__swhatbuf_r+0x40>
    421c:	2380      	movs	r3, #128	; 0x80
    421e:	00db      	lsls	r3, r3, #3
    4220:	e00f      	b.n	4242 <__swhatbuf_r+0x42>
    4222:	aa01      	add	r2, sp, #4
    4224:	f000 fbce 	bl	49c4 <_fstat_r>
    4228:	2800      	cmp	r0, #0
    422a:	dbf2      	blt.n	4212 <__swhatbuf_r+0x12>
    422c:	22f0      	movs	r2, #240	; 0xf0
    422e:	9b02      	ldr	r3, [sp, #8]
    4230:	0212      	lsls	r2, r2, #8
    4232:	4013      	ands	r3, r2
    4234:	4a05      	ldr	r2, [pc, #20]	; (424c <__swhatbuf_r+0x4c>)
    4236:	189b      	adds	r3, r3, r2
    4238:	425a      	negs	r2, r3
    423a:	4153      	adcs	r3, r2
    423c:	602b      	str	r3, [r5, #0]
    423e:	e7ed      	b.n	421c <__swhatbuf_r+0x1c>
    4240:	2340      	movs	r3, #64	; 0x40
    4242:	2000      	movs	r0, #0
    4244:	6023      	str	r3, [r4, #0]
    4246:	b010      	add	sp, #64	; 0x40
    4248:	bd70      	pop	{r4, r5, r6, pc}
    424a:	46c0      	nop			; (mov r8, r8)
    424c:	ffffe000 	.word	0xffffe000

00004250 <__smakebuf_r>:
    4250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4252:	2602      	movs	r6, #2
    4254:	898b      	ldrh	r3, [r1, #12]
    4256:	0005      	movs	r5, r0
    4258:	000c      	movs	r4, r1
    425a:	4233      	tst	r3, r6
    425c:	d006      	beq.n	426c <__smakebuf_r+0x1c>
    425e:	0023      	movs	r3, r4
    4260:	3347      	adds	r3, #71	; 0x47
    4262:	6023      	str	r3, [r4, #0]
    4264:	6123      	str	r3, [r4, #16]
    4266:	2301      	movs	r3, #1
    4268:	6163      	str	r3, [r4, #20]
    426a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    426c:	ab01      	add	r3, sp, #4
    426e:	466a      	mov	r2, sp
    4270:	f7ff ffc6 	bl	4200 <__swhatbuf_r>
    4274:	9900      	ldr	r1, [sp, #0]
    4276:	0007      	movs	r7, r0
    4278:	0028      	movs	r0, r5
    427a:	f7ff fba9 	bl	39d0 <_malloc_r>
    427e:	2800      	cmp	r0, #0
    4280:	d108      	bne.n	4294 <__smakebuf_r+0x44>
    4282:	220c      	movs	r2, #12
    4284:	5ea3      	ldrsh	r3, [r4, r2]
    4286:	059a      	lsls	r2, r3, #22
    4288:	d4ef      	bmi.n	426a <__smakebuf_r+0x1a>
    428a:	2203      	movs	r2, #3
    428c:	4393      	bics	r3, r2
    428e:	431e      	orrs	r6, r3
    4290:	81a6      	strh	r6, [r4, #12]
    4292:	e7e4      	b.n	425e <__smakebuf_r+0xe>
    4294:	4b0f      	ldr	r3, [pc, #60]	; (42d4 <__smakebuf_r+0x84>)
    4296:	62ab      	str	r3, [r5, #40]	; 0x28
    4298:	2380      	movs	r3, #128	; 0x80
    429a:	89a2      	ldrh	r2, [r4, #12]
    429c:	6020      	str	r0, [r4, #0]
    429e:	4313      	orrs	r3, r2
    42a0:	81a3      	strh	r3, [r4, #12]
    42a2:	9b00      	ldr	r3, [sp, #0]
    42a4:	6120      	str	r0, [r4, #16]
    42a6:	6163      	str	r3, [r4, #20]
    42a8:	9b01      	ldr	r3, [sp, #4]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d00d      	beq.n	42ca <__smakebuf_r+0x7a>
    42ae:	230e      	movs	r3, #14
    42b0:	5ee1      	ldrsh	r1, [r4, r3]
    42b2:	0028      	movs	r0, r5
    42b4:	f000 fb98 	bl	49e8 <_isatty_r>
    42b8:	2800      	cmp	r0, #0
    42ba:	d006      	beq.n	42ca <__smakebuf_r+0x7a>
    42bc:	2203      	movs	r2, #3
    42be:	89a3      	ldrh	r3, [r4, #12]
    42c0:	4393      	bics	r3, r2
    42c2:	001a      	movs	r2, r3
    42c4:	2301      	movs	r3, #1
    42c6:	4313      	orrs	r3, r2
    42c8:	81a3      	strh	r3, [r4, #12]
    42ca:	89a0      	ldrh	r0, [r4, #12]
    42cc:	4338      	orrs	r0, r7
    42ce:	81a0      	strh	r0, [r4, #12]
    42d0:	e7cb      	b.n	426a <__smakebuf_r+0x1a>
    42d2:	46c0      	nop			; (mov r8, r8)
    42d4:	00004051 	.word	0x00004051

000042d8 <__malloc_lock>:
    42d8:	4770      	bx	lr

000042da <__malloc_unlock>:
    42da:	4770      	bx	lr

000042dc <__sfputc_r>:
    42dc:	6893      	ldr	r3, [r2, #8]
    42de:	b510      	push	{r4, lr}
    42e0:	3b01      	subs	r3, #1
    42e2:	6093      	str	r3, [r2, #8]
    42e4:	2b00      	cmp	r3, #0
    42e6:	da05      	bge.n	42f4 <__sfputc_r+0x18>
    42e8:	6994      	ldr	r4, [r2, #24]
    42ea:	42a3      	cmp	r3, r4
    42ec:	db08      	blt.n	4300 <__sfputc_r+0x24>
    42ee:	b2cb      	uxtb	r3, r1
    42f0:	2b0a      	cmp	r3, #10
    42f2:	d005      	beq.n	4300 <__sfputc_r+0x24>
    42f4:	6813      	ldr	r3, [r2, #0]
    42f6:	1c58      	adds	r0, r3, #1
    42f8:	6010      	str	r0, [r2, #0]
    42fa:	7019      	strb	r1, [r3, #0]
    42fc:	b2c8      	uxtb	r0, r1
    42fe:	bd10      	pop	{r4, pc}
    4300:	f7ff fd24 	bl	3d4c <__swbuf_r>
    4304:	e7fb      	b.n	42fe <__sfputc_r+0x22>

00004306 <__sfputs_r>:
    4306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4308:	0006      	movs	r6, r0
    430a:	000f      	movs	r7, r1
    430c:	0014      	movs	r4, r2
    430e:	18d5      	adds	r5, r2, r3
    4310:	42ac      	cmp	r4, r5
    4312:	d101      	bne.n	4318 <__sfputs_r+0x12>
    4314:	2000      	movs	r0, #0
    4316:	e007      	b.n	4328 <__sfputs_r+0x22>
    4318:	7821      	ldrb	r1, [r4, #0]
    431a:	003a      	movs	r2, r7
    431c:	0030      	movs	r0, r6
    431e:	f7ff ffdd 	bl	42dc <__sfputc_r>
    4322:	3401      	adds	r4, #1
    4324:	1c43      	adds	r3, r0, #1
    4326:	d1f3      	bne.n	4310 <__sfputs_r+0xa>
    4328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000432c <_vfiprintf_r>:
    432c:	b5f0      	push	{r4, r5, r6, r7, lr}
    432e:	b09f      	sub	sp, #124	; 0x7c
    4330:	0006      	movs	r6, r0
    4332:	000f      	movs	r7, r1
    4334:	0014      	movs	r4, r2
    4336:	9305      	str	r3, [sp, #20]
    4338:	2800      	cmp	r0, #0
    433a:	d004      	beq.n	4346 <_vfiprintf_r+0x1a>
    433c:	6983      	ldr	r3, [r0, #24]
    433e:	2b00      	cmp	r3, #0
    4340:	d101      	bne.n	4346 <_vfiprintf_r+0x1a>
    4342:	f7ff fec7 	bl	40d4 <__sinit>
    4346:	4b7f      	ldr	r3, [pc, #508]	; (4544 <_vfiprintf_r+0x218>)
    4348:	429f      	cmp	r7, r3
    434a:	d15c      	bne.n	4406 <_vfiprintf_r+0xda>
    434c:	6877      	ldr	r7, [r6, #4]
    434e:	89bb      	ldrh	r3, [r7, #12]
    4350:	071b      	lsls	r3, r3, #28
    4352:	d562      	bpl.n	441a <_vfiprintf_r+0xee>
    4354:	693b      	ldr	r3, [r7, #16]
    4356:	2b00      	cmp	r3, #0
    4358:	d05f      	beq.n	441a <_vfiprintf_r+0xee>
    435a:	2300      	movs	r3, #0
    435c:	ad06      	add	r5, sp, #24
    435e:	616b      	str	r3, [r5, #20]
    4360:	3320      	adds	r3, #32
    4362:	766b      	strb	r3, [r5, #25]
    4364:	3310      	adds	r3, #16
    4366:	76ab      	strb	r3, [r5, #26]
    4368:	9402      	str	r4, [sp, #8]
    436a:	9c02      	ldr	r4, [sp, #8]
    436c:	7823      	ldrb	r3, [r4, #0]
    436e:	2b00      	cmp	r3, #0
    4370:	d15d      	bne.n	442e <_vfiprintf_r+0x102>
    4372:	9b02      	ldr	r3, [sp, #8]
    4374:	1ae3      	subs	r3, r4, r3
    4376:	9304      	str	r3, [sp, #16]
    4378:	d00d      	beq.n	4396 <_vfiprintf_r+0x6a>
    437a:	9b04      	ldr	r3, [sp, #16]
    437c:	9a02      	ldr	r2, [sp, #8]
    437e:	0039      	movs	r1, r7
    4380:	0030      	movs	r0, r6
    4382:	f7ff ffc0 	bl	4306 <__sfputs_r>
    4386:	1c43      	adds	r3, r0, #1
    4388:	d100      	bne.n	438c <_vfiprintf_r+0x60>
    438a:	e0cc      	b.n	4526 <_vfiprintf_r+0x1fa>
    438c:	696a      	ldr	r2, [r5, #20]
    438e:	9b04      	ldr	r3, [sp, #16]
    4390:	4694      	mov	ip, r2
    4392:	4463      	add	r3, ip
    4394:	616b      	str	r3, [r5, #20]
    4396:	7823      	ldrb	r3, [r4, #0]
    4398:	2b00      	cmp	r3, #0
    439a:	d100      	bne.n	439e <_vfiprintf_r+0x72>
    439c:	e0c3      	b.n	4526 <_vfiprintf_r+0x1fa>
    439e:	2201      	movs	r2, #1
    43a0:	2300      	movs	r3, #0
    43a2:	4252      	negs	r2, r2
    43a4:	606a      	str	r2, [r5, #4]
    43a6:	a902      	add	r1, sp, #8
    43a8:	3254      	adds	r2, #84	; 0x54
    43aa:	1852      	adds	r2, r2, r1
    43ac:	3401      	adds	r4, #1
    43ae:	602b      	str	r3, [r5, #0]
    43b0:	60eb      	str	r3, [r5, #12]
    43b2:	60ab      	str	r3, [r5, #8]
    43b4:	7013      	strb	r3, [r2, #0]
    43b6:	65ab      	str	r3, [r5, #88]	; 0x58
    43b8:	7821      	ldrb	r1, [r4, #0]
    43ba:	2205      	movs	r2, #5
    43bc:	4862      	ldr	r0, [pc, #392]	; (4548 <_vfiprintf_r+0x21c>)
    43be:	f000 fb39 	bl	4a34 <memchr>
    43c2:	1c63      	adds	r3, r4, #1
    43c4:	469c      	mov	ip, r3
    43c6:	2800      	cmp	r0, #0
    43c8:	d135      	bne.n	4436 <_vfiprintf_r+0x10a>
    43ca:	6829      	ldr	r1, [r5, #0]
    43cc:	06cb      	lsls	r3, r1, #27
    43ce:	d504      	bpl.n	43da <_vfiprintf_r+0xae>
    43d0:	2353      	movs	r3, #83	; 0x53
    43d2:	aa02      	add	r2, sp, #8
    43d4:	3020      	adds	r0, #32
    43d6:	189b      	adds	r3, r3, r2
    43d8:	7018      	strb	r0, [r3, #0]
    43da:	070b      	lsls	r3, r1, #28
    43dc:	d504      	bpl.n	43e8 <_vfiprintf_r+0xbc>
    43de:	2353      	movs	r3, #83	; 0x53
    43e0:	202b      	movs	r0, #43	; 0x2b
    43e2:	aa02      	add	r2, sp, #8
    43e4:	189b      	adds	r3, r3, r2
    43e6:	7018      	strb	r0, [r3, #0]
    43e8:	7823      	ldrb	r3, [r4, #0]
    43ea:	2b2a      	cmp	r3, #42	; 0x2a
    43ec:	d02c      	beq.n	4448 <_vfiprintf_r+0x11c>
    43ee:	2000      	movs	r0, #0
    43f0:	210a      	movs	r1, #10
    43f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43f4:	7822      	ldrb	r2, [r4, #0]
    43f6:	3a30      	subs	r2, #48	; 0x30
    43f8:	2a09      	cmp	r2, #9
    43fa:	d800      	bhi.n	43fe <_vfiprintf_r+0xd2>
    43fc:	e06b      	b.n	44d6 <_vfiprintf_r+0x1aa>
    43fe:	2800      	cmp	r0, #0
    4400:	d02a      	beq.n	4458 <_vfiprintf_r+0x12c>
    4402:	9309      	str	r3, [sp, #36]	; 0x24
    4404:	e028      	b.n	4458 <_vfiprintf_r+0x12c>
    4406:	4b51      	ldr	r3, [pc, #324]	; (454c <_vfiprintf_r+0x220>)
    4408:	429f      	cmp	r7, r3
    440a:	d101      	bne.n	4410 <_vfiprintf_r+0xe4>
    440c:	68b7      	ldr	r7, [r6, #8]
    440e:	e79e      	b.n	434e <_vfiprintf_r+0x22>
    4410:	4b4f      	ldr	r3, [pc, #316]	; (4550 <_vfiprintf_r+0x224>)
    4412:	429f      	cmp	r7, r3
    4414:	d19b      	bne.n	434e <_vfiprintf_r+0x22>
    4416:	68f7      	ldr	r7, [r6, #12]
    4418:	e799      	b.n	434e <_vfiprintf_r+0x22>
    441a:	0039      	movs	r1, r7
    441c:	0030      	movs	r0, r6
    441e:	f7ff fceb 	bl	3df8 <__swsetup_r>
    4422:	2800      	cmp	r0, #0
    4424:	d099      	beq.n	435a <_vfiprintf_r+0x2e>
    4426:	2001      	movs	r0, #1
    4428:	4240      	negs	r0, r0
    442a:	b01f      	add	sp, #124	; 0x7c
    442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    442e:	2b25      	cmp	r3, #37	; 0x25
    4430:	d09f      	beq.n	4372 <_vfiprintf_r+0x46>
    4432:	3401      	adds	r4, #1
    4434:	e79a      	b.n	436c <_vfiprintf_r+0x40>
    4436:	4b44      	ldr	r3, [pc, #272]	; (4548 <_vfiprintf_r+0x21c>)
    4438:	6829      	ldr	r1, [r5, #0]
    443a:	1ac0      	subs	r0, r0, r3
    443c:	2301      	movs	r3, #1
    443e:	4083      	lsls	r3, r0
    4440:	430b      	orrs	r3, r1
    4442:	602b      	str	r3, [r5, #0]
    4444:	4664      	mov	r4, ip
    4446:	e7b7      	b.n	43b8 <_vfiprintf_r+0x8c>
    4448:	9b05      	ldr	r3, [sp, #20]
    444a:	1d18      	adds	r0, r3, #4
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	9005      	str	r0, [sp, #20]
    4450:	2b00      	cmp	r3, #0
    4452:	db3a      	blt.n	44ca <_vfiprintf_r+0x19e>
    4454:	9309      	str	r3, [sp, #36]	; 0x24
    4456:	4664      	mov	r4, ip
    4458:	7823      	ldrb	r3, [r4, #0]
    445a:	2b2e      	cmp	r3, #46	; 0x2e
    445c:	d10b      	bne.n	4476 <_vfiprintf_r+0x14a>
    445e:	7863      	ldrb	r3, [r4, #1]
    4460:	1c62      	adds	r2, r4, #1
    4462:	2b2a      	cmp	r3, #42	; 0x2a
    4464:	d13f      	bne.n	44e6 <_vfiprintf_r+0x1ba>
    4466:	9b05      	ldr	r3, [sp, #20]
    4468:	3402      	adds	r4, #2
    446a:	1d1a      	adds	r2, r3, #4
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	9205      	str	r2, [sp, #20]
    4470:	2b00      	cmp	r3, #0
    4472:	db35      	blt.n	44e0 <_vfiprintf_r+0x1b4>
    4474:	9307      	str	r3, [sp, #28]
    4476:	7821      	ldrb	r1, [r4, #0]
    4478:	2203      	movs	r2, #3
    447a:	4836      	ldr	r0, [pc, #216]	; (4554 <_vfiprintf_r+0x228>)
    447c:	f000 fada 	bl	4a34 <memchr>
    4480:	2800      	cmp	r0, #0
    4482:	d007      	beq.n	4494 <_vfiprintf_r+0x168>
    4484:	4b33      	ldr	r3, [pc, #204]	; (4554 <_vfiprintf_r+0x228>)
    4486:	682a      	ldr	r2, [r5, #0]
    4488:	1ac0      	subs	r0, r0, r3
    448a:	2340      	movs	r3, #64	; 0x40
    448c:	4083      	lsls	r3, r0
    448e:	4313      	orrs	r3, r2
    4490:	602b      	str	r3, [r5, #0]
    4492:	3401      	adds	r4, #1
    4494:	7821      	ldrb	r1, [r4, #0]
    4496:	1c63      	adds	r3, r4, #1
    4498:	2206      	movs	r2, #6
    449a:	482f      	ldr	r0, [pc, #188]	; (4558 <_vfiprintf_r+0x22c>)
    449c:	9302      	str	r3, [sp, #8]
    449e:	7629      	strb	r1, [r5, #24]
    44a0:	f000 fac8 	bl	4a34 <memchr>
    44a4:	2800      	cmp	r0, #0
    44a6:	d044      	beq.n	4532 <_vfiprintf_r+0x206>
    44a8:	4b2c      	ldr	r3, [pc, #176]	; (455c <_vfiprintf_r+0x230>)
    44aa:	2b00      	cmp	r3, #0
    44ac:	d12f      	bne.n	450e <_vfiprintf_r+0x1e2>
    44ae:	6829      	ldr	r1, [r5, #0]
    44b0:	9b05      	ldr	r3, [sp, #20]
    44b2:	2207      	movs	r2, #7
    44b4:	05c9      	lsls	r1, r1, #23
    44b6:	d528      	bpl.n	450a <_vfiprintf_r+0x1de>
    44b8:	189b      	adds	r3, r3, r2
    44ba:	4393      	bics	r3, r2
    44bc:	3308      	adds	r3, #8
    44be:	9305      	str	r3, [sp, #20]
    44c0:	696b      	ldr	r3, [r5, #20]
    44c2:	9a03      	ldr	r2, [sp, #12]
    44c4:	189b      	adds	r3, r3, r2
    44c6:	616b      	str	r3, [r5, #20]
    44c8:	e74f      	b.n	436a <_vfiprintf_r+0x3e>
    44ca:	425b      	negs	r3, r3
    44cc:	60eb      	str	r3, [r5, #12]
    44ce:	2302      	movs	r3, #2
    44d0:	430b      	orrs	r3, r1
    44d2:	602b      	str	r3, [r5, #0]
    44d4:	e7bf      	b.n	4456 <_vfiprintf_r+0x12a>
    44d6:	434b      	muls	r3, r1
    44d8:	3401      	adds	r4, #1
    44da:	189b      	adds	r3, r3, r2
    44dc:	2001      	movs	r0, #1
    44de:	e789      	b.n	43f4 <_vfiprintf_r+0xc8>
    44e0:	2301      	movs	r3, #1
    44e2:	425b      	negs	r3, r3
    44e4:	e7c6      	b.n	4474 <_vfiprintf_r+0x148>
    44e6:	2300      	movs	r3, #0
    44e8:	0014      	movs	r4, r2
    44ea:	200a      	movs	r0, #10
    44ec:	001a      	movs	r2, r3
    44ee:	606b      	str	r3, [r5, #4]
    44f0:	7821      	ldrb	r1, [r4, #0]
    44f2:	3930      	subs	r1, #48	; 0x30
    44f4:	2909      	cmp	r1, #9
    44f6:	d903      	bls.n	4500 <_vfiprintf_r+0x1d4>
    44f8:	2b00      	cmp	r3, #0
    44fa:	d0bc      	beq.n	4476 <_vfiprintf_r+0x14a>
    44fc:	9207      	str	r2, [sp, #28]
    44fe:	e7ba      	b.n	4476 <_vfiprintf_r+0x14a>
    4500:	4342      	muls	r2, r0
    4502:	3401      	adds	r4, #1
    4504:	1852      	adds	r2, r2, r1
    4506:	2301      	movs	r3, #1
    4508:	e7f2      	b.n	44f0 <_vfiprintf_r+0x1c4>
    450a:	3307      	adds	r3, #7
    450c:	e7d5      	b.n	44ba <_vfiprintf_r+0x18e>
    450e:	ab05      	add	r3, sp, #20
    4510:	9300      	str	r3, [sp, #0]
    4512:	003a      	movs	r2, r7
    4514:	4b12      	ldr	r3, [pc, #72]	; (4560 <_vfiprintf_r+0x234>)
    4516:	0029      	movs	r1, r5
    4518:	0030      	movs	r0, r6
    451a:	e000      	b.n	451e <_vfiprintf_r+0x1f2>
    451c:	bf00      	nop
    451e:	9003      	str	r0, [sp, #12]
    4520:	9b03      	ldr	r3, [sp, #12]
    4522:	3301      	adds	r3, #1
    4524:	d1cc      	bne.n	44c0 <_vfiprintf_r+0x194>
    4526:	89bb      	ldrh	r3, [r7, #12]
    4528:	065b      	lsls	r3, r3, #25
    452a:	d500      	bpl.n	452e <_vfiprintf_r+0x202>
    452c:	e77b      	b.n	4426 <_vfiprintf_r+0xfa>
    452e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4530:	e77b      	b.n	442a <_vfiprintf_r+0xfe>
    4532:	ab05      	add	r3, sp, #20
    4534:	9300      	str	r3, [sp, #0]
    4536:	003a      	movs	r2, r7
    4538:	4b09      	ldr	r3, [pc, #36]	; (4560 <_vfiprintf_r+0x234>)
    453a:	0029      	movs	r1, r5
    453c:	0030      	movs	r0, r6
    453e:	f000 f87f 	bl	4640 <_printf_i>
    4542:	e7ec      	b.n	451e <_vfiprintf_r+0x1f2>
    4544:	00005344 	.word	0x00005344
    4548:	00005384 	.word	0x00005384
    454c:	00005364 	.word	0x00005364
    4550:	00005324 	.word	0x00005324
    4554:	0000538a 	.word	0x0000538a
    4558:	0000538e 	.word	0x0000538e
    455c:	00000000 	.word	0x00000000
    4560:	00004307 	.word	0x00004307

00004564 <_printf_common>:
    4564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4566:	0015      	movs	r5, r2
    4568:	9301      	str	r3, [sp, #4]
    456a:	688a      	ldr	r2, [r1, #8]
    456c:	690b      	ldr	r3, [r1, #16]
    456e:	9000      	str	r0, [sp, #0]
    4570:	000c      	movs	r4, r1
    4572:	4293      	cmp	r3, r2
    4574:	da00      	bge.n	4578 <_printf_common+0x14>
    4576:	0013      	movs	r3, r2
    4578:	0022      	movs	r2, r4
    457a:	602b      	str	r3, [r5, #0]
    457c:	3243      	adds	r2, #67	; 0x43
    457e:	7812      	ldrb	r2, [r2, #0]
    4580:	2a00      	cmp	r2, #0
    4582:	d001      	beq.n	4588 <_printf_common+0x24>
    4584:	3301      	adds	r3, #1
    4586:	602b      	str	r3, [r5, #0]
    4588:	6823      	ldr	r3, [r4, #0]
    458a:	069b      	lsls	r3, r3, #26
    458c:	d502      	bpl.n	4594 <_printf_common+0x30>
    458e:	682b      	ldr	r3, [r5, #0]
    4590:	3302      	adds	r3, #2
    4592:	602b      	str	r3, [r5, #0]
    4594:	2706      	movs	r7, #6
    4596:	6823      	ldr	r3, [r4, #0]
    4598:	401f      	ands	r7, r3
    459a:	d027      	beq.n	45ec <_printf_common+0x88>
    459c:	0023      	movs	r3, r4
    459e:	3343      	adds	r3, #67	; 0x43
    45a0:	781b      	ldrb	r3, [r3, #0]
    45a2:	1e5a      	subs	r2, r3, #1
    45a4:	4193      	sbcs	r3, r2
    45a6:	6822      	ldr	r2, [r4, #0]
    45a8:	0692      	lsls	r2, r2, #26
    45aa:	d430      	bmi.n	460e <_printf_common+0xaa>
    45ac:	0022      	movs	r2, r4
    45ae:	9901      	ldr	r1, [sp, #4]
    45b0:	3243      	adds	r2, #67	; 0x43
    45b2:	9800      	ldr	r0, [sp, #0]
    45b4:	9e08      	ldr	r6, [sp, #32]
    45b6:	47b0      	blx	r6
    45b8:	1c43      	adds	r3, r0, #1
    45ba:	d025      	beq.n	4608 <_printf_common+0xa4>
    45bc:	2306      	movs	r3, #6
    45be:	6820      	ldr	r0, [r4, #0]
    45c0:	682a      	ldr	r2, [r5, #0]
    45c2:	68e1      	ldr	r1, [r4, #12]
    45c4:	4003      	ands	r3, r0
    45c6:	2500      	movs	r5, #0
    45c8:	2b04      	cmp	r3, #4
    45ca:	d103      	bne.n	45d4 <_printf_common+0x70>
    45cc:	1a8d      	subs	r5, r1, r2
    45ce:	43eb      	mvns	r3, r5
    45d0:	17db      	asrs	r3, r3, #31
    45d2:	401d      	ands	r5, r3
    45d4:	68a3      	ldr	r3, [r4, #8]
    45d6:	6922      	ldr	r2, [r4, #16]
    45d8:	4293      	cmp	r3, r2
    45da:	dd01      	ble.n	45e0 <_printf_common+0x7c>
    45dc:	1a9b      	subs	r3, r3, r2
    45de:	18ed      	adds	r5, r5, r3
    45e0:	2700      	movs	r7, #0
    45e2:	42bd      	cmp	r5, r7
    45e4:	d120      	bne.n	4628 <_printf_common+0xc4>
    45e6:	2000      	movs	r0, #0
    45e8:	e010      	b.n	460c <_printf_common+0xa8>
    45ea:	3701      	adds	r7, #1
    45ec:	68e3      	ldr	r3, [r4, #12]
    45ee:	682a      	ldr	r2, [r5, #0]
    45f0:	1a9b      	subs	r3, r3, r2
    45f2:	429f      	cmp	r7, r3
    45f4:	dad2      	bge.n	459c <_printf_common+0x38>
    45f6:	0022      	movs	r2, r4
    45f8:	2301      	movs	r3, #1
    45fa:	3219      	adds	r2, #25
    45fc:	9901      	ldr	r1, [sp, #4]
    45fe:	9800      	ldr	r0, [sp, #0]
    4600:	9e08      	ldr	r6, [sp, #32]
    4602:	47b0      	blx	r6
    4604:	1c43      	adds	r3, r0, #1
    4606:	d1f0      	bne.n	45ea <_printf_common+0x86>
    4608:	2001      	movs	r0, #1
    460a:	4240      	negs	r0, r0
    460c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    460e:	2030      	movs	r0, #48	; 0x30
    4610:	18e1      	adds	r1, r4, r3
    4612:	3143      	adds	r1, #67	; 0x43
    4614:	7008      	strb	r0, [r1, #0]
    4616:	0021      	movs	r1, r4
    4618:	1c5a      	adds	r2, r3, #1
    461a:	3145      	adds	r1, #69	; 0x45
    461c:	7809      	ldrb	r1, [r1, #0]
    461e:	18a2      	adds	r2, r4, r2
    4620:	3243      	adds	r2, #67	; 0x43
    4622:	3302      	adds	r3, #2
    4624:	7011      	strb	r1, [r2, #0]
    4626:	e7c1      	b.n	45ac <_printf_common+0x48>
    4628:	0022      	movs	r2, r4
    462a:	2301      	movs	r3, #1
    462c:	321a      	adds	r2, #26
    462e:	9901      	ldr	r1, [sp, #4]
    4630:	9800      	ldr	r0, [sp, #0]
    4632:	9e08      	ldr	r6, [sp, #32]
    4634:	47b0      	blx	r6
    4636:	1c43      	adds	r3, r0, #1
    4638:	d0e6      	beq.n	4608 <_printf_common+0xa4>
    463a:	3701      	adds	r7, #1
    463c:	e7d1      	b.n	45e2 <_printf_common+0x7e>
	...

00004640 <_printf_i>:
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
    4642:	b08b      	sub	sp, #44	; 0x2c
    4644:	9206      	str	r2, [sp, #24]
    4646:	000a      	movs	r2, r1
    4648:	3243      	adds	r2, #67	; 0x43
    464a:	9307      	str	r3, [sp, #28]
    464c:	9005      	str	r0, [sp, #20]
    464e:	9204      	str	r2, [sp, #16]
    4650:	7e0a      	ldrb	r2, [r1, #24]
    4652:	000c      	movs	r4, r1
    4654:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4656:	2a6e      	cmp	r2, #110	; 0x6e
    4658:	d100      	bne.n	465c <_printf_i+0x1c>
    465a:	e08f      	b.n	477c <_printf_i+0x13c>
    465c:	d817      	bhi.n	468e <_printf_i+0x4e>
    465e:	2a63      	cmp	r2, #99	; 0x63
    4660:	d02c      	beq.n	46bc <_printf_i+0x7c>
    4662:	d808      	bhi.n	4676 <_printf_i+0x36>
    4664:	2a00      	cmp	r2, #0
    4666:	d100      	bne.n	466a <_printf_i+0x2a>
    4668:	e099      	b.n	479e <_printf_i+0x15e>
    466a:	2a58      	cmp	r2, #88	; 0x58
    466c:	d054      	beq.n	4718 <_printf_i+0xd8>
    466e:	0026      	movs	r6, r4
    4670:	3642      	adds	r6, #66	; 0x42
    4672:	7032      	strb	r2, [r6, #0]
    4674:	e029      	b.n	46ca <_printf_i+0x8a>
    4676:	2a64      	cmp	r2, #100	; 0x64
    4678:	d001      	beq.n	467e <_printf_i+0x3e>
    467a:	2a69      	cmp	r2, #105	; 0x69
    467c:	d1f7      	bne.n	466e <_printf_i+0x2e>
    467e:	6821      	ldr	r1, [r4, #0]
    4680:	681a      	ldr	r2, [r3, #0]
    4682:	0608      	lsls	r0, r1, #24
    4684:	d523      	bpl.n	46ce <_printf_i+0x8e>
    4686:	1d11      	adds	r1, r2, #4
    4688:	6019      	str	r1, [r3, #0]
    468a:	6815      	ldr	r5, [r2, #0]
    468c:	e025      	b.n	46da <_printf_i+0x9a>
    468e:	2a73      	cmp	r2, #115	; 0x73
    4690:	d100      	bne.n	4694 <_printf_i+0x54>
    4692:	e088      	b.n	47a6 <_printf_i+0x166>
    4694:	d808      	bhi.n	46a8 <_printf_i+0x68>
    4696:	2a6f      	cmp	r2, #111	; 0x6f
    4698:	d029      	beq.n	46ee <_printf_i+0xae>
    469a:	2a70      	cmp	r2, #112	; 0x70
    469c:	d1e7      	bne.n	466e <_printf_i+0x2e>
    469e:	2220      	movs	r2, #32
    46a0:	6809      	ldr	r1, [r1, #0]
    46a2:	430a      	orrs	r2, r1
    46a4:	6022      	str	r2, [r4, #0]
    46a6:	e003      	b.n	46b0 <_printf_i+0x70>
    46a8:	2a75      	cmp	r2, #117	; 0x75
    46aa:	d020      	beq.n	46ee <_printf_i+0xae>
    46ac:	2a78      	cmp	r2, #120	; 0x78
    46ae:	d1de      	bne.n	466e <_printf_i+0x2e>
    46b0:	0022      	movs	r2, r4
    46b2:	2178      	movs	r1, #120	; 0x78
    46b4:	3245      	adds	r2, #69	; 0x45
    46b6:	7011      	strb	r1, [r2, #0]
    46b8:	4a6c      	ldr	r2, [pc, #432]	; (486c <_printf_i+0x22c>)
    46ba:	e030      	b.n	471e <_printf_i+0xde>
    46bc:	000e      	movs	r6, r1
    46be:	681a      	ldr	r2, [r3, #0]
    46c0:	3642      	adds	r6, #66	; 0x42
    46c2:	1d11      	adds	r1, r2, #4
    46c4:	6019      	str	r1, [r3, #0]
    46c6:	6813      	ldr	r3, [r2, #0]
    46c8:	7033      	strb	r3, [r6, #0]
    46ca:	2301      	movs	r3, #1
    46cc:	e079      	b.n	47c2 <_printf_i+0x182>
    46ce:	0649      	lsls	r1, r1, #25
    46d0:	d5d9      	bpl.n	4686 <_printf_i+0x46>
    46d2:	1d11      	adds	r1, r2, #4
    46d4:	6019      	str	r1, [r3, #0]
    46d6:	2300      	movs	r3, #0
    46d8:	5ed5      	ldrsh	r5, [r2, r3]
    46da:	2d00      	cmp	r5, #0
    46dc:	da03      	bge.n	46e6 <_printf_i+0xa6>
    46de:	232d      	movs	r3, #45	; 0x2d
    46e0:	9a04      	ldr	r2, [sp, #16]
    46e2:	426d      	negs	r5, r5
    46e4:	7013      	strb	r3, [r2, #0]
    46e6:	4b62      	ldr	r3, [pc, #392]	; (4870 <_printf_i+0x230>)
    46e8:	270a      	movs	r7, #10
    46ea:	9303      	str	r3, [sp, #12]
    46ec:	e02f      	b.n	474e <_printf_i+0x10e>
    46ee:	6820      	ldr	r0, [r4, #0]
    46f0:	6819      	ldr	r1, [r3, #0]
    46f2:	0605      	lsls	r5, r0, #24
    46f4:	d503      	bpl.n	46fe <_printf_i+0xbe>
    46f6:	1d08      	adds	r0, r1, #4
    46f8:	6018      	str	r0, [r3, #0]
    46fa:	680d      	ldr	r5, [r1, #0]
    46fc:	e005      	b.n	470a <_printf_i+0xca>
    46fe:	0640      	lsls	r0, r0, #25
    4700:	d5f9      	bpl.n	46f6 <_printf_i+0xb6>
    4702:	680d      	ldr	r5, [r1, #0]
    4704:	1d08      	adds	r0, r1, #4
    4706:	6018      	str	r0, [r3, #0]
    4708:	b2ad      	uxth	r5, r5
    470a:	4b59      	ldr	r3, [pc, #356]	; (4870 <_printf_i+0x230>)
    470c:	2708      	movs	r7, #8
    470e:	9303      	str	r3, [sp, #12]
    4710:	2a6f      	cmp	r2, #111	; 0x6f
    4712:	d018      	beq.n	4746 <_printf_i+0x106>
    4714:	270a      	movs	r7, #10
    4716:	e016      	b.n	4746 <_printf_i+0x106>
    4718:	3145      	adds	r1, #69	; 0x45
    471a:	700a      	strb	r2, [r1, #0]
    471c:	4a54      	ldr	r2, [pc, #336]	; (4870 <_printf_i+0x230>)
    471e:	9203      	str	r2, [sp, #12]
    4720:	681a      	ldr	r2, [r3, #0]
    4722:	6821      	ldr	r1, [r4, #0]
    4724:	1d10      	adds	r0, r2, #4
    4726:	6018      	str	r0, [r3, #0]
    4728:	6815      	ldr	r5, [r2, #0]
    472a:	0608      	lsls	r0, r1, #24
    472c:	d522      	bpl.n	4774 <_printf_i+0x134>
    472e:	07cb      	lsls	r3, r1, #31
    4730:	d502      	bpl.n	4738 <_printf_i+0xf8>
    4732:	2320      	movs	r3, #32
    4734:	4319      	orrs	r1, r3
    4736:	6021      	str	r1, [r4, #0]
    4738:	2710      	movs	r7, #16
    473a:	2d00      	cmp	r5, #0
    473c:	d103      	bne.n	4746 <_printf_i+0x106>
    473e:	2320      	movs	r3, #32
    4740:	6822      	ldr	r2, [r4, #0]
    4742:	439a      	bics	r2, r3
    4744:	6022      	str	r2, [r4, #0]
    4746:	0023      	movs	r3, r4
    4748:	2200      	movs	r2, #0
    474a:	3343      	adds	r3, #67	; 0x43
    474c:	701a      	strb	r2, [r3, #0]
    474e:	6863      	ldr	r3, [r4, #4]
    4750:	60a3      	str	r3, [r4, #8]
    4752:	2b00      	cmp	r3, #0
    4754:	db5c      	blt.n	4810 <_printf_i+0x1d0>
    4756:	2204      	movs	r2, #4
    4758:	6821      	ldr	r1, [r4, #0]
    475a:	4391      	bics	r1, r2
    475c:	6021      	str	r1, [r4, #0]
    475e:	2d00      	cmp	r5, #0
    4760:	d158      	bne.n	4814 <_printf_i+0x1d4>
    4762:	9e04      	ldr	r6, [sp, #16]
    4764:	2b00      	cmp	r3, #0
    4766:	d064      	beq.n	4832 <_printf_i+0x1f2>
    4768:	0026      	movs	r6, r4
    476a:	9b03      	ldr	r3, [sp, #12]
    476c:	3642      	adds	r6, #66	; 0x42
    476e:	781b      	ldrb	r3, [r3, #0]
    4770:	7033      	strb	r3, [r6, #0]
    4772:	e05e      	b.n	4832 <_printf_i+0x1f2>
    4774:	0648      	lsls	r0, r1, #25
    4776:	d5da      	bpl.n	472e <_printf_i+0xee>
    4778:	b2ad      	uxth	r5, r5
    477a:	e7d8      	b.n	472e <_printf_i+0xee>
    477c:	6809      	ldr	r1, [r1, #0]
    477e:	681a      	ldr	r2, [r3, #0]
    4780:	0608      	lsls	r0, r1, #24
    4782:	d505      	bpl.n	4790 <_printf_i+0x150>
    4784:	1d11      	adds	r1, r2, #4
    4786:	6019      	str	r1, [r3, #0]
    4788:	6813      	ldr	r3, [r2, #0]
    478a:	6962      	ldr	r2, [r4, #20]
    478c:	601a      	str	r2, [r3, #0]
    478e:	e006      	b.n	479e <_printf_i+0x15e>
    4790:	0649      	lsls	r1, r1, #25
    4792:	d5f7      	bpl.n	4784 <_printf_i+0x144>
    4794:	1d11      	adds	r1, r2, #4
    4796:	6019      	str	r1, [r3, #0]
    4798:	6813      	ldr	r3, [r2, #0]
    479a:	8aa2      	ldrh	r2, [r4, #20]
    479c:	801a      	strh	r2, [r3, #0]
    479e:	2300      	movs	r3, #0
    47a0:	9e04      	ldr	r6, [sp, #16]
    47a2:	6123      	str	r3, [r4, #16]
    47a4:	e054      	b.n	4850 <_printf_i+0x210>
    47a6:	681a      	ldr	r2, [r3, #0]
    47a8:	1d11      	adds	r1, r2, #4
    47aa:	6019      	str	r1, [r3, #0]
    47ac:	6816      	ldr	r6, [r2, #0]
    47ae:	2100      	movs	r1, #0
    47b0:	6862      	ldr	r2, [r4, #4]
    47b2:	0030      	movs	r0, r6
    47b4:	f000 f93e 	bl	4a34 <memchr>
    47b8:	2800      	cmp	r0, #0
    47ba:	d001      	beq.n	47c0 <_printf_i+0x180>
    47bc:	1b80      	subs	r0, r0, r6
    47be:	6060      	str	r0, [r4, #4]
    47c0:	6863      	ldr	r3, [r4, #4]
    47c2:	6123      	str	r3, [r4, #16]
    47c4:	2300      	movs	r3, #0
    47c6:	9a04      	ldr	r2, [sp, #16]
    47c8:	7013      	strb	r3, [r2, #0]
    47ca:	e041      	b.n	4850 <_printf_i+0x210>
    47cc:	6923      	ldr	r3, [r4, #16]
    47ce:	0032      	movs	r2, r6
    47d0:	9906      	ldr	r1, [sp, #24]
    47d2:	9805      	ldr	r0, [sp, #20]
    47d4:	9d07      	ldr	r5, [sp, #28]
    47d6:	47a8      	blx	r5
    47d8:	1c43      	adds	r3, r0, #1
    47da:	d043      	beq.n	4864 <_printf_i+0x224>
    47dc:	6823      	ldr	r3, [r4, #0]
    47de:	2500      	movs	r5, #0
    47e0:	079b      	lsls	r3, r3, #30
    47e2:	d40f      	bmi.n	4804 <_printf_i+0x1c4>
    47e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47e6:	68e0      	ldr	r0, [r4, #12]
    47e8:	4298      	cmp	r0, r3
    47ea:	da3d      	bge.n	4868 <_printf_i+0x228>
    47ec:	0018      	movs	r0, r3
    47ee:	e03b      	b.n	4868 <_printf_i+0x228>
    47f0:	0022      	movs	r2, r4
    47f2:	2301      	movs	r3, #1
    47f4:	3219      	adds	r2, #25
    47f6:	9906      	ldr	r1, [sp, #24]
    47f8:	9805      	ldr	r0, [sp, #20]
    47fa:	9e07      	ldr	r6, [sp, #28]
    47fc:	47b0      	blx	r6
    47fe:	1c43      	adds	r3, r0, #1
    4800:	d030      	beq.n	4864 <_printf_i+0x224>
    4802:	3501      	adds	r5, #1
    4804:	68e3      	ldr	r3, [r4, #12]
    4806:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4808:	1a9b      	subs	r3, r3, r2
    480a:	429d      	cmp	r5, r3
    480c:	dbf0      	blt.n	47f0 <_printf_i+0x1b0>
    480e:	e7e9      	b.n	47e4 <_printf_i+0x1a4>
    4810:	2d00      	cmp	r5, #0
    4812:	d0a9      	beq.n	4768 <_printf_i+0x128>
    4814:	9e04      	ldr	r6, [sp, #16]
    4816:	0028      	movs	r0, r5
    4818:	0039      	movs	r1, r7
    481a:	f7ff f81f 	bl	385c <__aeabi_uidivmod>
    481e:	9b03      	ldr	r3, [sp, #12]
    4820:	3e01      	subs	r6, #1
    4822:	5c5b      	ldrb	r3, [r3, r1]
    4824:	0028      	movs	r0, r5
    4826:	7033      	strb	r3, [r6, #0]
    4828:	0039      	movs	r1, r7
    482a:	f7fe ff91 	bl	3750 <__udivsi3>
    482e:	1e05      	subs	r5, r0, #0
    4830:	d1f1      	bne.n	4816 <_printf_i+0x1d6>
    4832:	2f08      	cmp	r7, #8
    4834:	d109      	bne.n	484a <_printf_i+0x20a>
    4836:	6823      	ldr	r3, [r4, #0]
    4838:	07db      	lsls	r3, r3, #31
    483a:	d506      	bpl.n	484a <_printf_i+0x20a>
    483c:	6863      	ldr	r3, [r4, #4]
    483e:	6922      	ldr	r2, [r4, #16]
    4840:	4293      	cmp	r3, r2
    4842:	dc02      	bgt.n	484a <_printf_i+0x20a>
    4844:	2330      	movs	r3, #48	; 0x30
    4846:	3e01      	subs	r6, #1
    4848:	7033      	strb	r3, [r6, #0]
    484a:	9b04      	ldr	r3, [sp, #16]
    484c:	1b9b      	subs	r3, r3, r6
    484e:	6123      	str	r3, [r4, #16]
    4850:	9b07      	ldr	r3, [sp, #28]
    4852:	aa09      	add	r2, sp, #36	; 0x24
    4854:	9300      	str	r3, [sp, #0]
    4856:	0021      	movs	r1, r4
    4858:	9b06      	ldr	r3, [sp, #24]
    485a:	9805      	ldr	r0, [sp, #20]
    485c:	f7ff fe82 	bl	4564 <_printf_common>
    4860:	1c43      	adds	r3, r0, #1
    4862:	d1b3      	bne.n	47cc <_printf_i+0x18c>
    4864:	2001      	movs	r0, #1
    4866:	4240      	negs	r0, r0
    4868:	b00b      	add	sp, #44	; 0x2c
    486a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    486c:	000053a6 	.word	0x000053a6
    4870:	00005395 	.word	0x00005395

00004874 <_putc_r>:
    4874:	b570      	push	{r4, r5, r6, lr}
    4876:	0006      	movs	r6, r0
    4878:	000d      	movs	r5, r1
    487a:	0014      	movs	r4, r2
    487c:	2800      	cmp	r0, #0
    487e:	d004      	beq.n	488a <_putc_r+0x16>
    4880:	6983      	ldr	r3, [r0, #24]
    4882:	2b00      	cmp	r3, #0
    4884:	d101      	bne.n	488a <_putc_r+0x16>
    4886:	f7ff fc25 	bl	40d4 <__sinit>
    488a:	4b12      	ldr	r3, [pc, #72]	; (48d4 <_putc_r+0x60>)
    488c:	429c      	cmp	r4, r3
    488e:	d111      	bne.n	48b4 <_putc_r+0x40>
    4890:	6874      	ldr	r4, [r6, #4]
    4892:	68a3      	ldr	r3, [r4, #8]
    4894:	3b01      	subs	r3, #1
    4896:	60a3      	str	r3, [r4, #8]
    4898:	2b00      	cmp	r3, #0
    489a:	da05      	bge.n	48a8 <_putc_r+0x34>
    489c:	69a2      	ldr	r2, [r4, #24]
    489e:	4293      	cmp	r3, r2
    48a0:	db12      	blt.n	48c8 <_putc_r+0x54>
    48a2:	b2eb      	uxtb	r3, r5
    48a4:	2b0a      	cmp	r3, #10
    48a6:	d00f      	beq.n	48c8 <_putc_r+0x54>
    48a8:	6823      	ldr	r3, [r4, #0]
    48aa:	b2e8      	uxtb	r0, r5
    48ac:	1c5a      	adds	r2, r3, #1
    48ae:	6022      	str	r2, [r4, #0]
    48b0:	701d      	strb	r5, [r3, #0]
    48b2:	bd70      	pop	{r4, r5, r6, pc}
    48b4:	4b08      	ldr	r3, [pc, #32]	; (48d8 <_putc_r+0x64>)
    48b6:	429c      	cmp	r4, r3
    48b8:	d101      	bne.n	48be <_putc_r+0x4a>
    48ba:	68b4      	ldr	r4, [r6, #8]
    48bc:	e7e9      	b.n	4892 <_putc_r+0x1e>
    48be:	4b07      	ldr	r3, [pc, #28]	; (48dc <_putc_r+0x68>)
    48c0:	429c      	cmp	r4, r3
    48c2:	d1e6      	bne.n	4892 <_putc_r+0x1e>
    48c4:	68f4      	ldr	r4, [r6, #12]
    48c6:	e7e4      	b.n	4892 <_putc_r+0x1e>
    48c8:	0022      	movs	r2, r4
    48ca:	0029      	movs	r1, r5
    48cc:	0030      	movs	r0, r6
    48ce:	f7ff fa3d 	bl	3d4c <__swbuf_r>
    48d2:	e7ee      	b.n	48b2 <_putc_r+0x3e>
    48d4:	00005344 	.word	0x00005344
    48d8:	00005364 	.word	0x00005364
    48dc:	00005324 	.word	0x00005324

000048e0 <__sread>:
    48e0:	b570      	push	{r4, r5, r6, lr}
    48e2:	000c      	movs	r4, r1
    48e4:	250e      	movs	r5, #14
    48e6:	5f49      	ldrsh	r1, [r1, r5]
    48e8:	f000 f8b0 	bl	4a4c <_read_r>
    48ec:	2800      	cmp	r0, #0
    48ee:	db03      	blt.n	48f8 <__sread+0x18>
    48f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    48f2:	181b      	adds	r3, r3, r0
    48f4:	6563      	str	r3, [r4, #84]	; 0x54
    48f6:	bd70      	pop	{r4, r5, r6, pc}
    48f8:	89a3      	ldrh	r3, [r4, #12]
    48fa:	4a02      	ldr	r2, [pc, #8]	; (4904 <__sread+0x24>)
    48fc:	4013      	ands	r3, r2
    48fe:	81a3      	strh	r3, [r4, #12]
    4900:	e7f9      	b.n	48f6 <__sread+0x16>
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	ffffefff 	.word	0xffffefff

00004908 <__swrite>:
    4908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    490a:	001f      	movs	r7, r3
    490c:	898b      	ldrh	r3, [r1, #12]
    490e:	0005      	movs	r5, r0
    4910:	000c      	movs	r4, r1
    4912:	0016      	movs	r6, r2
    4914:	05db      	lsls	r3, r3, #23
    4916:	d505      	bpl.n	4924 <__swrite+0x1c>
    4918:	230e      	movs	r3, #14
    491a:	5ec9      	ldrsh	r1, [r1, r3]
    491c:	2200      	movs	r2, #0
    491e:	2302      	movs	r3, #2
    4920:	f000 f874 	bl	4a0c <_lseek_r>
    4924:	89a3      	ldrh	r3, [r4, #12]
    4926:	4a05      	ldr	r2, [pc, #20]	; (493c <__swrite+0x34>)
    4928:	0028      	movs	r0, r5
    492a:	4013      	ands	r3, r2
    492c:	81a3      	strh	r3, [r4, #12]
    492e:	0032      	movs	r2, r6
    4930:	230e      	movs	r3, #14
    4932:	5ee1      	ldrsh	r1, [r4, r3]
    4934:	003b      	movs	r3, r7
    4936:	f000 f81f 	bl	4978 <_write_r>
    493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    493c:	ffffefff 	.word	0xffffefff

00004940 <__sseek>:
    4940:	b570      	push	{r4, r5, r6, lr}
    4942:	000c      	movs	r4, r1
    4944:	250e      	movs	r5, #14
    4946:	5f49      	ldrsh	r1, [r1, r5]
    4948:	f000 f860 	bl	4a0c <_lseek_r>
    494c:	89a3      	ldrh	r3, [r4, #12]
    494e:	1c42      	adds	r2, r0, #1
    4950:	d103      	bne.n	495a <__sseek+0x1a>
    4952:	4a05      	ldr	r2, [pc, #20]	; (4968 <__sseek+0x28>)
    4954:	4013      	ands	r3, r2
    4956:	81a3      	strh	r3, [r4, #12]
    4958:	bd70      	pop	{r4, r5, r6, pc}
    495a:	2280      	movs	r2, #128	; 0x80
    495c:	0152      	lsls	r2, r2, #5
    495e:	4313      	orrs	r3, r2
    4960:	81a3      	strh	r3, [r4, #12]
    4962:	6560      	str	r0, [r4, #84]	; 0x54
    4964:	e7f8      	b.n	4958 <__sseek+0x18>
    4966:	46c0      	nop			; (mov r8, r8)
    4968:	ffffefff 	.word	0xffffefff

0000496c <__sclose>:
    496c:	b510      	push	{r4, lr}
    496e:	230e      	movs	r3, #14
    4970:	5ec9      	ldrsh	r1, [r1, r3]
    4972:	f000 f815 	bl	49a0 <_close_r>
    4976:	bd10      	pop	{r4, pc}

00004978 <_write_r>:
    4978:	b570      	push	{r4, r5, r6, lr}
    497a:	0005      	movs	r5, r0
    497c:	0008      	movs	r0, r1
    497e:	0011      	movs	r1, r2
    4980:	2200      	movs	r2, #0
    4982:	4c06      	ldr	r4, [pc, #24]	; (499c <_write_r+0x24>)
    4984:	6022      	str	r2, [r4, #0]
    4986:	001a      	movs	r2, r3
    4988:	f7fe faf0 	bl	2f6c <_write>
    498c:	1c43      	adds	r3, r0, #1
    498e:	d103      	bne.n	4998 <_write_r+0x20>
    4990:	6823      	ldr	r3, [r4, #0]
    4992:	2b00      	cmp	r3, #0
    4994:	d000      	beq.n	4998 <_write_r+0x20>
    4996:	602b      	str	r3, [r5, #0]
    4998:	bd70      	pop	{r4, r5, r6, pc}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	20000614 	.word	0x20000614

000049a0 <_close_r>:
    49a0:	2300      	movs	r3, #0
    49a2:	b570      	push	{r4, r5, r6, lr}
    49a4:	4c06      	ldr	r4, [pc, #24]	; (49c0 <_close_r+0x20>)
    49a6:	0005      	movs	r5, r0
    49a8:	0008      	movs	r0, r1
    49aa:	6023      	str	r3, [r4, #0]
    49ac:	f7fe fb18 	bl	2fe0 <_close>
    49b0:	1c43      	adds	r3, r0, #1
    49b2:	d103      	bne.n	49bc <_close_r+0x1c>
    49b4:	6823      	ldr	r3, [r4, #0]
    49b6:	2b00      	cmp	r3, #0
    49b8:	d000      	beq.n	49bc <_close_r+0x1c>
    49ba:	602b      	str	r3, [r5, #0]
    49bc:	bd70      	pop	{r4, r5, r6, pc}
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	20000614 	.word	0x20000614

000049c4 <_fstat_r>:
    49c4:	2300      	movs	r3, #0
    49c6:	b570      	push	{r4, r5, r6, lr}
    49c8:	4c06      	ldr	r4, [pc, #24]	; (49e4 <_fstat_r+0x20>)
    49ca:	0005      	movs	r5, r0
    49cc:	0008      	movs	r0, r1
    49ce:	0011      	movs	r1, r2
    49d0:	6023      	str	r3, [r4, #0]
    49d2:	f7fe fb08 	bl	2fe6 <_fstat>
    49d6:	1c43      	adds	r3, r0, #1
    49d8:	d103      	bne.n	49e2 <_fstat_r+0x1e>
    49da:	6823      	ldr	r3, [r4, #0]
    49dc:	2b00      	cmp	r3, #0
    49de:	d000      	beq.n	49e2 <_fstat_r+0x1e>
    49e0:	602b      	str	r3, [r5, #0]
    49e2:	bd70      	pop	{r4, r5, r6, pc}
    49e4:	20000614 	.word	0x20000614

000049e8 <_isatty_r>:
    49e8:	2300      	movs	r3, #0
    49ea:	b570      	push	{r4, r5, r6, lr}
    49ec:	4c06      	ldr	r4, [pc, #24]	; (4a08 <_isatty_r+0x20>)
    49ee:	0005      	movs	r5, r0
    49f0:	0008      	movs	r0, r1
    49f2:	6023      	str	r3, [r4, #0]
    49f4:	f7fe fafc 	bl	2ff0 <_isatty>
    49f8:	1c43      	adds	r3, r0, #1
    49fa:	d103      	bne.n	4a04 <_isatty_r+0x1c>
    49fc:	6823      	ldr	r3, [r4, #0]
    49fe:	2b00      	cmp	r3, #0
    4a00:	d000      	beq.n	4a04 <_isatty_r+0x1c>
    4a02:	602b      	str	r3, [r5, #0]
    4a04:	bd70      	pop	{r4, r5, r6, pc}
    4a06:	46c0      	nop			; (mov r8, r8)
    4a08:	20000614 	.word	0x20000614

00004a0c <_lseek_r>:
    4a0c:	b570      	push	{r4, r5, r6, lr}
    4a0e:	0005      	movs	r5, r0
    4a10:	0008      	movs	r0, r1
    4a12:	0011      	movs	r1, r2
    4a14:	2200      	movs	r2, #0
    4a16:	4c06      	ldr	r4, [pc, #24]	; (4a30 <_lseek_r+0x24>)
    4a18:	6022      	str	r2, [r4, #0]
    4a1a:	001a      	movs	r2, r3
    4a1c:	f7fe faea 	bl	2ff4 <_lseek>
    4a20:	1c43      	adds	r3, r0, #1
    4a22:	d103      	bne.n	4a2c <_lseek_r+0x20>
    4a24:	6823      	ldr	r3, [r4, #0]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d000      	beq.n	4a2c <_lseek_r+0x20>
    4a2a:	602b      	str	r3, [r5, #0]
    4a2c:	bd70      	pop	{r4, r5, r6, pc}
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	20000614 	.word	0x20000614

00004a34 <memchr>:
    4a34:	b2c9      	uxtb	r1, r1
    4a36:	1882      	adds	r2, r0, r2
    4a38:	4290      	cmp	r0, r2
    4a3a:	d101      	bne.n	4a40 <memchr+0xc>
    4a3c:	2000      	movs	r0, #0
    4a3e:	4770      	bx	lr
    4a40:	7803      	ldrb	r3, [r0, #0]
    4a42:	428b      	cmp	r3, r1
    4a44:	d0fb      	beq.n	4a3e <memchr+0xa>
    4a46:	3001      	adds	r0, #1
    4a48:	e7f6      	b.n	4a38 <memchr+0x4>
	...

00004a4c <_read_r>:
    4a4c:	b570      	push	{r4, r5, r6, lr}
    4a4e:	0005      	movs	r5, r0
    4a50:	0008      	movs	r0, r1
    4a52:	0011      	movs	r1, r2
    4a54:	2200      	movs	r2, #0
    4a56:	4c06      	ldr	r4, [pc, #24]	; (4a70 <_read_r+0x24>)
    4a58:	6022      	str	r2, [r4, #0]
    4a5a:	001a      	movs	r2, r3
    4a5c:	f7fe fa64 	bl	2f28 <_read>
    4a60:	1c43      	adds	r3, r0, #1
    4a62:	d103      	bne.n	4a6c <_read_r+0x20>
    4a64:	6823      	ldr	r3, [r4, #0]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d000      	beq.n	4a6c <_read_r+0x20>
    4a6a:	602b      	str	r3, [r5, #0]
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	20000614 	.word	0x20000614

00004a74 <__FUNCTION__.13683>:
    4a74:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    4a84:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    4a94:	00005d64 61766e69 2064696c 6c636f69     d]..invalid iocl
    4aa4:	6d632074 00000064                       t cmd...

00004aac <__FUNCTION__.13126>:
    4aac:	70696863 6b61775f 00000065 20737542     chip_wake...Bus 
    4abc:	6f727265 35282072 64252e29 786c2520     error (5).%d %lx
    4acc:	0000000a 6c696146 74206465 6177206f     ....Failed to wa
    4adc:	7520656b 68742070 68632065 00007069     ke up the chip..

00004aec <__FUNCTION__.13171>:
    4aec:	645f6d6e 695f7672 5f74696e 6e776f64     nm_drv_init_down
    4afc:	64616f6c 646f6d5f 00000065 696d6e5b     load_mode...[nmi
    4b0c:	61747320 3a5d7472 69616620 6e69206c      start]: fail in
    4b1c:	62207469 00007375 50504128 4e492829     it bus..(APP)(IN
    4b2c:	00294f46 70696843 20444920 0a786c25     FO).Chip ID %lx.
    4b3c:	00000000 000009c0 000009c0 000009f0     ................
    4b4c:	00000972 00000996 000009a4 000009d6     r...............
    4b5c:	000009d6 00000a1e 00000956 00000a58     ........V...X...
    4b6c:	00000a58 00000a58 00000a58 000009b2     X...X...X.......
    4b7c:	cac4c9c3                                ....

00004b80 <__FUNCTION__.12322>:
    4b80:	5f697073 00646d63                       spi_cmd.

00004b88 <__FUNCTION__.12329>:
    4b88:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00004b98 <__FUNCTION__.12338>:
    4b98:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00004ba4 <__FUNCTION__.12354>:
    4ba4:	5f697073 61746164 6165725f 00000064     spi_data_read...

00004bb4 <__FUNCTION__.12369>:
    4bb4:	5f697073 61746164 6972775f 00006574     spi_data_write..

00004bc4 <__FUNCTION__.12381>:
    4bc4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00004bd4 <__FUNCTION__.12392>:
    4bd4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00004be4 <__FUNCTION__.12404>:
    4be4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00004bf4 <__FUNCTION__.12417>:
    4bf4:	735f6d6e 725f6970 00646165              nm_spi_read.

00004c00 <__FUNCTION__.12438>:
    4c00:	735f6d6e 695f6970 0074696e              nm_spi_init.

00004c0c <crc7_syndrome_table>:
    4c0c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    4c1c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    4c2c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    4c3c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    4c4c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    4c5c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    4c6c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    4c7c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    4c8c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    4c9c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    4cac:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    4cbc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    4ccc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    4cdc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    4cec:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    4cfc:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    4d0c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4d1c:	6e692064 6e726574 72206c61 20646165     d internal read 
    4d2c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    4d3c:	6e6f2043 6572202c 69797274 7720676e     C on, retrying w
    4d4c:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    4d5c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4d6c:	6e692064 6e726574 72206c61 20646165     d internal read 
    4d7c:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    4d8c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    4d9c:	6e726574 77206c61 65746972 6f727020     ternal write pro
    4dac:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    4dbc:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    4dcc:	20646d63 64616572 69686320 64692070     cmd read chip id
    4ddc:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4dec:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    4dfc:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    4e0c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4e1c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    4e2c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    4e3c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    4e4c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    4e5c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    4e6c:	00000000 65736552 6e612074 65722064     ....Reset and re
    4e7c:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    4e8c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4e9c:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    4eac:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    4ebc:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    4ecc:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    4edc:	69727720 62206574 6b636f6c 30252820      write block (%0
    4eec:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    4efc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    4f0c:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    4f1c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    4f2c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4f3c:	61642064 62206174 6b636f6c 69727720     d data block wri
    4f4c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    4f5c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4f6c:	656c6961 61642064 62206174 6b636f6c     ailed data block
    4f7c:	63726320 69727720 202c6574 20737562      crc write, bus 
    4f8c:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    4f9c:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    4fac:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    4fbc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    4fcc:	72206174 6f707365 2065736e 64616572     ta response read
    4fdc:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    4fec:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    4ffc:	206b636f 61746164 69727720 2e2e6574     ock data write..
    500c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    501c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    502c:	73756220 72726520 2e2e726f 0000002e      bus error......
    503c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    504c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    505c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    506c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    507c:	656c6961 61642064 72206174 6f707365     ailed data respo
    508c:	2065736e 64616572 7562202c 72652073     nse read, bus er
    509c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    50ac:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    50bc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    50cc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    50dc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    50ec:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    50fc:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    510c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    511c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    512c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    513c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    514c:	72202c64 20646165 20676572 38302528     d, read reg (%08
    515c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    516c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    517c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    518c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    519c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    51ac:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    51bc:	6e612074 65722064 20797274 25206425     t and retry %d %
    51cc:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    51dc:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    51ec:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    51fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    520c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    521c:	74697277 65722065 25282067 29783830     write reg (%08x)
    522c:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    523c:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    524c:	000a786c 42000800 42000c00 42001000     lx.....B...B...B
    525c:	42001400 42001800 42001c00 000025fe     ...B...B...B.%..
    526c:	000025fa 000025fa 00002660 00002660     .%...%..`&..`&..
    527c:	00002612 00002604 00002618 0000264e     .&...&...&..N&..
    528c:	0000289c 0000287c 0000287c 00002908     .(..|(..|(...)..
    529c:	0000288e 000028aa 00002880 000028b8     .(...(...(...(..
    52ac:	000028f8 0000325e 000032dc 00003366     .(..^2...2..f3..
    52bc:	00003384 00003442 000034a4 000035fc     .3..B4...4...5..
    52cc:	000034c8 000034ec 00003510 000035b0     .4...4...5...5..
    52dc:	0000361e 0000364a 00003678 000035e4     .6..J6..x6...5..
    52ec:	000036a6 6c696146 74206465 7570206f     .6..Failed to pu
    52fc:	68742074 69572065 43206946 20706968     t the WiFi Chip 
    530c:	64206e69 6c6e776f 2064616f 65646f6d     in download mode
    531c:	00000a21                                !...

00005320 <_global_impure_ptr>:
    5320:	20000010                                ... 

00005324 <__sf_fake_stderr>:
	...

00005344 <__sf_fake_stdin>:
	...

00005364 <__sf_fake_stdout>:
	...
    5384:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5394:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    53a4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    53b4:	00006665                                ef..

000053b8 <_init>:
    53b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ba:	46c0      	nop			; (mov r8, r8)
    53bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    53be:	bc08      	pop	{r3}
    53c0:	469e      	mov	lr, r3
    53c2:	4770      	bx	lr

000053c4 <__init_array_start>:
    53c4:	000000dd 	.word	0x000000dd

000053c8 <_fini>:
    53c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ca:	46c0      	nop			; (mov r8, r8)
    53cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    53ce:	bc08      	pop	{r3}
    53d0:	469e      	mov	lr, r3
    53d2:	4770      	bx	lr

000053d4 <__fini_array_start>:
    53d4:	000000b5 	.word	0x000000b5
